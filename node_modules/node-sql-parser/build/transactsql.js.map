{"version":3,"sources":["/home/runner/work/node-sql-parser/node-sql-parser/webpack/bootstrap","/home/runner/work/node-sql-parser/node-sql-parser/pegjs/transactsql.pegjs","/home/runner/work/node-sql-parser/node-sql-parser/external \"big-integer\"","/home/runner/work/node-sql-parser/node-sql-parser/src/index-definition.js","/home/runner/work/node-sql-parser/node-sql-parser/src/constrain.js","/home/runner/work/node-sql-parser/node-sql-parser/src/window.js","/home/runner/work/node-sql-parser/node-sql-parser/src/over.js","/home/runner/work/node-sql-parser/node-sql-parser/src/func.js","/home/runner/work/node-sql-parser/node-sql-parser/src/binary.js","/home/runner/work/node-sql-parser/node-sql-parser/src/limit.js","/home/runner/work/node-sql-parser/node-sql-parser/src/with.js","/home/runner/work/node-sql-parser/node-sql-parser/src/select.js","/home/runner/work/node-sql-parser/node-sql-parser/src/update.js","/home/runner/work/node-sql-parser/node-sql-parser/src/insert.js","/home/runner/work/node-sql-parser/node-sql-parser/src/interval.js","/home/runner/work/node-sql-parser/node-sql-parser/src/tables.js","/home/runner/work/node-sql-parser/node-sql-parser/src/column.js","/home/runner/work/node-sql-parser/node-sql-parser/src/util.js","/home/runner/work/node-sql-parser/node-sql-parser/src/sql.js","/home/runner/work/node-sql-parser/node-sql-parser/src/command.js","/home/runner/work/node-sql-parser/node-sql-parser/src/exec.js","/home/runner/work/node-sql-parser/node-sql-parser/src/assign.js","/home/runner/work/node-sql-parser/node-sql-parser/src/show.js","/home/runner/work/node-sql-parser/node-sql-parser/src/union.js","/home/runner/work/node-sql-parser/node-sql-parser/src/alter.js","/home/runner/work/node-sql-parser/node-sql-parser/src/analyze.js","/home/runner/work/node-sql-parser/node-sql-parser/src/create.js","/home/runner/work/node-sql-parser/node-sql-parser/src/delete.js","/home/runner/work/node-sql-parser/node-sql-parser/src/proc.js","/home/runner/work/node-sql-parser/node-sql-parser/src/array-struct.js","/home/runner/work/node-sql-parser/node-sql-parser/src/expr.js","/home/runner/work/node-sql-parser/node-sql-parser/src/aggregation.js","/home/runner/work/node-sql-parser/node-sql-parser/src/case.js","/home/runner/work/node-sql-parser/node-sql-parser/src/parser.single.js","/home/runner/work/node-sql-parser/node-sql-parser/src/parser.js","/home/runner/work/node-sql-parser/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c6","head","tail","createList","peg$c11","peg$literalExpectation","peg$c14","peg$c16","peg$c18","peg$c25","peg$c30","peg$c32","peg$c34","peg$c47","peg$c51","peg$c53","peg$c55","peg$c57","peg$c60","peg$c62","peg$c64","peg$c69","peg$c74","peg$c76","peg$c80","peg$c82","peg$c85","peg$c89","peg$c96","peg$c98","peg$c100","peg$c102","peg$c104","peg$c113","peg$c115","peg$c117","peg$c119","peg$c122","peg$c124","peg$c126","peg$c128","peg$c134","peg$c142","peg$c146","peg$c148","peg$c150","peg$c153","peg$c156","peg$c158","peg$c160","peg$c166","peg$c168","peg$c170","peg$c172","peg$c174","peg$c177","peg$c179","peg$c182","peg$c184","peg$c187","peg$c189","peg$c191","peg$c193","peg$c195","peg$c197","peg$c200","peg$c203","peg$c205","peg$c207","peg$c209","peg$c212","peg$c216","peg$c223","peg$c225","peg$c228","peg$c230","peg$c237","peg$c239","peg$c246","peg$c262","peg$c264","peg$c270","peg$c272","k","e","kbs","toLowerCase","symbol","expr","peg$c274","peg$c276","peg$c278","peg$c280","peg$c282","peg$c285","peg$c287","peg$c290","peg$c292","peg$c294","peg$c296","peg$c298","peg$c300","peg$c302","peg$c304","peg$c306","peg$c308","peg$c310","peg$c313","peg$c315","peg$c317","peg$c319","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c325","peg$c328","peg$c331","peg$c335","peg$c337","peg$c339","peg$c341","peg$c343","peg$c345","peg$c347","peg$c349","peg$c351","peg$c353","peg$c355","peg$c357","peg$c359","peg$c361","peg$c363","peg$c365","peg$c367","peg$c387","peg$c389","peg$c391","peg$c394","peg$c397","peg$c402","peg$c422","createBinaryExprChain","peg$c424","peg$c428","nk","peg$c431","peg$c433","peg$c435","peg$c437","peg$c439","peg$c441","peg$c449","peg$c451","peg$c454","peg$c456","peg$c458","peg$c462","reservedMap","peg$c466","peg$c467","peg$c468","peg$classExpectation","peg$c469","chars","peg$c470","peg$c471","peg$c473","peg$c474","peg$c475","peg$c477","peg$c478","peg$c479","peg$c481","peg$c483","peg$c484","peg$c485","peg$c486","peg$c487","peg$c488","peg$c489","peg$c491","peg$c497","peg$c510","peg$c513","peg$c516","peg$c519","peg$c538","peg$c541","ca","peg$c542","peg$c543","peg$c544","peg$c545","peg$c547","peg$c550","peg$c553","peg$c556","peg$c559","peg$c562","peg$c565","peg$c568","peg$c571","peg$c574","peg$c577","peg$c580","peg$c583","peg$c586","peg$c588","peg$c589","peg$c598","peg$c602","peg$c603","peg$c604","peg$c605","peg$c606","peg$c607","peg$c608","peg$c609","peg$c612","peg$c614","peg$c616","peg$c618","peg$c620","peg$c622","peg$c626","peg$c629","peg$c632","peg$c634","peg$c637","peg$c639","peg$c641","peg$c643","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c659","peg$c662","peg$c664","peg$c667","peg$c669","peg$c671","peg$c674","peg$c677","peg$c680","peg$c683","peg$c687","peg$c689","peg$c691","peg$c693","peg$c695","peg$c697","peg$c699","peg$c701","peg$c703","peg$c705","peg$c707","peg$c709","peg$c711","peg$c713","peg$c716","peg$c718","peg$c720","peg$c722","peg$c724","peg$c726","peg$c729","peg$c732","peg$c735","peg$c738","peg$c741","peg$c744","peg$c747","peg$c750","peg$c752","peg$c756","peg$c759","peg$c762","peg$c765","peg$c768","peg$c771","peg$c774","peg$c777","peg$c780","peg$c782","peg$c784","peg$c786","peg$c788","peg$c790","peg$c793","peg$c796","peg$c799","peg$c802","peg$c805","peg$c808","peg$c811","peg$c814","peg$c817","peg$c820","peg$c823","peg$c826","peg$c829","peg$c832","peg$c835","peg$c838","peg$c841","peg$c844","peg$c847","peg$c850","peg$c853","peg$c856","peg$c859","peg$c862","peg$c865","peg$c868","peg$c871","peg$c874","peg$c877","peg$c880","peg$c883","peg$c886","peg$c889","peg$c892","peg$c895","peg$c898","peg$c901","peg$c907","peg$c910","peg$c913","peg$c916","peg$c919","peg$c922","peg$c925","peg$c928","peg$c931","peg$c934","peg$c937","peg$c940","peg$c943","peg$c946","peg$c950","peg$c953","peg$c956","peg$c959","peg$c962","peg$c964","peg$c966","peg$c968","peg$c970","peg$c972","peg$c975","peg$c978","peg$c982","peg$c985","peg$c989","peg$c992","peg$c996","peg$c999","peg$c1002","peg$c1005","peg$c1007","peg$c1009","peg$c1011","peg$c1013","peg$c1015","peg$c1017","peg$c1019","peg$c1021","peg$c1023","peg$c1025","peg$c1027","peg$c1029","peg$c1031","peg$c1033","peg$c1034","peg$c1035","peg$c1050","lb","rb","peg$c1052","dataType","peg$c1059","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s1","s3","s4","s5","s6","s7","s8","peg$parsestart_item","peg$parse__","peg$parseKW_GO","tableList","cur","item","go_next","go","from","ast","peg$c0","s2","peg$parsecrud_stmt","peg$parseSEMICOLON","peg$c2","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parseif_exists","peg$parsetable_ref_list","a","ife","tt","db","keyword","prefix","substr","peg$parseident","peg$c90","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c91","peg$parseKW_VIEW","peg$c92","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","peg$parsecreate_table_definition","peg$parsetable_option","peg$parseCOMMA","peg$parsetable_options","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$c23","peg$parsecreate_like_table_simple","peg$parseLPAREN","peg$parseRPAREN","parentheses","lt","like","peg$c22","peg$parsecreate_table_stmt","s21","s23","s24","s25","s26","s27","s28","s29","s30","peg$parseKW_UNIQUE","peg$parseKW_CLUSTERED","peg$parseKW_NONCLUSTERED","peg$parsecolumn_order_list","peg$parsecolumn_list","peg$parseinclude_column","peg$parsewhere_clause","peg$parseKW_WITH","peg$parseindex_options_list","peg$parseon_clause","kw","on","ta","cols","w","wr","fo","index_type","index","on_kw","index_columns","include","where","with","filestream_on","peg$parsecreate_index_stmt","peg$parseident_start","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parseident_name","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parseproc_func_call","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","s10","s12","peg$parsecolumn_ref_list","peg$parseview_attribute","peg$parseview_attribute_list","peg$parseselect_stmt_nake","peg$parseview_with","view","attributes","select","peg$parsealter_view_stmt","peg$parsealter_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parseKW_TABLES","peg$parselock_table","peg$parselock_table_list","ltl","tables","peg$parselock_stmt","peg$parseKW_UNLOCK","peg$parseunlock_stmt","peg$parseKW_DECLARE","peg$parsedeclare_var","peg$parsedeclare_var_list","dl","declare","peg$parseKW_VAR__PRE_AT","at","definition","peg$parsedeclare_stmt","peg$parseexec_variable","peg$parseexec_varibale_list","v","parameters","peg$parseexec_stmt","s14","peg$parseexpr","peg$parseKW_ELSE","ie","ia","g","el","es","boolean_expr","semicolons","if_expr","else_expr","peg$parseif_else_stmt","peg$parsewith_clause","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","cte","dbObj","action","queryTableAlias","set","peg$c399","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parseinsert_value_clause","ri","isArray","row","idx","values","partition","peg$c407","peg$parsereplace_insert_stmt","ig","it","filter","map","peg$c408","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","f","addition","peg$c400","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseselect_stmt","peg$parseorder_by_clause","peg$parselimit_clause","ob","_next","set_op","_orderby","_limit","peg$c5","peg$parsecolumn_order_item","peg$parseLBRAKE","peg$parseRBRAKE","peg$parseKW_ASC","peg$parseKW_DESC","order_by","peg$c9","peg$parsecolumn_order","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parsecreate_definition","peg$parsecreate_constraint_definition","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parsecolumn_definition_opt","peg$parseKW_NOT_NULL","peg$parseliteral_not_null","peg$parseliteral_null","nullable","peg$parseKW_DEFAULT","peg$parseliteral","peg$parsedefault_expr","default_val","peg$parsecreate_constraint_check","check","u","unique_or_primary","peg$c35","peg$parseliteral_numeric","seed","increment","peg$parseidentity_stmt","auto_increment","peg$parsekeyword_comment","comment","peg$parseKW_COLLATE","peg$parseKW_ASSIGIN_EQUAL","peg$parsecollate_expr","collate","peg$parsecolumn_format","column_format","peg$parsestorage","storage","peg$parsereference_definition","reference_definition","peg$parsecreate_option_character_set_kw","character_set","peg$c42","cdo","peg$parsedata_type","opt","peg$c43","peg$parsecolumn_definition_opt_list","resource","peg$c45","datatype","peg$c70","peg$parseKW_ADD","peg$parseALTER_ADD_CONSTRAINT","peg$parseKW_CONSTRAINT","constraint","peg$parseALTER_DROP_CONSTRAINT","peg$parseALTER_ENABLE_CONSTRAINT","peg$parseALTER_DISABLE_CONSTRAINT","peg$parseKW_COLUMN","kc","cd","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","id","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","tn","peg$parseALTER_RENAME_TABLE","algorithm","lock","peg$parseKW_KEY","peg$parsecolumn","peg$parseindex_type","peg$parsecte_column_definition","peg$parseindex_options","index_options","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","peg$parseconstraint_name","peg$c140","peg$parsecreate_with_index_options","de","constraint_type","peg$parsecreate_constraint_primary","peg$parsecreate_constraint_unique","peg$parsecreate_constraint_foreign","nfr","peg$parseor_and_where_expr","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_action","ro","peg$parseKW_CURRENT_TIMESTAMP","peg$parseexpr_list","args","peg$parsereference_option","peg$parseKW_COMMENT","peg$parseliteral_string","peg$c201","peg$c210","peg$c213","peg$parsetable_base","suffix","peg$parselock_type","lock_type","parentheses_symbol","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","peg$parsecolumn_ref_index","s16","s18","s20","s22","opts","top","h","fx","peg$parseKW_SELECT","peg$parse___","peg$parsequery_option","peg$c249","peg$parseoption_clause","peg$parseKW_TOP","peg$parsenumber","percent","peg$c248","peg$parsetop_clause","peg$parseKW_DISTINCT","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$c395","peg$parsefor_xml_item","peg$parsefor_xml","info","distinct","for","groupby","having","orderby","limit","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c251","peg$parseDOT","tbl","peg$c252","peg$parseKW_AND","peg$parseKW_OR","peg$parseLOGIC_OPERATOR","len","result","left","createBinaryExpr","peg$c420","peg$parsebinary_column_expr","peg$parsealias_clause","peg$parsevalue_alias_clause","JSON","stringify","peg$c464","peg$parsequoted_ident","peg$parsealias_ident","peg$parseKW_FROM","peg$parseKW_PIVOT","peg$parseaggr_func","peg$parsepivot_unpivot_common_clause","peg$parseKW_UNPIVOT","peg$c259","peg$parsepivot_operator","operator","peg$parsein_op_right","in_expr","peg$parseKW_USING","peg$parseindex_option","peg$c267","peg$parsepartition_number_expression","peg$parseon_partition","peg$parsepartition_number_expression_list","partitions","peg$parseKW_KEY_BLOCK_SIZE","peg$parseKW_OFF","peg$c311","peg$c318","peg$parsetable_ref","peg$parsejoin_op","peg$parseident_name_list","il","using","peg$c322","alias","peg$c323","peg$parsetable_join","peg$parsetable_hint_item","peg$c333","peg$c368","peg$parsetable_hint","peg$parsetable_hint_item_list","th","peg$parseKW_DUAL","table_hint","peg$parsevalue_clause","peg$c372","peg$c373","peg$parseKW_LEFT","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_INNER","peg$parseKW_CROSS","peg$c375","server","schema","peg$c377","obj","peg$c378","peg$parsevar_decl","peg$parseKW_WHERE","peg$parseliteral_list","peg$parsepartition_by_clause","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","res","seperator","peg$c385","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c404","peg$parsevalue_item","peg$parseKW_INSERT","peg$parsevalue_list","peg$c412","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parsecase_when_then_list","peg$parsecase_when_then","peg$parseKW_WHEN","peg$parseKW_THEN","cond","peg$parsecase_else","peg$parse_expr","peg$parseprimary","peg$parsecomparison_op_right","rh","logicExpr","right","peg$c418","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$c421","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseexists_op","peg$parseexists_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parseKW_BETWEEN","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c443","peg$parseis_op_right","peg$parselike_op","peg$parselike_op_right","peg$parsein_op","peg$parseKW_IN","peg$c447","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c530","scale","peg$c531","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c532","peg$parsecast_expr","peg$parsescalar_time_func","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parsescalar_func","peg$parseover_partition","over","peg$parseon_update_current_timestamp","peg$parseproc_func_name","bc","peg$c528","peg$parsefunc_call","condition_list","otherwise","peg$parseKW_CASE","peg$parseKW_END","peg$c415","peg$parsecase_expr","peg$c461","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsebrackets_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c524","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c495","peg$parseas_window_specification","as_window_specification","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parsewindow_frame_bound","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_TIME","peg$parseKW_DATE","peg$parseKW_TIMESTAMP","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$parseKW_NULL","peg$c540","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c592","exp","peg$c593","peg$c594","peg$parsedigits","peg$parsedigit","digit","peg$c596","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NVARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_REAL","peg$parseKW_DOUBLE","peg$parseKW_DATETIME2","peg$parseKW_DATETIMEOFFSET","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parseblock_comment","peg$parsechar","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseproc_primary_list","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1042","peg$c1044","peg$c1049","peg$parsemem_chain","members","quoted","peg$parseKW_NCHAR","peg$c1053","peg$parsecharacter_string_type","peg$parsenumeric_type_suffix","peg$c1056","peg$parseKW_BIT","peg$parseKW_MONEY","peg$parseKW_SMALLMONEY","peg$c1057","peg$parsenumeric_type","peg$parseKW_SMALLDATETIME","peg$parsedatetime_type","peg$parseKW_JSON","peg$parsejson_type","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parsetext_type","peg$parseKW_UNIQUEIDENTIFIER","peg$parseuniqueidentifier_type","peg$parseKW_ZEROFILL","un","ze","peg$c1054","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","tableName","newColumnsList","Set","keys","columnInfo","split","require","indexTypeToSQL","indexType","toUpper","indexOptionToSQL","indexOpt","upperType","indexOptArray","literalToSQL","apply","_toConsumableArray","shift","commentToSQL","onPartitionsToSQL","hasVal","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","_indexDefinition$inde","indexOptions","withExpr","definitionSQL","concat","exprToSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","identifierToSql","columnReferenceDefinitionToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","_expr$consider_nulls","consider_nulls","argsList","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","onUpdate","castToSQL","_expr$arrows","arrows","expression","_expr$properties","properties","dataTypeSuffix","str","symbolChar","arrow","commonOptionConnector","commonTypeValue","array","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","suffixStr","separator","binaryToSQL","rstr","isBetween","escape","composePrefixValSuffix","limitToSQL","fetch","connector","limitOffsetToSQL","withToSQL","isRecursive","withExprStr","columnRefToSQL","selectIntoToSQL","into","position","intoType","varToSQL","selectToSQL","asStructVal","as_struct_val","forXml","_stmt$for_sys_time_as","for_sys_time_as_of","forSystem","lockingRead","locking_read","_stmt$into","qualify","windowInfo","window","withInfo","clauses","topToSQL","distinctToSQL","columnsToSQL","intoSQL","tablesToSQL","_ref","getExprListSQL","forXmlToSQL","sql","setToSQL","sets","_step","_iterator","_createForOfIteratorHelper","done","setItem","val","err","valuesToSQL","partitionToSQL","partitionArr","conflictTargetToSQL","conflictTarget","conflictActionToSQL","conflictAction","conflictToSQL","conflict","insertToSQL","_stmt$prefix","onDuplicateUpdate","on_duplicate_update","returning","duplicateSet","returningToSQL","intervalToSQL","intervalExpr","unnestToSQL","unnestExpr","withOffset","with_offset","operatorToSQL","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","tableToSQL","prefixStr","tablesample","serverName","schemaStr","valueSQL","valuesExpr","tumble","data","timecol","size","tableTumbleToSQL","tableSampleSQL","repeatable","baseTable","joinExpr","tableOptionToSQL","tableOption","array_index","isDual","_expr$subFields","subFields","columnOffsetToSQL","columnDataType","reference","onAction","onRef","columnOrderToSQL","columnOrder","nulls","opclass","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","defaultOpt","autoIncrement","uniquePrimary","columnFormat","autoIncreatementToSQL","columnOption","generated","storage_type","generatedExpressionToSQL","asToSQL","asStr","columnIdentifierToSql","columnToSQL","Reflect","has","getDual","exprList","expr_list","star","columnsStr","DEFAULT_OPT","PARSER_NAME","parserOpt","createValueExpr","_typeof","getParserOpt","setParserOpt","ident","replaceParams","params","replaceParamsInner","dataTypeToSQL","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field","field_name","field_type","triggerEventToSQL","events","event","eventKw","kwArgs","commonKeywordArgsToSQL","autoIncreatement","columnOrderListToSQL","columnOrderList","supportedTypes","checkSupported","includes","toSQL","multipleToSQL","unionToSQL","astToSQL","goToSQL","sqlItem","commonCmdToSQL","trigger","lockUnlockToSQL","_step2","tableStmt","_iterator2","_loop","lockType","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","grantUserOrRoleToSQL","host","grantAndRevokeToSQL","grant_option_for","objects","to_from","user_or_roles","withOpt","objStr","priv","privSQL","object_type","priv_level","privLevel","execVariablesToSQL","assignToSQL","leftVar","rightVal","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","role_list","userAndHost","role","showGrantsForUser","typeToSQLFn","alter","_stmt$keyword","argsExpr","alterArgsToSQL","alterExprToSQL","alterAggregateToSQL","_stmt$expr","alterTableToSQL","alterSchemaToSQL","alterDomainTypeToSQL","alterFunctionToSQL","viewName","alterViewToSQL","analyze","attach","functionName","argsSQL","aggregateOptionToSQL","createAggregateToSQL","ifNotExists","createDefinition","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createDefinitionToSQL","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createConstraintTriggerToSQL","definer","triggerBody","triggerEvents","triggerOrder","order","triggerTime","time","eventStr","createTriggerToSQL","extension","withName","version","createExtensionToSQL","returns","last","createFunctionReturnsOptToSQL","createFunctionReturnsToSQL","createFunctionOptionToSQL","createFunctionToSQL","concurrently","fileStream","indexColumns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","sqlSecurity","sql_security","withClause","withOptions","with_options","createViewToSQL","domain","definitionType","createDomainToSQL","createTypeToSQL","deallocate","delete","exec","nameWithArgs","label","query","stmts","update","if","boolExpr","elseExpr","elseifExpr","elseif_expr","ifExpr","elseif","then","semicolon","insert","drop","truncate","dec","constant","not_null","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","show","grant","revoke","proc","returnToSQL","raise","level","exprInfo","option","fun","_stmt","_parentheses","nextFun","unionKeyword","astInfo","indexSQL","begin","parameter","firstAfter","first_after","oldColumn","old_column","trim","arg","defaultSQL","arrayStructValueToSQL","arrayPath","array_path","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","aggr_func","within_group_orderby","withinGroup","filterStr","any_value","window_func","assign","binary_expr","case","conditions","cast","column_ref","extract","castType","cast_type","source","flatten","argsStr","flattenArgToSQL","fulltext_search","against","function","interval","struct","unnest","namedWindowExprInfo","_expr$prefix","varName","exprOrigin","deleteProperty","_i","_Object$keys","expressions","upperPrefix","unary_expr","unarExpr","space","_defineProperty","Parser","_classCallCheck","arguments","undefined","_opt$database","typeCase","parsers","whiteList","_opt$type","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","self","NodeSQLParser","util","global"],"mappings":"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","file":"transactsql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(head, tail) {\n          if (!tail || tail.length === 0) return head\n          delete head.tableList\n          delete head.columnList\n          let cur = head\n          for (let i = 0; i < tail.length; i++) {\n            const item = tail[i][3] || []\n            delete item.tableList\n            delete item.columnList\n            cur.go_next = item\n            cur.go = 'go'\n            cur = cur.go_next\n          }\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n        },\n      peg$c1 = function(n) {\n          return n\n        },\n      peg$c2 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c3 = function() { return 'union all' },\n      peg$c4 = function() { return 'union' },\n      peg$c5 = function(head, tail, ob, l) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.set_op = tail[i][1]\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c6 = function(head, tail) {\n          return createList(head, tail)\n        },\n      peg$c7 = function(c, o) { return {\n            ...c,\n            order_by: o.toLowerCase()\n          }\n        },\n      peg$c8 = function(c) { return c },\n      peg$c9 = function(c, o) {\n          return {\n            ...c,\n            order_by: o.toLowerCase()\n          }\n        },\n      peg$c10 = \"include\",\n      peg$c11 = peg$literalExpectation(\"INCLUDE\", true),\n      peg$c12 = function(k, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            columns:c,\n          }\n        },\n      peg$c13 = \"filestream_on\",\n      peg$c14 = peg$literalExpectation(\"FILESTREAM_ON\", true),\n      peg$c15 = function(a, kw, t, n, on, ta, cols, i, w, wr, op, fo) {\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_columns: cols,\n                include: i,\n                where: w,\n                with: wr && wr[4],\n                on: op,\n                filestream_on: fo && { value: fo[2] },\n              }\n          }\n        },\n      peg$c16 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c17 = \"if\",\n      peg$c18 = peg$literalExpectation(\"IF\", true),\n      peg$c19 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c20 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists: ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c21 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c22 = function(a, tp, ife, t, lt) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c23 = function(t) {\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c24 = function(e) {\n            e.parentheses = true;\n            return e;\n        },\n      peg$c25 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c26 = function(n) {\n          if (n && !n.value) n.value = 'null'\n          return { nullable: n }\n        },\n      peg$c27 = function(d) {\n          return { default_val: d }\n        },\n      peg$c28 = function(ch) {\n          return { check: ch }\n        },\n      peg$c29 = \"unique\",\n      peg$c30 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c31 = \"primary\",\n      peg$c32 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c33 = \"key\",\n      peg$c34 = peg$literalExpectation(\"KEY\", true),\n      peg$c35 = function(u) {\n          let unique_or_primary = [u]\n          if (Array.isArray(u)) unique_or_primary = [u[0], u[2]]\n          return { unique_or_primary: unique_or_primary.filter(v => v).join(' ').toLowerCase('') }\n        },\n      peg$c36 = function(o) {\n          return { auto_increment: o }\n        },\n      peg$c37 = function(co) {\n          return { comment: co }\n        },\n      peg$c38 = function(ca) {\n          return { collate: ca }\n        },\n      peg$c39 = function(cf) {\n          return { column_format: cf }\n        },\n      peg$c40 = function(s) {\n          return { storage: s }\n        },\n      peg$c41 = function(re) {\n          return { reference_definition: re }\n        },\n      peg$c42 = function(t, s, v) {\n          return { character_set: { type: t, value: v, symbol: s }}\n        },\n      peg$c43 = function(head, tail) {\n          let opt = head\n          for (let i = 0; i < tail.length; i++) {\n            opt = { ...opt, ...tail[i][1] }\n          }\n          return opt\n        },\n      peg$c44 = function(c, d, cdo) {\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              resource: 'column',\n              ...(cdo || {})\n            }\n          },\n      peg$c45 = function(c, as) {\n          if (as) c.as = as[2]\n          return {\n            column: c,\n            resource: 'column'\n          }\n        },\n      peg$c46 = \"identity\",\n      peg$c47 = peg$literalExpectation(\"IDENTITY\", true),\n      peg$c48 = function(c) {\n          return {\n            keyword: 'identity',\n            seed:c && c[2],\n            increment:c && c[6],\n            parentheses:c && true || false,\n          }\n        },\n      peg$c49 = function(s, ca) {\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c50 = \"column_format\",\n      peg$c51 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c52 = \"fixed\",\n      peg$c53 = peg$literalExpectation(\"FIXED\", true),\n      peg$c54 = \"dynamic\",\n      peg$c55 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c56 = \"default\",\n      peg$c57 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c58 = function(k, f) {\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c59 = \"storage\",\n      peg$c60 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c61 = \"disk\",\n      peg$c62 = peg$literalExpectation(\"DISK\", true),\n      peg$c63 = \"memory\",\n      peg$c64 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c65 = function(k, s) {\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c66 = function(ce) {\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c67 = function(at, name, as, dt, v) {\n          return {\n            at: '@',\n            name,\n            as: as && as[0].toLowerCase(),\n            datatype: dt,\n            keyword: 'variable',\n            definition: v && {\n              type: 'default',\n              keyword: v[0],\n              value: v[2]\n            }\n          }\n        },\n      peg$c68 = \"cursor\",\n      peg$c69 = peg$literalExpectation(\"CURSOR\", true),\n      peg$c70 = function(at, name) {\n          return {\n            at: '@',\n            name,\n            keyword: 'cursor',\n            prefix: 'cursor',\n          }\n        },\n      peg$c71 = function(a, dl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'declare',\n              declare: dl,\n              symbol: ',',\n            }\n          }\n        },\n      peg$c72 = function(a, at, name, as, t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'declare',\n              declare: [{\n                at: '@',\n                name,\n                as: as && as[0].toLowerCase(),\n                keyword: 'table',\n                prefix: 'table',\n                definition: t,\n              }]\n            }\n          }\n        },\n      peg$c73 = \"exec\",\n      peg$c74 = peg$literalExpectation(\"EXEC\", true),\n      peg$c75 = \"execute\",\n      peg$c76 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c77 = function(kw, t, v) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'exec',\n              keyword: kw,\n              module: t,\n              parameters: v,\n            }\n          }\n        },\n      peg$c78 = function(head, tail) {\n            return createList(head, tail);\n        },\n      peg$c79 = \"@\",\n      peg$c80 = peg$literalExpectation(\"@\", false),\n      peg$c81 = function(n, e) {\n          return {\n            type: 'variable',\n            name: n,\n            value: e,\n          }\n        },\n      peg$c82 = peg$literalExpectation(\"if\", true),\n      peg$c83 = function(ie, ia, s, g, el, es) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'if',\n              keyword: 'if',\n              boolean_expr: ie,\n              semicolons: [s || '', es || ''],\n              go: g,\n              if_expr: ia,\n              else_expr: el && el[2],\n            }\n          }\n        },\n      peg$c84 = \"exists\",\n      peg$c85 = peg$literalExpectation(\"exists\", true),\n      peg$c86 = function() {\n          return 'if exists'\n        },\n      peg$c87 = function(a, r, ife, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                prefix: ife,\n                name: t\n              }\n            };\n          },\n      peg$c88 = \"procedure\",\n      peg$c89 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c90 = function(a, r, p) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: a.toLowerCase(),\n              keyword: r.toLowerCase(),\n              name: p\n            }\n          }\n        },\n      peg$c91 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c92 = function(a, r, ife, t) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                prefix: ife,\n                name: t,\n              }\n            };\n          },\n      peg$c93 = function(a, kw, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c94 = function(d) {\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c95 = \"encryption\",\n      peg$c96 = peg$literalExpectation(\"ENCRYPTION\", true),\n      peg$c97 = \"schemabinding\",\n      peg$c98 = peg$literalExpectation(\"SCHEMABINDING\", true),\n      peg$c99 = \"view_metadata\",\n      peg$c100 = peg$literalExpectation(\"VIEW_METADATA\", true),\n      peg$c101 = \"check\",\n      peg$c102 = peg$literalExpectation(\"CHECK\", true),\n      peg$c103 = \"option\",\n      peg$c104 = peg$literalExpectation(\"OPTION\", true),\n      peg$c105 = function() {\n          return 'with check option'\n        },\n      peg$c106 = function(t, c, w, s, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                keyword: 'view',\n                view: t,\n                columns: c && c[2],\n                attributes: w && w[2],\n                select: s,\n                with: e\n              }\n            };\n          },\n      peg$c107 = function(t, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                keyword: 'table',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c108 = function(a, kc, cd) {\n            return {\n              action: a.toLowerCase(),\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c109 = function(kc, c) {\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c110 = function(id) {\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c111 = function(kw, tn) {\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c112 = \"algorithm\",\n      peg$c113 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c114 = \"instant\",\n      peg$c115 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c116 = \"inplace\",\n      peg$c117 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c118 = \"copy\",\n      peg$c119 = peg$literalExpectation(\"COPY\", true),\n      peg$c120 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c121 = \"lock\",\n      peg$c122 = peg$literalExpectation(\"LOCK\", true),\n      peg$c123 = \"none\",\n      peg$c124 = peg$literalExpectation(\"NONE\", true),\n      peg$c125 = \"shared\",\n      peg$c126 = peg$literalExpectation(\"SHARED\", true),\n      peg$c127 = \"exclusive\",\n      peg$c128 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c129 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c130 = function(c) {\n            return {\n              action: 'add',\n              create_definitions: c,\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c131 = function(kc, c) {\n            return {\n              action: 'drop',\n              constraint: c,\n              keyword: kc.toLowerCase(),\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c132 = function(c) {\n            return {\n              action: 'with',\n              constraint: c,\n              keyword: 'check check constraint',\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c133 = \"nocheck\",\n      peg$c134 = peg$literalExpectation(\"NOCHECK\", true),\n      peg$c135 = function(c) {\n            return {\n              action: 'nocheck',\n              keyword: 'constraint',\n              constraint: c,\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c136 = function(kc, c, t, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c137 = function(p, kc, c, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c138 = function(kc, c) {\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c139 = function(l, o) {\n          return { with: l, on:o }\n        },\n      peg$c140 = function(l) {\n          return { index_options: l }\n        },\n      peg$c141 = \"primary key\",\n      peg$c142 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c143 = function(kc, p, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              ...id,\n            }\n        },\n      peg$c144 = function(kc, u, p, i, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c145 = \"not\",\n      peg$c146 = peg$literalExpectation(\"NOT\", true),\n      peg$c147 = \"for\",\n      peg$c148 = peg$literalExpectation(\"FOR\", true),\n      peg$c149 = \"replication\",\n      peg$c150 = peg$literalExpectation(\"REPLICATION\", true),\n      peg$c151 = function(kc, u, nfr, c) {\n          return {\n              constraint_type: u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              constraint: kc && kc.constraint,\n              index_type: nfr && { keyword: 'not for replication', type: '' },\n              definition: [c],\n              resource: 'constraint',\n            }\n        },\n      peg$c152 = \"foreign key\",\n      peg$c153 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c154 = function(kc, p, i, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c155 = \"match full\",\n      peg$c156 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c157 = \"match partial\",\n      peg$c158 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c159 = \"match simple\",\n      peg$c160 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c161 = function(kc, t, de, m, od, ou) {\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match: m && m.toLowerCase(),\n              on_action: [od, ou].filter(v => v)\n            }\n        },\n      peg$c162 = function(oa) {\n          return {\n            on_action: [oa]\n          }\n        },\n      peg$c163 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: `on ${kw[0].toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c164 = function(kw, l) {\n          return {\n            type: 'function',\n            name: kw,\n            args: l\n          }\n        },\n      peg$c165 = \"restrict\",\n      peg$c166 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c167 = \"cascade\",\n      peg$c168 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c169 = \"set null\",\n      peg$c170 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c171 = \"no action\",\n      peg$c172 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c173 = \"set default\",\n      peg$c174 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c175 = function(kc) {\n          return {\n            type: 'origin',\n            value: kc.toLowerCase()\n          }\n        },\n      peg$c176 = \"character\",\n      peg$c177 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c178 = \"set\",\n      peg$c179 = peg$literalExpectation(\"SET\", true),\n      peg$c180 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c181 = \"charset\",\n      peg$c182 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c183 = \"collate\",\n      peg$c184 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c185 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c186 = \"auto_increment\",\n      peg$c187 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c188 = \"avg_row_length\",\n      peg$c189 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c190 = \"key_block_size\",\n      peg$c191 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c192 = \"max_rows\",\n      peg$c193 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c194 = \"min_rows\",\n      peg$c195 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c196 = \"stats_sample_pages\",\n      peg$c197 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c198 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c199 = \"connection\",\n      peg$c200 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c201 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c202 = \"compression\",\n      peg$c203 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c204 = \"'\",\n      peg$c205 = peg$literalExpectation(\"'\", false),\n      peg$c206 = \"zlib\",\n      peg$c207 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c208 = \"lz4\",\n      peg$c209 = peg$literalExpectation(\"LZ4\", true),\n      peg$c210 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c211 = \"engine\",\n      peg$c212 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c213 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c214 = function(o) {\n          return {\n            keyword: 'on',\n            value: `[${o}]`\n          }\n        },\n      peg$c215 = \"textimage_on\",\n      peg$c216 = peg$literalExpectation(\"TEXTIMAGE_ON\", true),\n      peg$c217 = function(to) {\n          return {\n            keyword:'textimage_on',\n            value: `[${to}]`\n          }\n        },\n      peg$c218 = function(fsid) {\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c219 = function(t) {\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c220 = function(kw, a) {\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c221 = function() {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'unlock',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c222 = \"read\",\n      peg$c223 = peg$literalExpectation(\"READ\", true),\n      peg$c224 = \"local\",\n      peg$c225 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c226 = function(s) {\n          return {\n            type: 'read',\n            suffix: s && 'local'\n          }\n        },\n      peg$c227 = \"low_priority\",\n      peg$c228 = peg$literalExpectation(\"LOW_PRIORITY\", true),\n      peg$c229 = \"write\",\n      peg$c230 = peg$literalExpectation(\"WRITE\", true),\n      peg$c231 = function(p) {\n          return {\n            type: 'write',\n            prefix: p && 'low_priority'\n          }\n        },\n      peg$c232 = function(t, lt) {\n          tableList.add(`lock::${t.db}::${t.table}`)\n          return {\n            table: t,\n            lock_type: lt\n          }\n        },\n      peg$c233 = function(head, tail) {\n          return createList(head, tail);\n        },\n      peg$c234 = function(ltl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: 'tables',\n              tables: ltl\n            }\n          }\n        },\n      peg$c235 = function(e) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c236 = \"(\",\n      peg$c237 = peg$literalExpectation(\"(\", false),\n      peg$c238 = \")\",\n      peg$c239 = peg$literalExpectation(\")\", false),\n      peg$c240 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c241 = function(cte) {\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c242 = function(name, columns, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt, columns };\n        },\n      peg$c243 = function(l) {\n            return l\n          },\n      peg$c244 = function(cte, opts, top, d, c, f, w, g, h, o, l, fx) {\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                for: fx,\n                where: w,\n                groupby: g,\n                having: h,\n                top,\n                orderby: o,\n                limit: l\n            };\n        },\n      peg$c245 = \"percent\",\n      peg$c246 = peg$literalExpectation(\"PERCENT\", true),\n      peg$c247 = function(n, p) {\n          return {\n            value: n,\n            percent: p && p.toLowerCase(),\n            parentheses: true,\n          }\n        },\n      peg$c248 = function(n, p) {\n          return {\n            value: n,\n            percent: p && p.toLowerCase()\n          }\n        },\n      peg$c249 = function(head, tail) {\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c250 = function(option) { return option; },\n      peg$c251 = function(head, tail) {\n            columnList.add('select::null::(.*)')\n            const item = {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            }\n            if (tail && tail.length > 0) return createList(item, tail)\n            return [item]\n          },\n      peg$c252 = function(tbl) {\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n              expr: {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c253 = function(e, alias) {\n            return { expr: e, as: alias };\n          },\n      peg$c254 = function(name, c) {\n            if (!c) return name;\n            return `${name}(${c[3].join(', ')})`\n          },\n      peg$c255 = function(i) { return i; },\n      peg$c256 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c257 = function(c, i) {\n          return {\n            column: c,\n            in_expr: i\n          }\n        },\n      peg$c258 = function(e, p, as) {\n          return {\n            'type': 'pivot',\n            'expr': e,\n            ...p,\n            as,\n          }\n        },\n      peg$c259 = function(e, p, as) {\n          return {\n            'type': 'unpivot',\n            'expr': e,\n            ...p,\n            as,\n          }\n        },\n      peg$c260 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c261 = \"btree\",\n      peg$c262 = peg$literalExpectation(\"BTREE\", true),\n      peg$c263 = \"hash\",\n      peg$c264 = peg$literalExpectation(\"HASH\", true),\n      peg$c265 = function(t) {\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c266 = function(k) {\n          return {\n            keyword: k.toLowerCase()\n          }\n        },\n      peg$c267 = function(head, tail) {\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c268 = function(s, t, e) {\n          return {\n            type: 'range',\n            symbol: t[0],\n            start: s,\n            end: s\n          }\n        },\n      peg$c269 = \"partitions\",\n      peg$c270 = peg$literalExpectation(\"PARTITIONS\", true),\n      peg$c271 = function(p) {\n          return {\n            type: 'on partitions',\n            partitions: p\n          }\n        },\n      peg$c272 = function(k, e, kbs) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          };\n        },\n      peg$c273 = \"fillfactor\",\n      peg$c274 = peg$literalExpectation(\"FILLFACTOR\", true),\n      peg$c275 = \"max_duration\",\n      peg$c276 = peg$literalExpectation(\"MAX_DURATION\", true),\n      peg$c277 = \"maxdop\",\n      peg$c278 = peg$literalExpectation(\"MAXDOP\", true),\n      peg$c279 = \"with\",\n      peg$c280 = peg$literalExpectation(\"WITH\", true),\n      peg$c281 = \"parser\",\n      peg$c282 = peg$literalExpectation(\"PARSER\", true),\n      peg$c283 = function(pn) {\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c284 = \"visible\",\n      peg$c285 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c286 = \"invisible\",\n      peg$c287 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c288 = function(k) {\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c289 = \"pad_index\",\n      peg$c290 = peg$literalExpectation(\"PAD_INDEX\", true),\n      peg$c291 = \"sort_in_tempdb\",\n      peg$c292 = peg$literalExpectation(\"SORT_IN_TEMPDB\", true),\n      peg$c293 = \"ignore_dup_key\",\n      peg$c294 = peg$literalExpectation(\"IGNORE_DUP_KEY\", true),\n      peg$c295 = \"statistics_norecompute\",\n      peg$c296 = peg$literalExpectation(\"STATISTICS_NORECOMPUTE\", true),\n      peg$c297 = \"statistics_incremental\",\n      peg$c298 = peg$literalExpectation(\"STATISTICS_INCREMENTAL\", true),\n      peg$c299 = \"drop_existing\",\n      peg$c300 = peg$literalExpectation(\"DROP_EXISTING\", true),\n      peg$c301 = \"online\",\n      peg$c302 = peg$literalExpectation(\"ONLINE\", true),\n      peg$c303 = \"resumable\",\n      peg$c304 = peg$literalExpectation(\"RESUMABLE\", true),\n      peg$c305 = \"allow_row_locks\",\n      peg$c306 = peg$literalExpectation(\"ALLOW_ROW_LOCKS\", true),\n      peg$c307 = \"allow_page_locks\",\n      peg$c308 = peg$literalExpectation(\"ALLOW_PAGE_LOCKS\", true),\n      peg$c309 = \"optimize_for_sequential_key\",\n      peg$c310 = peg$literalExpectation(\"OPTIMIZE_FOR_SEQUENTIAL_KEY\", true),\n      peg$c311 = function(k, e, r) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: {\n              type: 'origin',\n              value: r[0]\n            }\n          }\n        },\n      peg$c312 = \"data_compression\",\n      peg$c313 = peg$literalExpectation(\"DATA_COMPRESSION\", true),\n      peg$c314 = \"row\",\n      peg$c315 = peg$literalExpectation(\"ROW\", true),\n      peg$c316 = \"PAGE\",\n      peg$c317 = peg$literalExpectation(\"PAGE\", false),\n      peg$c318 = function(k, e, r, on) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: {\n              value: r,\n              on,\n            },\n          }\n        },\n      peg$c319 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c320 = function(t) { return t; },\n      peg$c321 = function(op, t, il) {\n            t.join = op;\n            t.using = il;\n            return t;\n          },\n      peg$c322 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c323 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c324 = \"forceseek\",\n      peg$c325 = peg$literalExpectation(\"FORCESEEK\", true),\n      peg$c326 = function(i, ic) {\n          return {\n            keyword: 'forceseek',\n            index: i,\n            index_columns: ic,\n            parentheses: true\n          }\n        },\n      peg$c327 = \"spatial_window_max_cells\",\n      peg$c328 = peg$literalExpectation(\"SPATIAL_WINDOW_MAX_CELLS\", true),\n      peg$c329 = function(n) {\n          return {\n            keyword: 'spatial_window_max_cells',\n            expr: n\n          }\n        },\n      peg$c330 = \"noexpand\",\n      peg$c331 = peg$literalExpectation(\"NOEXPAND\", true),\n      peg$c332 = function(p, il) {\n          return {\n            keyword: 'index',\n            expr: il,\n            parentheses: true,\n            prefix: p && p.toLowerCase()\n          }\n        },\n      peg$c333 = function(p, i) {\n          return {\n            keyword: 'index',\n            expr: i,\n            prefix: p && p.toLowerCase()\n          }\n        },\n      peg$c334 = \"forcescan\",\n      peg$c335 = peg$literalExpectation(\"FORCESCAN\", true),\n      peg$c336 = \"holdlock\",\n      peg$c337 = peg$literalExpectation(\"HOLDLOCK\", true),\n      peg$c338 = \"nolock\",\n      peg$c339 = peg$literalExpectation(\"NOLOCK\", true),\n      peg$c340 = \"nowait\",\n      peg$c341 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c342 = \"paglock\",\n      peg$c343 = peg$literalExpectation(\"PAGLOCK\", true),\n      peg$c344 = \"readcommitted\",\n      peg$c345 = peg$literalExpectation(\"READCOMMITTED\", true),\n      peg$c346 = \"readcommittedlock\",\n      peg$c347 = peg$literalExpectation(\"READCOMMITTEDLOCK\", true),\n      peg$c348 = \"readpast\",\n      peg$c349 = peg$literalExpectation(\"READPAST\", true),\n      peg$c350 = \"readuncommitted\",\n      peg$c351 = peg$literalExpectation(\"READUNCOMMITTED\", true),\n      peg$c352 = \"repeatableread \",\n      peg$c353 = peg$literalExpectation(\"REPEATABLEREAD \", true),\n      peg$c354 = \"rowlock\",\n      peg$c355 = peg$literalExpectation(\"ROWLOCK\", true),\n      peg$c356 = \"serializable\",\n      peg$c357 = peg$literalExpectation(\"SERIALIZABLE\", true),\n      peg$c358 = \"snapshot\",\n      peg$c359 = peg$literalExpectation(\"SNAPSHOT\", true),\n      peg$c360 = \"tablock\",\n      peg$c361 = peg$literalExpectation(\"TABLOCK\", true),\n      peg$c362 = \"tablockx\",\n      peg$c363 = peg$literalExpectation(\"TABLOCKX\", true),\n      peg$c364 = \"updlock\",\n      peg$c365 = peg$literalExpectation(\"UPDLOCK\", true),\n      peg$c366 = \"xlock\",\n      peg$c367 = peg$literalExpectation(\"XLOCK\", true),\n      peg$c368 = function(i) {\n          return {\n            keyword: 'literal_string',\n            expr: { type: 'origin', value: i }\n          }\n        },\n      peg$c369 = function(k, t) {\n          return {\n            keyword: k && k[0].toLowerCase(),\n            expr: t,\n            parentheses: true,\n          }\n        },\n      peg$c370 = function() {\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c371 = function(t, alias, th) {\n            t.as = alias\n            t.table_hint = th\n            return t\n          },\n      peg$c372 = function(stmt, alias) {\n          return {\n            expr: { type: 'values', values: stmt },\n            as: alias\n          };\n        },\n      peg$c373 = function(stmt, alias) {\n            if (Array.isArray(stmt)) stmt = { type: 'values', values: stmt }\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c374 = function(a, s) { return [a[0].toUpperCase(), s && s[0], 'JOIN'].filter(v => v).join(' '); },\n      peg$c375 = function(a) { return `${a[0].toUpperCase()} JOIN` },\n      peg$c376 = function(server, db, schema, table) {\n          return {\n              server,\n              db,\n              schema,\n              table\n            }\n        },\n      peg$c377 = function(db, schema, table) {\n            return {\n              db,\n              schema,\n              table\n            }\n          },\n      peg$c378 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c379 = function(v) {\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c380 = function(e) { return e; },\n      peg$c381 = function(e) { return e.value; },\n      peg$c382 = function(bc) { return bc; },\n      peg$c383 = function(l) { return l; },\n      peg$c384 = function(e, d) {\n          const obj = { expr: e, type: d };\n          return obj;\n        },\n      peg$c385 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c386 = \"raw\",\n      peg$c387 = peg$literalExpectation(\"RAW\", true),\n      peg$c388 = \"auto\",\n      peg$c389 = peg$literalExpectation(\"AUTO\", true),\n      peg$c390 = \"explicit\",\n      peg$c391 = peg$literalExpectation(\"EXPLICIT\", true),\n      peg$c392 = function(i) {\n          return {\n            keyword: i,\n          }\n        },\n      peg$c393 = \"path\",\n      peg$c394 = peg$literalExpectation(\"PATH\", true),\n      peg$c395 = function(i, v) {\n          return {\n            keyword: i,\n            expr: v && v[2]\n          }\n        },\n      peg$c396 = \"xml\",\n      peg$c397 = peg$literalExpectation(\"XML\", true),\n      peg$c398 = function(v) {\n          return {\n            type: 'for xml',\n            ...v,\n          }\n        },\n      peg$c399 = function(cte, t, l, w) {\n            const dbObj = {}\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'update'\n              if (db) dbObj[table] = db\n              if (table) tableList.add(`${action}::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => {\n                if (col.table) {\n                  const table = queryTableAlias(col.table)\n                  tableList.add(`update::${dbObj[table] || null}::${table}`)\n                }\n                columnList.add(`update::${col.table}::${col.column}`)\n              });\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                with: cte,\n                type: 'update',\n                table: t,\n                set: l,\n                where: w\n              }\n            };\n          },\n      peg$c400 = function(t, f, w) {\n           if(f) f.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'delete'\n              if (table) tableList.add(`${action}::${db}::${table}`)\n              if (!join) columnList.add(`delete::${table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c401 = \"=\",\n      peg$c402 = peg$literalExpectation(\"=\", false),\n      peg$c403 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c404 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c405 = function(il) {\n            return il\n          },\n      peg$c406 = function(v) {\n          return v\n        },\n      peg$c407 = function(ri, t, p, c, v) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n              }\n            };\n          },\n      peg$c408 = function(ri, ig, it, t, p, v) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n              }\n            };\n          },\n      peg$c409 = function() { return 'insert'; },\n      peg$c410 = function() { return 'replace'; },\n      peg$c411 = function(l) {\n            return l;\n          },\n      peg$c412 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c413 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c414 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c415 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c416 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c417 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c418 = function(head, tail, rh) {\n          const logicExpr = createBinaryExprChain(head, tail)\n          if (rh === null) return logicExpr\n          else if (rh.type === 'arithmetic') return createBinaryExprChain(logicExpr, rh.tail)\n          else return createBinaryExpr(rh.op, logicExpr, rh.right)\n        },\n      peg$c419 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c420 = function(head, tail) {\n          const ast = head.ast\n          if (ast && ast.type === 'select') {\n            if (!(head.parentheses_symbol || head.parentheses || head.ast.parentheses || head.ast.parentheses_symbol) || ast.columns.length !== 1 || ast.columns[0].expr.column === '*') throw new Error('invalid column clause with select statement')\n          }\n          if (!tail || tail.length === 0) return head\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c421 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c422 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c423 = \"!\",\n      peg$c424 = peg$literalExpectation(\"!\", false),\n      peg$c425 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c426 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c427 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c428 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c429 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c430 = \">=\",\n      peg$c431 = peg$literalExpectation(\">=\", false),\n      peg$c432 = \">\",\n      peg$c433 = peg$literalExpectation(\">\", false),\n      peg$c434 = \"<=\",\n      peg$c435 = peg$literalExpectation(\"<=\", false),\n      peg$c436 = \"<>\",\n      peg$c437 = peg$literalExpectation(\"<>\", false),\n      peg$c438 = \"<\",\n      peg$c439 = peg$literalExpectation(\"<\", false),\n      peg$c440 = \"!=\",\n      peg$c441 = peg$literalExpectation(\"!=\", false),\n      peg$c442 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c443 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c444 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c445 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c446 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c447 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c448 = \"+\",\n      peg$c449 = peg$literalExpectation(\"+\", false),\n      peg$c450 = \"-\",\n      peg$c451 = peg$literalExpectation(\"-\", false),\n      peg$c452 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c453 = \"*\",\n      peg$c454 = peg$literalExpectation(\"*\", false),\n      peg$c455 = \"/\",\n      peg$c456 = peg$literalExpectation(\"/\", false),\n      peg$c457 = \"%\",\n      peg$c458 = peg$literalExpectation(\"%\", false),\n      peg$c459 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c460 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c461 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c462 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c463 = function(name) {\n            return name;\n          },\n      peg$c464 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c465 = \"\\\"\",\n      peg$c466 = peg$literalExpectation(\"\\\"\", false),\n      peg$c467 = /^[^\"]/,\n      peg$c468 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c469 = function(chars) { return chars.join(''); },\n      peg$c470 = /^[^']/,\n      peg$c471 = peg$classExpectation([\"'\"], true, false),\n      peg$c472 = \"`\",\n      peg$c473 = peg$literalExpectation(\"`\", false),\n      peg$c474 = /^[^`]/,\n      peg$c475 = peg$classExpectation([\"`\"], true, false),\n      peg$c476 = \"[\",\n      peg$c477 = peg$literalExpectation(\"[\", false),\n      peg$c478 = /^[^\\]]/,\n      peg$c479 = peg$classExpectation([\"]\"], true, false),\n      peg$c480 = \"]\",\n      peg$c481 = peg$literalExpectation(\"]\", false),\n      peg$c482 = function(name) { return name; },\n      peg$c483 = function(start, parts) { return start + parts.join(''); },\n      peg$c484 = /^[A-Za-z_@#]/,\n      peg$c485 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\", \"@\", \"#\"], false, false),\n      peg$c486 = /^[A-Za-z0-9_\\-@$]/,\n      peg$c487 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\", \"@\", \"$\"], false, false),\n      peg$c488 = /^[A-Za-z0-9_:]/,\n      peg$c489 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c490 = \":\",\n      peg$c491 = peg$literalExpectation(\":\", false),\n      peg$c492 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c493 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc\n            };\n          },\n      peg$c494 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c495 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c496 = \"over\",\n      peg$c497 = peg$literalExpectation(\"OVER\", true),\n      peg$c498 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c499 = \"window\",\n      peg$c500 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c501 = function(l) {\n          // => { keyword: 'window'; type: 'window', expr: named_window_expr_list; }\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c502 = function(head, tail) {\n          // => named_window_expr[]\n            return createList(head, tail);\n          },\n      peg$c503 = function(nw, anw) {\n          // => { name: ident_name;  as_window_specification: as_window_specification; }\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c504 = function(ws) {\n          return {\n            window_specification: ws || {},\n            parentheses: true\n          }\n        },\n      peg$c505 = function(bc, l, w) {\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w,\n          }\n        },\n      peg$c506 = function(bc, l) {\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: null\n          }\n        },\n      peg$c507 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c508 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c509 = \"following\",\n      peg$c510 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c511 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c512 = \"preceding\",\n      peg$c513 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c514 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c515 = \"current\",\n      peg$c516 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c517 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c518 = \"unbounded\",\n      peg$c519 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c520 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c521 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c522 = function(e) { return { expr: e }; },\n      peg$c523 = function(d, c, or) { return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c524 = function(d, c, or) { return { distinct: d, expr: c, orderby: or }; },\n      peg$c525 = function() { return { type: 'star', value: '*' }; },\n      peg$c526 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c527 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c528 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c529 = function(c, e, t) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c530 = function(c, e, precision) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c531 = function(c, e, precision, scale) {\n            return {\n              type: 'cast',\n              keyword: c.toLowerCase(),\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c532 = function(c, e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c533 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c534 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c535 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c536 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c537 = \"n\",\n      peg$c538 = peg$literalExpectation(\"N\", true),\n      peg$c539 = function(r, ca) {\n            return {\n              type: r ? 'var_string' : 'string',\n              value: ca[1].join(''),\n            };\n          },\n      peg$c540 = function(ca) {\n            return {\n              type: 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c541 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c542 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c543 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c544 = /^[^'\\\\]/,\n      peg$c545 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c546 = \"\\\\'\",\n      peg$c547 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c548 = function() { return \"\\\\'\";  },\n      peg$c549 = \"\\\\\\\"\",\n      peg$c550 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c551 = function() { return '\\\\\"';  },\n      peg$c552 = \"\\\\\\\\\",\n      peg$c553 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c554 = function() { return \"\\\\\\\\\"; },\n      peg$c555 = \"\\\\/\",\n      peg$c556 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c557 = function() { return \"\\\\/\";  },\n      peg$c558 = \"\\\\b\",\n      peg$c559 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c560 = function() { return \"\\b\"; },\n      peg$c561 = \"\\\\f\",\n      peg$c562 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c563 = function() { return \"\\f\"; },\n      peg$c564 = \"\\\\n\",\n      peg$c565 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c566 = function() { return \"\\n\"; },\n      peg$c567 = \"\\\\r\",\n      peg$c568 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c569 = function() { return \"\\r\"; },\n      peg$c570 = \"\\\\t\",\n      peg$c571 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c572 = function() { return \"\\t\"; },\n      peg$c573 = \"\\\\u\",\n      peg$c574 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c575 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c576 = \"\\\\\",\n      peg$c577 = peg$literalExpectation(\"\\\\\", false),\n      peg$c578 = function() { return \"\\\\\"; },\n      peg$c579 = \"''\",\n      peg$c580 = peg$literalExpectation(\"''\", false),\n      peg$c581 = function() { return \"''\" },\n      peg$c582 = \"\\\"\\\"\",\n      peg$c583 = peg$literalExpectation(\"\\\"\\\"\", false),\n      peg$c584 = function() { return '\"\"' },\n      peg$c585 = \"``\",\n      peg$c586 = peg$literalExpectation(\"``\", false),\n      peg$c587 = function() { return '``' },\n      peg$c588 = /^[\\n\\r]/,\n      peg$c589 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c590 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c591 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c592 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c593 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c594 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c595 = function(op, digits) { return op + digits; },\n      peg$c596 = function(op, digit) { return op + digit; },\n      peg$c597 = \".\",\n      peg$c598 = peg$literalExpectation(\".\", false),\n      peg$c599 = function(digits) { return \".\" + digits; },\n      peg$c600 = function(e, digits) { return e + digits; },\n      peg$c601 = function(digits) { return digits.join(\"\"); },\n      peg$c602 = /^[0-9]/,\n      peg$c603 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c604 = /^[0-9a-fA-F]/,\n      peg$c605 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c606 = /^[eE]/,\n      peg$c607 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c608 = /^[+\\-]/,\n      peg$c609 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c610 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c611 = \"null\",\n      peg$c612 = peg$literalExpectation(\"NULL\", true),\n      peg$c613 = \"not null\",\n      peg$c614 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c615 = \"true\",\n      peg$c616 = peg$literalExpectation(\"TRUE\", true),\n      peg$c617 = \"to\",\n      peg$c618 = peg$literalExpectation(\"TO\", true),\n      peg$c619 = \"top\",\n      peg$c620 = peg$literalExpectation(\"TOP\", true),\n      peg$c621 = \"false\",\n      peg$c622 = peg$literalExpectation(\"FALSE\", true),\n      peg$c623 = \"show\",\n      peg$c624 = peg$literalExpectation(\"SHOW\", true),\n      peg$c625 = \"drop\",\n      peg$c626 = peg$literalExpectation(\"DROP\", true),\n      peg$c627 = function() { return 'DROP'; },\n      peg$c628 = \"declare\",\n      peg$c629 = peg$literalExpectation(\"DECLARE\", true),\n      peg$c630 = function() { return 'DECLARE'; },\n      peg$c631 = \"use\",\n      peg$c632 = peg$literalExpectation(\"USE\", true),\n      peg$c633 = \"alter\",\n      peg$c634 = peg$literalExpectation(\"ALTER\", true),\n      peg$c635 = function() { return 'ALTER' },\n      peg$c636 = \"select\",\n      peg$c637 = peg$literalExpectation(\"SELECT\", true),\n      peg$c638 = \"update\",\n      peg$c639 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c640 = \"create\",\n      peg$c641 = peg$literalExpectation(\"CREATE\", true),\n      peg$c642 = \"temporary\",\n      peg$c643 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c644 = \"delete\",\n      peg$c645 = peg$literalExpectation(\"DELETE\", true),\n      peg$c646 = \"insert\",\n      peg$c647 = peg$literalExpectation(\"INSERT\", true),\n      peg$c648 = \"RECURSIVE\",\n      peg$c649 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c650 = \"replace\",\n      peg$c651 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c652 = \"rename\",\n      peg$c653 = peg$literalExpectation(\"RENAME\", true),\n      peg$c654 = \"ignore\",\n      peg$c655 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c656 = \"explain\",\n      peg$c657 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c658 = \"partition\",\n      peg$c659 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c660 = function() { return 'PARTITION' },\n      peg$c661 = \"into\",\n      peg$c662 = peg$literalExpectation(\"INTO\", true),\n      peg$c663 = \"from\",\n      peg$c664 = peg$literalExpectation(\"FROM\", true),\n      peg$c665 = function() { return 'SET' },\n      peg$c666 = \"unlock\",\n      peg$c667 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c668 = \"as\",\n      peg$c669 = peg$literalExpectation(\"AS\", true),\n      peg$c670 = \"table\",\n      peg$c671 = peg$literalExpectation(\"TABLE\", true),\n      peg$c672 = function() { return 'TABLE'; },\n      peg$c673 = \"view\",\n      peg$c674 = peg$literalExpectation(\"VIEW\", true),\n      peg$c675 = function() { return 'VIEW'; },\n      peg$c676 = \"database\",\n      peg$c677 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c678 = function() { return 'DATABASE'; },\n      peg$c679 = \"scheme\",\n      peg$c680 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c681 = function() { return 'SCHEME'; },\n      peg$c682 = \"tables\",\n      peg$c683 = peg$literalExpectation(\"TABLES\", true),\n      peg$c684 = function() { return 'TABLES'; },\n      peg$c685 = function() { return 'COLLATE'; },\n      peg$c686 = \"on\",\n      peg$c687 = peg$literalExpectation(\"ON\", true),\n      peg$c688 = \"off\",\n      peg$c689 = peg$literalExpectation(\"OFF\", true),\n      peg$c690 = \"left\",\n      peg$c691 = peg$literalExpectation(\"LEFT\", true),\n      peg$c692 = \"right\",\n      peg$c693 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c694 = \"full\",\n      peg$c695 = peg$literalExpectation(\"FULL\", true),\n      peg$c696 = \"inner\",\n      peg$c697 = peg$literalExpectation(\"INNER\", true),\n      peg$c698 = \"cross\",\n      peg$c699 = peg$literalExpectation(\"CROSS\", true),\n      peg$c700 = \"join\",\n      peg$c701 = peg$literalExpectation(\"JOIN\", true),\n      peg$c702 = \"outer\",\n      peg$c703 = peg$literalExpectation(\"OUTER\", true),\n      peg$c704 = \"union\",\n      peg$c705 = peg$literalExpectation(\"UNION\", true),\n      peg$c706 = \"values\",\n      peg$c707 = peg$literalExpectation(\"VALUES\", true),\n      peg$c708 = \"using\",\n      peg$c709 = peg$literalExpectation(\"USING\", true),\n      peg$c710 = \"where\",\n      peg$c711 = peg$literalExpectation(\"WHERE\", true),\n      peg$c712 = \"go\",\n      peg$c713 = peg$literalExpectation(\"GO\", true),\n      peg$c714 = function() { return 'GO'; },\n      peg$c715 = \"group\",\n      peg$c716 = peg$literalExpectation(\"GROUP\", true),\n      peg$c717 = \"by\",\n      peg$c718 = peg$literalExpectation(\"BY\", true),\n      peg$c719 = \"order\",\n      peg$c720 = peg$literalExpectation(\"ORDER\", true),\n      peg$c721 = \"having\",\n      peg$c722 = peg$literalExpectation(\"HAVING\", true),\n      peg$c723 = \"limit\",\n      peg$c724 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c725 = \"offset\",\n      peg$c726 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c727 = function() { return 'OFFSET'; },\n      peg$c728 = \"asc\",\n      peg$c729 = peg$literalExpectation(\"ASC\", true),\n      peg$c730 = function() { return 'ASC'; },\n      peg$c731 = \"desc\",\n      peg$c732 = peg$literalExpectation(\"DESC\", true),\n      peg$c733 = function() { return 'DESC'; },\n      peg$c734 = \"all\",\n      peg$c735 = peg$literalExpectation(\"ALL\", true),\n      peg$c736 = function() { return 'ALL'; },\n      peg$c737 = \"distinct\",\n      peg$c738 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c739 = function() { return 'DISTINCT';},\n      peg$c740 = \"between\",\n      peg$c741 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c742 = function() { return 'BETWEEN'; },\n      peg$c743 = \"in\",\n      peg$c744 = peg$literalExpectation(\"IN\", true),\n      peg$c745 = function() { return 'IN'; },\n      peg$c746 = \"is\",\n      peg$c747 = peg$literalExpectation(\"IS\", true),\n      peg$c748 = function() { return 'IS'; },\n      peg$c749 = \"like\",\n      peg$c750 = peg$literalExpectation(\"LIKE\", true),\n      peg$c751 = function() { return 'LIKE'; },\n      peg$c752 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c753 = function() { return 'EXISTS'; },\n      peg$c754 = function() { return 'NOT'; },\n      peg$c755 = \"and\",\n      peg$c756 = peg$literalExpectation(\"AND\", true),\n      peg$c757 = function() { return 'AND'; },\n      peg$c758 = \"or\",\n      peg$c759 = peg$literalExpectation(\"OR\", true),\n      peg$c760 = function() { return 'OR'; },\n      peg$c761 = \"count\",\n      peg$c762 = peg$literalExpectation(\"COUNT\", true),\n      peg$c763 = function() { return 'COUNT'; },\n      peg$c764 = \"max\",\n      peg$c765 = peg$literalExpectation(\"MAX\", true),\n      peg$c766 = function() { return 'MAX'; },\n      peg$c767 = \"min\",\n      peg$c768 = peg$literalExpectation(\"MIN\", true),\n      peg$c769 = function() { return 'MIN'; },\n      peg$c770 = \"sum\",\n      peg$c771 = peg$literalExpectation(\"SUM\", true),\n      peg$c772 = function() { return 'SUM'; },\n      peg$c773 = \"avg\",\n      peg$c774 = peg$literalExpectation(\"AVG\", true),\n      peg$c775 = function() { return 'AVG'; },\n      peg$c776 = \"call\",\n      peg$c777 = peg$literalExpectation(\"CALL\", true),\n      peg$c778 = function() { return 'CALL'; },\n      peg$c779 = \"case\",\n      peg$c780 = peg$literalExpectation(\"CASE\", true),\n      peg$c781 = \"when\",\n      peg$c782 = peg$literalExpectation(\"WHEN\", true),\n      peg$c783 = \"then\",\n      peg$c784 = peg$literalExpectation(\"THEN\", true),\n      peg$c785 = \"else\",\n      peg$c786 = peg$literalExpectation(\"ELSE\", true),\n      peg$c787 = \"end\",\n      peg$c788 = peg$literalExpectation(\"END\", true),\n      peg$c789 = \"cast\",\n      peg$c790 = peg$literalExpectation(\"CAST\", true),\n      peg$c791 = function() { return 'CAST' },\n      peg$c792 = \"bit\",\n      peg$c793 = peg$literalExpectation(\"BIT\", true),\n      peg$c794 = function() { return 'BIT'; },\n      peg$c795 = \"money\",\n      peg$c796 = peg$literalExpectation(\"MONEY\", true),\n      peg$c797 = function() { return 'MONEY'; },\n      peg$c798 = \"smallmoney\",\n      peg$c799 = peg$literalExpectation(\"SMALLMONEY\", true),\n      peg$c800 = function() { return 'SMALLMONEY'; },\n      peg$c801 = \"char\",\n      peg$c802 = peg$literalExpectation(\"CHAR\", true),\n      peg$c803 = function() { return 'CHAR'; },\n      peg$c804 = \"varchar\",\n      peg$c805 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c806 = function() { return 'VARCHAR';},\n      peg$c807 = \"nchar\",\n      peg$c808 = peg$literalExpectation(\"NCHAR\", true),\n      peg$c809 = function() { return 'NCHAR';},\n      peg$c810 = \"nvarchar\",\n      peg$c811 = peg$literalExpectation(\"NVARCHAR\", true),\n      peg$c812 = function() { return 'NVARCHAR';},\n      peg$c813 = \"numeric\",\n      peg$c814 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c815 = function() { return 'NUMERIC'; },\n      peg$c816 = \"decimal\",\n      peg$c817 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c818 = function() { return 'DECIMAL'; },\n      peg$c819 = \"signed\",\n      peg$c820 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c821 = function() { return 'SIGNED'; },\n      peg$c822 = \"unsigned\",\n      peg$c823 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c824 = function() { return 'UNSIGNED'; },\n      peg$c825 = \"int\",\n      peg$c826 = peg$literalExpectation(\"INT\", true),\n      peg$c827 = function() { return 'INT'; },\n      peg$c828 = \"zerofill\",\n      peg$c829 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c830 = function() { return 'ZEROFILL'; },\n      peg$c831 = \"integer\",\n      peg$c832 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c833 = function() { return 'INTEGER'; },\n      peg$c834 = \"json\",\n      peg$c835 = peg$literalExpectation(\"JSON\", true),\n      peg$c836 = function() { return 'JSON'; },\n      peg$c837 = \"smallint\",\n      peg$c838 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c839 = function() { return 'SMALLINT'; },\n      peg$c840 = \"tinyint\",\n      peg$c841 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c842 = function() { return 'TINYINT'; },\n      peg$c843 = \"tinytext\",\n      peg$c844 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c845 = function() { return 'TINYTEXT'; },\n      peg$c846 = \"text\",\n      peg$c847 = peg$literalExpectation(\"TEXT\", true),\n      peg$c848 = function() { return 'TEXT'; },\n      peg$c849 = \"mediumtext\",\n      peg$c850 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c851 = function() { return 'MEDIUMTEXT'; },\n      peg$c852 = \"longtext\",\n      peg$c853 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c854 = function() { return 'LONGTEXT'; },\n      peg$c855 = \"bigint\",\n      peg$c856 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c857 = function() { return 'BIGINT'; },\n      peg$c858 = \"float\",\n      peg$c859 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c860 = function() { return 'FLOAT'; },\n      peg$c861 = \"real\",\n      peg$c862 = peg$literalExpectation(\"REAL\", true),\n      peg$c863 = function() { return 'REAL'; },\n      peg$c864 = \"double\",\n      peg$c865 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c866 = function() { return 'DOUBLE'; },\n      peg$c867 = \"date\",\n      peg$c868 = peg$literalExpectation(\"DATE\", true),\n      peg$c869 = function() { return 'DATE'; },\n      peg$c870 = \"smalldatetime\",\n      peg$c871 = peg$literalExpectation(\"SMALLDATETIME\", true),\n      peg$c872 = function() { return 'SMALLDATETIME'; },\n      peg$c873 = \"datetime\",\n      peg$c874 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c875 = function() { return 'DATETIME'; },\n      peg$c876 = \"datetime2\",\n      peg$c877 = peg$literalExpectation(\"DATETIME2\", true),\n      peg$c878 = function() { return 'DATETIME2'; },\n      peg$c879 = \"datetimeoffset\",\n      peg$c880 = peg$literalExpectation(\"DATETIMEOFFSET\", true),\n      peg$c881 = function() { return 'DATETIMEOFFSET'; },\n      peg$c882 = \"rows\",\n      peg$c883 = peg$literalExpectation(\"ROWS\", true),\n      peg$c884 = function() { return 'ROWS'; },\n      peg$c885 = \"time\",\n      peg$c886 = peg$literalExpectation(\"TIME\", true),\n      peg$c887 = function() { return 'TIME'; },\n      peg$c888 = \"timestamp\",\n      peg$c889 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c890 = function() { return 'TIMESTAMP'; },\n      peg$c891 = \"truncate\",\n      peg$c892 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c893 = function() { return 'TRUNCATE'; },\n      peg$c894 = \"uniqueidentifier\",\n      peg$c895 = peg$literalExpectation(\"UNIQUEIDENTIFIER\", true),\n      peg$c896 = function() { return 'UNIQUEIDENTIFIER'; },\n      peg$c897 = \"user\",\n      peg$c898 = peg$literalExpectation(\"USER\", true),\n      peg$c899 = function() { return 'USER'; },\n      peg$c900 = \"current_date\",\n      peg$c901 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c902 = function() { return 'CURRENT_DATE'; },\n      peg$c903 = \"adddate\",\n      peg$c904 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c905 = function() { return 'ADDDATE'; },\n      peg$c906 = \"interval\",\n      peg$c907 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c908 = function() { return 'INTERVAL'; },\n      peg$c909 = \"year\",\n      peg$c910 = peg$literalExpectation(\"YEAR\", true),\n      peg$c911 = function() { return 'YEAR'; },\n      peg$c912 = \"month\",\n      peg$c913 = peg$literalExpectation(\"MONTH\", true),\n      peg$c914 = function() { return 'MONTH'; },\n      peg$c915 = \"day\",\n      peg$c916 = peg$literalExpectation(\"DAY\", true),\n      peg$c917 = function() { return 'DAY'; },\n      peg$c918 = \"hour\",\n      peg$c919 = peg$literalExpectation(\"HOUR\", true),\n      peg$c920 = function() { return 'HOUR'; },\n      peg$c921 = \"minute\",\n      peg$c922 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c923 = function() { return 'MINUTE'; },\n      peg$c924 = \"second\",\n      peg$c925 = peg$literalExpectation(\"SECOND\", true),\n      peg$c926 = function() { return 'SECOND'; },\n      peg$c927 = \"current_time\",\n      peg$c928 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c929 = function() { return 'CURRENT_TIME'; },\n      peg$c930 = \"current_timestamp\",\n      peg$c931 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c932 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c933 = \"current_user\",\n      peg$c934 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c935 = function() { return 'CURRENT_USER'; },\n      peg$c936 = \"session_user\",\n      peg$c937 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c938 = function() { return 'SESSION_USER'; },\n      peg$c939 = \"system_user\",\n      peg$c940 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c941 = function() { return 'SYSTEM_USER'; },\n      peg$c942 = \"global\",\n      peg$c943 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c944 = function() { return 'GLOBAL'; },\n      peg$c945 = \"session\",\n      peg$c946 = peg$literalExpectation(\"SESSION\", true),\n      peg$c947 = function() { return 'SESSION'; },\n      peg$c948 = function() { return 'LOCAL'; },\n      peg$c949 = \"pivot\",\n      peg$c950 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c951 = function() { return 'PIVOT'; },\n      peg$c952 = \"unpivot\",\n      peg$c953 = peg$literalExpectation(\"UNPIVOT\", true),\n      peg$c954 = function() { return 'UNPIVOT'; },\n      peg$c955 = \"persist\",\n      peg$c956 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c957 = function() { return 'PERSIST'; },\n      peg$c958 = \"persist_only\",\n      peg$c959 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c960 = function() { return 'PERSIST_ONLY'; },\n      peg$c961 = \"@@\",\n      peg$c962 = peg$literalExpectation(\"@@\", false),\n      peg$c963 = \"$\",\n      peg$c964 = peg$literalExpectation(\"$\", false),\n      peg$c965 = \"return\",\n      peg$c966 = peg$literalExpectation(\"return\", true),\n      peg$c967 = \":=\",\n      peg$c968 = peg$literalExpectation(\":=\", false),\n      peg$c969 = \"dual\",\n      peg$c970 = peg$literalExpectation(\"DUAL\", true),\n      peg$c971 = \"add\",\n      peg$c972 = peg$literalExpectation(\"ADD\", true),\n      peg$c973 = function() { return 'ADD'; },\n      peg$c974 = \"column\",\n      peg$c975 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c976 = function() { return 'COLUMN'; },\n      peg$c977 = \"index\",\n      peg$c978 = peg$literalExpectation(\"INDEX\", true),\n      peg$c979 = function() { return 'INDEX'; },\n      peg$c980 = function() { return 'KEY'; },\n      peg$c981 = \"fulltext\",\n      peg$c982 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c983 = function() { return 'FULLTEXT'; },\n      peg$c984 = \"spatial\",\n      peg$c985 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c986 = function() { return 'SPATIAL'; },\n      peg$c987 = function() { return 'UNIQUE'; },\n      peg$c988 = \"clustered\",\n      peg$c989 = peg$literalExpectation(\"CLUSTERED\", true),\n      peg$c990 = function() { return 'CLUSTERED'; },\n      peg$c991 = \"nonclustered\",\n      peg$c992 = peg$literalExpectation(\"NONCLUSTERED\", true),\n      peg$c993 = function() { return 'NONCLUSTERED'; },\n      peg$c994 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c995 = \"comment\",\n      peg$c996 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c997 = function() { return 'COMMENT'; },\n      peg$c998 = \"constraint\",\n      peg$c999 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c1000 = function() { return 'CONSTRAINT'; },\n      peg$c1001 = \"references\",\n      peg$c1002 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c1003 = function() { return 'REFERENCES'; },\n      peg$c1004 = \"sql_calc_found_rows\",\n      peg$c1005 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c1006 = \"sql_cache\",\n      peg$c1007 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c1008 = \"sql_no_cache\",\n      peg$c1009 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c1010 = \"sql_small_result\",\n      peg$c1011 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c1012 = \"sql_big_result\",\n      peg$c1013 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c1014 = \"sql_buffer_result\",\n      peg$c1015 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c1016 = \",\",\n      peg$c1017 = peg$literalExpectation(\",\", false),\n      peg$c1018 = \";\",\n      peg$c1019 = peg$literalExpectation(\";\", false),\n      peg$c1020 = \"||\",\n      peg$c1021 = peg$literalExpectation(\"||\", false),\n      peg$c1022 = \"&&\",\n      peg$c1023 = peg$literalExpectation(\"&&\", false),\n      peg$c1024 = \"/*\",\n      peg$c1025 = peg$literalExpectation(\"/*\", false),\n      peg$c1026 = \"*/\",\n      peg$c1027 = peg$literalExpectation(\"*/\", false),\n      peg$c1028 = \"--\",\n      peg$c1029 = peg$literalExpectation(\"--\", false),\n      peg$c1030 = \"#\",\n      peg$c1031 = peg$literalExpectation(\"#\", false),\n      peg$c1032 = function(k, s, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1033 = peg$anyExpectation(),\n      peg$c1034 = /^[ \\t\\n\\r]/,\n      peg$c1035 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1036 = function() { varList = []; return true; },\n      peg$c1037 = function(s) {\n            return { stmt: s, vars: varList };\n          },\n      peg$c1038 = function(va, s, e) {\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1039 = function(e) {\n            return { type: 'return', expr: e };\n          },\n      peg$c1040 = function(lt, op, rt, expr) {\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1041 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1042 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1043 = function(name, l) {\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1044 = function(name) {\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1045 = function(l) {\n          return { type: 'array', value: l };\n        },\n      peg$c1046 = function(p, d) {\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1047 = function(name, m) {\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1048 = function(n) {\n          return {\n            type: 'var',\n            name: n.value,\n            members: [],\n            quoted: null,\n            prefix: null,\n          }\n        },\n      peg$c1049 = function(l) {\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1050 = function(lb, t, rb) { return (lb && !rb) || (!lb && rb) },\n      peg$c1051 = function(lb, t, rb, l) {\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1052 = function(lb, t, rb) {\n          return { dataType: t };\n        },\n      peg$c1053 = function(lb, t, rb, m) {\n          return {\n            dataType: t,\n            length: 'max'\n          }\n        },\n      peg$c1054 = function(un, ze) {\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1055 = function(lb, t, rb, l, r, s) {\n          return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s };\n        },\n      peg$c1056 = function(lb, t, rb, l, s) {\n          return { dataType: t, length: parseInt(l.join(''), 10), suffix: s };\n        },\n      peg$c1057 = function(lb, t, rb, s) {\n          return { dataType: t, suffix: s };\n        },\n      peg$c1058 = function(lb, t, rb, l, r) {\n          return  {dataType: t, length: parseInt(l.join(''), 10), parentheses: true }\n        },\n      peg$c1059 = function(lb, t, rb) {\n          return { dataType: t }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestart_item();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseKW_GO();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parse__();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsestart_item();\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s5 = [s5, s6, s7, s8];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseKW_GO();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsestart_item();\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  s5 = [s5, s6, s7, s8];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestart_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseSEMICOLON();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseunlock_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsedeclare_stmt();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseexec_stmt();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseif_else_stmt();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_db_stmt();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_stmt() {\n    var s0;\n\n    s0 = peg$parsealter_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsealter_view_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UNION();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c4();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c5(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c7(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c8(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_order();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DESC();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c9(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecolumn_ref();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinclude_column() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c11); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_CLUSTERED();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_NONCLUSTERED();\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_ON();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetable_name();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseLPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecolumn_order_list();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseRPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseinclude_column();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsewhere_clause();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parseon_clause();\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$currPos;\n                                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c13) {\n                                                          s28 = input.substr(peg$currPos, 13);\n                                                          peg$currPos += 13;\n                                                        } else {\n                                                          s28 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                                                        }\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseident();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s28 = [s28, s29, s30];\n                                                              s27 = s28;\n                                                            } else {\n                                                              peg$currPos = s27;\n                                                              s27 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s27;\n                                                            s27 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s27;\n                                                          s27 = peg$FAILED;\n                                                        }\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          peg$savedPos = s0;\n                                                          s1 = peg$c15(s1, s3, s5, s7, s9, s11, s15, s19, s21, s23, s25, s27);\n                                                          s0 = s1;\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c19();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c20(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c21(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c22(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseCOMMA();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c25(s3, s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_column_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c26(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c27(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecreate_constraint_check();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c28(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c29) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n              s2 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parse__();\n              if (s3 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c33) {\n                  s4 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                }\n                if (s4 !== peg$FAILED) {\n                  s2 = [s2, s3, s4];\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c35(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseidentity_stmt();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c36(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsekeyword_comment();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1);\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsecollate_expr();\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c38(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsecolumn_format();\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c39(s1);\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsestorage();\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c40(s1);\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parsereference_definition();\n                      if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c41(s1);\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parsecreate_option_character_set_kw();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseKW_ASSIGIN_EQUAL();\n                            if (s3 === peg$FAILED) {\n                              s3 = null;\n                            }\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseident_name();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c42(s1, s3, s5);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_definition_opt();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecolumn_definition_opt();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecolumn_definition_opt();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c43(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_definition_opt_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_ref();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_AS();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseexpr();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c45(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentity_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c46) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parseLPAREN();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseliteral_numeric();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseliteral_numeric();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseRPAREN();\n                        if (s12 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7, s8, s9, s10, s11, s12];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c48(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c49(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c50) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c52) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c54) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c55); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c59) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c60); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c61) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c62); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c63) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c64); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c65(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c66(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_var() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR__PRE_AT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedata_type();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parseKW_ASSIGIN_EQUAL();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseexpr();\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c67(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_VAR__PRE_AT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident_name();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c68) {\n                s5 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c69); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c70(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_var_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclare_var();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedeclare_var();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedeclare_var();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DECLARE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedeclare_var_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c71(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DECLARE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_VAR__PRE_AT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident_name();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_TABLE();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_table_definition();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c72(s1, s3, s5, s7, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c73) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c76); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexec_varibale_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c77(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_varibale_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexec_variable();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexec_variable();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexec_variable();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c78(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_variable() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s1 = peg$c79;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c80); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseexpr();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c81(s2, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_else_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c82); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecrud_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseSEMICOLON();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_GO();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseKW_ELSE();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsecrud_stmt();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseSEMICOLON();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c83(s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_exists() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c82); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c84) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c86();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_exists();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_ref_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c87(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c88) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c89); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c90(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DROP();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_INDEX();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsecolumn_ref();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_ON();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsetable_name();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parsedrop_index_opt();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c91(s1, s3, s5, s9, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_DROP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_VIEW();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseif_exists();\n                  if (s5 === peg$FAILED) {\n                    s5 = null;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parsetable_ref_list();\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c92(s1, s3, s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c93(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c94(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_attribute() {\n    var s0;\n\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c95) {\n      s0 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c96); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c97) {\n        s0 = input.substr(peg$currPos, 13);\n        peg$currPos += 13;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c98); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c99) {\n          s0 = input.substr(peg$currPos, 13);\n          peg$currPos += 13;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c100); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_attribute_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseview_attribute();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseview_attribute();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseview_attribute();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_with() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c102); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {\n              s5 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c104); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c105();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_view_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_VIEW();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseLPAREN();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parsecolumn_ref_list();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseRPAREN();\n                        if (s12 !== peg$FAILED) {\n                          s8 = [s8, s9, s10, s11, s12];\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parseKW_WITH();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseview_attribute_list();\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_AS();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseselect_stmt_nake();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseview_with();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c106(s5, s7, s9, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c107(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_CONSTRAINT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_CONSTRAINT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ENABLE_CONSTRAINT();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_DISABLE_CONSTRAINT();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_ADD_COLUMN();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_DROP_COLUMN();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseALTER_RENAME_TABLE();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseALTER_ALGORITHM();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseALTER_LOCK();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_ALTER();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c108(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c109(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c110(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c111(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c112) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c114) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c115); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c116) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c117); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c118) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c119); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c120(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c122); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c124); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c125) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c127) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c128); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c129(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_constraint_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c130(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c131(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ENABLE_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c102); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {\n              s5 = input.substr(peg$currPos, 5);\n              peg$currPos += 5;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c102); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONSTRAINT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c132(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DISABLE_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c133) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c134); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c136(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c137(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_check();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c138(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_with_index_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_options_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_ON();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseLBRAKE();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseident_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseRBRAKE();\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c139(s5, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseindex_options();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseindex_options_list();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c140(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c141) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c142); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_with_index_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c143(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c144(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_check() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c102); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c146); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {\n                  s8 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c148); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c149) {\n                      s10 = input.substr(peg$currPos, 11);\n                      peg$currPos += 11;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c150); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLPAREN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseor_and_where_expr();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseRPAREN();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c151(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c152) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c153); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c154(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c155) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c156); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c157) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c158); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c159) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c161(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseon_reference();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c162(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DELETE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c163(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CURRENT_TIMESTAMP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c164(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c165) {\n        s1 = input.substr(peg$currPos, 8);\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c166); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c167) {\n          s1 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c168); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c169) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c170); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c171) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c172); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c173) {\n                s1 = input.substr(peg$currPos, 11);\n                peg$currPos += 11;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c174); }\n              }\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_CURRENT_TIMESTAMP();\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c175(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c176) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c177); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c178) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c179); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c180();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c181) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c182); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c183) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c184); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c185(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c186) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c187); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c188) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c189); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c190) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c191); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c192) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c193); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c194) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c195); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c196) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c197); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c198(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c199) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c200); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c201(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c202) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c203); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c204;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c205); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c206) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c207); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c208) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c124); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c204;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c205); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c210(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c212); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c213(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseKW_ON();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseLBRAKE();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseident_name();\n                      if (s5 !== peg$FAILED) {\n                        s6 = peg$parse__();\n                        if (s6 !== peg$FAILED) {\n                          s7 = peg$parseRBRAKE();\n                          if (s7 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c214(s5);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 12).toLowerCase() === peg$c215) {\n                  s1 = input.substr(peg$currPos, 12);\n                  peg$currPos += 12;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseLBRAKE();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parseident_name();\n                        if (s5 !== peg$FAILED) {\n                          s6 = peg$parse__();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseRBRAKE();\n                            if (s7 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c217(s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c218(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c219(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c220(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunlock_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNLOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c221();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c222) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c223); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c224) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c225); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c226(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c227) {\n        s1 = input.substr(peg$currPos, 12);\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c228); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c229) {\n            s3 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c230); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c231(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parselock_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c232(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parselock_table();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parselock_table();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parselock_table();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c233(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselock_table_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c234(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c235(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c236;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c237); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c238;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c239); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c240(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c25(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c241(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c242(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref_index();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c243(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetop_clause();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseKW_DISTINCT();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecolumn_clause();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefrom_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsefor_xml();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c244(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetop_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TOP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c245) {\n                      s9 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c246); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c247(s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TOP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c245) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c246); }\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c248(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c249(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c250(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c251(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c25(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c252(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsebinary_column_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c253(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_alias_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseLPAREN();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsecolumn_list();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseRPAREN();\n                    if (s10 !== peg$FAILED) {\n                      s5 = [s5, s6, s7, s8, s9, s10];\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c254(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c255(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c255(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c256(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_unpivot_common_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c148); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsein_op_right();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c257(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepivot_unpivot_common_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c258(s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UNPIVOT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsepivot_unpivot_common_clause();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsealias_clause();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c259(s5, s7, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c260(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c261) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c262); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c263) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c264); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c265(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CLUSTERED();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_NONCLUSTERED();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c266(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c267(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_number_expression_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_number_expression();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsepartition_number_expression();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsepartition_number_expression();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_number_expression() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_numeric();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c268(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c269) {\n          s3 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c270); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepartition_number_expression_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c271(s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c272(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c273) {\n        s1 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c274); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c275) {\n          s1 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c276); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c278); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c272(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c279) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c280); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c281) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c282); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c283(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c284) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c285); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c286) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c287); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c288(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c289) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c290); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c291) {\n                  s1 = input.substr(peg$currPos, 14);\n                  peg$currPos += 14;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c292); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 14).toLowerCase() === peg$c293) {\n                    s1 = input.substr(peg$currPos, 14);\n                    peg$currPos += 14;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c294); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 22).toLowerCase() === peg$c295) {\n                      s1 = input.substr(peg$currPos, 22);\n                      peg$currPos += 22;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c296); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 22).toLowerCase() === peg$c297) {\n                        s1 = input.substr(peg$currPos, 22);\n                        peg$currPos += 22;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c298); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c299) {\n                          s1 = input.substr(peg$currPos, 13);\n                          peg$currPos += 13;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c300); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c301) {\n                            s1 = input.substr(peg$currPos, 6);\n                            peg$currPos += 6;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c302); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c303) {\n                              s1 = input.substr(peg$currPos, 9);\n                              peg$currPos += 9;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c304); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 15).toLowerCase() === peg$c305) {\n                                s1 = input.substr(peg$currPos, 15);\n                                peg$currPos += 15;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c306); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 16).toLowerCase() === peg$c307) {\n                                  s1 = input.substr(peg$currPos, 16);\n                                  peg$currPos += 16;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c308); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 27).toLowerCase() === peg$c309) {\n                                    s1 = input.substr(peg$currPos, 27);\n                                    peg$currPos += 27;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c310); }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseKW_ASSIGIN_EQUAL();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseKW_ON();\n                      if (s5 === peg$FAILED) {\n                        s5 = peg$parseKW_OFF();\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c311(s1, s3, s5);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 16).toLowerCase() === peg$c312) {\n                  s1 = input.substr(peg$currPos, 16);\n                  peg$currPos += 16;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c313); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseKW_ASSIGIN_EQUAL();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {\n                          s5 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s5 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c124); }\n                        }\n                        if (s5 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c314) {\n                            s5 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c315); }\n                          }\n                          if (s5 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 4) === peg$c316) {\n                              s5 = peg$c316;\n                              peg$currPos += 4;\n                            } else {\n                              s5 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c317); }\n                            }\n                          }\n                        }\n                        if (s5 !== peg$FAILED) {\n                          s6 = peg$parse__();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseon_partition();\n                            if (s7 === peg$FAILED) {\n                              s7 = null;\n                            }\n                            if (s7 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c318(s1, s3, s5, s7);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsekeyword_comment();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c319(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c320(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c320(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c321(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c322(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c323(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref_index();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c326(s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 24).toLowerCase() === peg$c327) {\n        s1 = input.substr(peg$currPos, 24);\n        peg$currPos += 24;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c328); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c329(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c330) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c331); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_INDEX();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseLPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseident_name_list();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseRPAREN();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c332(s1, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c330) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c331); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_INDEX();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseKW_ASSIGIN_EQUAL();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseident();\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c333(s1, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c330) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c331); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c334) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c335); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c324) {\n                  s1 = input.substr(peg$currPos, 9);\n                  peg$currPos += 9;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c325); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c336) {\n                    s1 = input.substr(peg$currPos, 8);\n                    peg$currPos += 8;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c337); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c338) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c339); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c340) {\n                        s1 = input.substr(peg$currPos, 6);\n                        peg$currPos += 6;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c341); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c342) {\n                          s1 = input.substr(peg$currPos, 7);\n                          peg$currPos += 7;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c343); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 13).toLowerCase() === peg$c344) {\n                            s1 = input.substr(peg$currPos, 13);\n                            peg$currPos += 13;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c345); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 17).toLowerCase() === peg$c346) {\n                              s1 = input.substr(peg$currPos, 17);\n                              peg$currPos += 17;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c347); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c348) {\n                                s1 = input.substr(peg$currPos, 8);\n                                peg$currPos += 8;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c349); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 15).toLowerCase() === peg$c350) {\n                                  s1 = input.substr(peg$currPos, 15);\n                                  peg$currPos += 15;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c351); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 15).toLowerCase() === peg$c352) {\n                                    s1 = input.substr(peg$currPos, 15);\n                                    peg$currPos += 15;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c353); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c354) {\n                                      s1 = input.substr(peg$currPos, 7);\n                                      peg$currPos += 7;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c355); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c356) {\n                                        s1 = input.substr(peg$currPos, 12);\n                                        peg$currPos += 12;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c357); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c358) {\n                                          s1 = input.substr(peg$currPos, 8);\n                                          peg$currPos += 8;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c359); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c360) {\n                                            s1 = input.substr(peg$currPos, 7);\n                                            peg$currPos += 7;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c361); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c362) {\n                                              s1 = input.substr(peg$currPos, 8);\n                                              peg$currPos += 8;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c363); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c364) {\n                                                s1 = input.substr(peg$currPos, 7);\n                                                peg$currPos += 7;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c365); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c366) {\n                                                  s1 = input.substr(peg$currPos, 5);\n                                                  peg$currPos += 5;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c367); }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c368(s1);\n            }\n            s0 = s1;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint_item_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_hint_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_hint_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_hint_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_hint_item_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c369(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c370();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsetable_hint();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c371(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsevalue_clause();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsevalue_alias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c372(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseLPAREN();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseunion_stmt();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsevalue_clause();\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseRPAREN();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parsevalue_alias_clause();\n                      if (s7 === peg$FAILED) {\n                        s7 = null;\n                      }\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c373(s3, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_RIGHT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FULL();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c374(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INNER();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_CROSS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_JOIN();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c375(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseDOT();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseident();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c376(s1, s5, s9, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseDOT();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseident();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c377(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c378(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c379(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c380(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c380(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c381(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_index() {\n    var s0;\n\n    s0 = peg$parsecolumn_order_list();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_list();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c380(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c382(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c383(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c384(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c385(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_xml_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c388) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c389); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c390) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c391); }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c392(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c393) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c394); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseLPAREN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref();\n              if (s6 === peg$FAILED) {\n                s6 = peg$parseliteral_string();\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c395(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_xml() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c148); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c396) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c397); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefor_xml_item();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c398(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_UPDATE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsetable_ref_list();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_SET();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseset_list();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsewhere_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c399(s2, s6, s10, s12);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c400(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c401;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c402); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c403(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c401;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c402); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c404(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c405(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c406(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c407(s1, s5, s7, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c408(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c409();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c411(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c412(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c413(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecase_when_then_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c414(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecase_when_then_list();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c415(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecase_when_then();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecase_when_then();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c416(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c417(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_expr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parse_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseunion_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecomparison_op_right();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c418(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseLOGIC_OPERATOR();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c420(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c421(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c423;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c424); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c401;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c402); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c425(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c426(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c427(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c428(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c429(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c430) {\n      s0 = peg$c430;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c431); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c432;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c433); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c434) {\n          s0 = peg$c434;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c435); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c436) {\n            s0 = peg$c436;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c437); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c438;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c439); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c401;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c402); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c440) {\n                  s0 = peg$c440;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c441); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c442(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c443(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c444(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c428(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c428(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c428(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c445(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c446(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c447(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c448;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c450;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c451); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c452(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c453;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c455;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c456); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c457;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c458); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c459(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsevar_decl();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c460(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c461(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c462(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c464(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsebrackets_quoted_ident();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c465;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c467.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c468); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c467.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c468); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c465;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c466); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c469(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c204;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c470.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c471); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c470.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c471); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c204;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c205); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c469(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c472;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c473); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c474.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c475); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c474.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c475); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c472;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c473); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c469(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebrackets_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c476;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c478.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c479); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c478.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c479); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s3 = peg$c480;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c481); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c469(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c462(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c483(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c483(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident_name();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_name();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c484.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c485); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c486.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c488.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c490;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c492(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c493(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c494(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c495(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c496) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c498(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseon_update_current_timestamp();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c499) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c500); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c501(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c503(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c504(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewindow_frame_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c505(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification_frameless() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c506(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_frame_following();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsewindow_frame_preceding();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c507(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewindow_frame_bound();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AND();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsewindow_frame_bound();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c508(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_bound() {\n    var s0;\n\n    s0 = peg$parsewindow_frame_preceding();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_following();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c509) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c510); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c511(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c512) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c513); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c514(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c515) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c314) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c315); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c517();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c520(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c521(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c522(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseorder_by_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c523(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexpr();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseorder_by_clause();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c524(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c453;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c525();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsescalar_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c526(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_time_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseon_update_current_timestamp();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c527(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseproc_func_name();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseor_and_where_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c528(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_USER();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_USER();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_SYSTEM_USER();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c529(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c530(s1, s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c531(s1, s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c532(s1, s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c533();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c534();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c535();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c537) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s3 = peg$c204;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c205); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsesingle_char();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsesingle_char();\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c204;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c205); }\n          }\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c465;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c466); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c465;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c466); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c540(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c204;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c205); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c204;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c205); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c541(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c465;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c466); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c465;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c466); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c541(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c542.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c544.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c545); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c546) {\n      s1 = peg$c546;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c548();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c549) {\n        s1 = peg$c549;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c550); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c552) {\n          s1 = peg$c552;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c553); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c554();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c555) {\n            s1 = peg$c555;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c556); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c557();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c558) {\n              s1 = peg$c558;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c559); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c560();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c561) {\n                s1 = peg$c561;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c562); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c563();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c564) {\n                  s1 = peg$c564;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c565); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c566();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c567) {\n                    s1 = peg$c567;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c568); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c569();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c570) {\n                      s1 = peg$c570;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c572();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c573) {\n                        s1 = peg$c573;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c574); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c575(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c576;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c577); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c578();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c579) {\n                            s1 = peg$c579;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c580); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c581();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c582) {\n                              s1 = peg$c582;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c583); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c584();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.substr(peg$currPos, 2) === peg$c585) {\n                                s1 = peg$c585;\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c586); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c587();\n                              }\n                              s0 = s1;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c588.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c590(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c591(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c592(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c593(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c594(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c450;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c451); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c448;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c449); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c595(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c450;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c451); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c448;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c449); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c596(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c597;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c600(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c601(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c602.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c604.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c605); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c606.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c608.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c609); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c57); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c613) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c614); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TOP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c619) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c620); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c625) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c626); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c627();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECLARE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c628) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c630();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c631) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c633) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c635();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c636) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c638) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c639); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c640) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c642) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c644) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c648) {\n      s1 = peg$c648;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c652) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c656) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c658) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c659); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c660();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c661) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c662); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c663) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c178) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c179); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c665();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c666) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c667); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c122); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c668) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c669); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c670) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c671); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c672();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VIEW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c673) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c674); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c675();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c676) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c677); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c678();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c679) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c680); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c681();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c682) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c683); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c684();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c183) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c184); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c685();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFF() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c688) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c689); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c690) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c691); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c692) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c693); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c696) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c697); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c700) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c701); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c702) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c703); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c496) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c706) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c707); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c708) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c709); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c279) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c280); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c712) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c713); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c714();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c715) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c716); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c717) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c718); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c719) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c720); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c721) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c722); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c723) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c724); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c727();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c728) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c729); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c730();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c746) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c747); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c748();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c751();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c84) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c752); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c753();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c754();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c755) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c756); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c757();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c760();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c761) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c762); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c763();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c764) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c765); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c766();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c769();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c781) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c782); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c783) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c784); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c787) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c788); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c789) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c790); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c791();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c792) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c793); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c794();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MONEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c795) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c796); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c797();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLMONEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c798) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c799); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c800();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c801) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c802); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c803();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c804) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c805); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c806();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c807) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c808); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c809();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NVARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c810) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c811); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c812();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c813) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c814); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c815();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c816) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c817); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c818();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c819) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c820); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c821();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c822) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c823); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c824();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c825) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c826); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c827();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c828) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c829); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c830();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c831) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c832); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c833();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c834) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c835); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c836();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c837) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c838); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c840) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c841); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c843) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c844); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c845();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c846) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c847); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c848();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c849) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c850); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c851();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c852) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c853); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c854();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c855) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c856); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c857();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c858) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c859); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c860();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c861) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c862); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c863();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c864) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c865); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c866();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c867) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c868); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c869();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLDATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c870) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c871); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c872();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c873) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c874); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c875();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME2() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c876) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c877); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c878();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIMEOFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c879) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c880); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c881();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c882) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c883); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c884();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c885) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c886); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c887();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c888) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c889); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c890();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c891) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c892); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c893();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUEIDENTIFIER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c894) {\n      s1 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c895); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c896();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c897) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c898); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c899();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c900) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c901); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c902();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c903) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c904); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c905();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c906) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c907); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c908();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c909) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c910); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c911();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c912) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c913); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c914();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c915) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c916); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c917();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c918) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c919); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c920();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c921) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c922); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c923();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c924) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c925); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c926();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c927) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c928); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c929();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c930) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c931); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c932();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c933) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c934); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c935();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c936) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c937); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c938();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c939) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c940); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c941();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c942) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c943); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c944();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c945) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c946); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c947();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c224) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c225); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNPIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c952) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c954();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c955) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c956); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c957();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c958) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c959); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c960();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c79;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c80); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c961) {\n      s0 = peg$c961;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c962); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c963;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c964); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c965) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c966); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c967) {\n      s0 = peg$c967;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c968); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c401;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c969) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c970); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c971) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c972); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c973();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c974) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c975); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c976();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c977) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c978); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c979();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c33) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c980();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c981) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c982); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c983();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c984) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c985); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c986();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c29) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c987();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CLUSTERED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c988) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c989); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c990();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NONCLUSTERED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c991) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c992); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c993();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c190) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c191); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c994();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c995) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c996); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c997();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c998) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c999); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1000();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1001) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1002); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1003();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c1004) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1005); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c1006) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1007); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1008) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1009); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c1010) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1011); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c1012) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1013); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c1014) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1015); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c597;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c1016;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1017); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c453;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c236;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c238;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c239); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c476;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c480;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c1018;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1019); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1020) {\n      s0 = peg$c1020;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1021); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1022) {\n      s0 = peg$c1022;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1023); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1024) {\n      s1 = peg$c1024;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1025); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c1026) {\n        s5 = peg$c1026;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1027); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1024) {\n          s6 = peg$c1024;\n          peg$currPos += 2;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1025); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsechar();\n          if (s6 !== peg$FAILED) {\n            s4 = [s4, s5, s6];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseblock_comment();\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1026) {\n          s5 = peg$c1026;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1027); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c1024) {\n            s6 = peg$c1024;\n            peg$currPos += 2;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c1025); }\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsechar();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseblock_comment();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c1026) {\n          s3 = peg$c1026;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1027); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1028) {\n      s1 = peg$c1028;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1030;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1031); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1032(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1033); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1034.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1035); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c588.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c589); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c588.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c589); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1033); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseproc_stmt();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1036();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1037(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1038(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1039(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1040(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1041(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_name();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1042(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1043(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1044(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1045(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1046(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1047(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral_numeric();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1048(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c597;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c597;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c598); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1049(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsecharacter_string_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumeric_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsejson_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetext_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuniqueidentifier_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CHAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VARCHAR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_NCHAR();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_NVARCHAR();\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseLPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      if (peg$c602.test(input.charAt(peg$currPos))) {\n                        s11 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        while (s11 !== peg$FAILED) {\n                          s10.push(s11);\n                          if (peg$c602.test(input.charAt(peg$currPos))) {\n                            s11 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                          }\n                        }\n                      } else {\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c1051(s1, s3, s5, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_CHAR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_VARCHAR();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c1050(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1052(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLBRAKE();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_NVARCHAR();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRBRAKE();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s6 = peg$c1050(s1, s3, s5);\n                  if (s6) {\n                    s6 = peg$FAILED;\n                  } else {\n                    s6 = void 0;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseLPAREN();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse__();\n                        if (s9 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c764) {\n                            s10 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s10 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c765); }\n                          }\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parse__();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parseRPAREN();\n                              if (s12 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c1053(s1, s3, s5, s10);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1054(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NUMERIC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DECIMAL();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_INT();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_INTEGER();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_SMALLINT();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_TINYINT();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_BIGINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_FLOAT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_REAL();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_DOUBLE();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseLPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      if (peg$c602.test(input.charAt(peg$currPos))) {\n                        s11 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        while (s11 !== peg$FAILED) {\n                          s10.push(s11);\n                          if (peg$c602.test(input.charAt(peg$currPos))) {\n                            s11 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                          }\n                        }\n                      } else {\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$currPos;\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = [];\n                              if (peg$c602.test(input.charAt(peg$currPos))) {\n                                s16 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s16 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                              }\n                              if (s16 !== peg$FAILED) {\n                                while (s16 !== peg$FAILED) {\n                                  s15.push(s16);\n                                  if (peg$c602.test(input.charAt(peg$currPos))) {\n                                    s16 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s16 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                                  }\n                                }\n                              } else {\n                                s15 = peg$FAILED;\n                              }\n                              if (s15 !== peg$FAILED) {\n                                s13 = [s13, s14, s15];\n                                s12 = s13;\n                              } else {\n                                peg$currPos = s12;\n                                s12 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parseRPAREN();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsenumeric_type_suffix();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c1055(s1, s3, s5, s10, s12, s16);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_NUMERIC();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_DECIMAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_INT();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_INTEGER();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_SMALLINT();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_TINYINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_BIGINT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_FLOAT();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_REAL();\n                          if (s3 === peg$FAILED) {\n                            s3 = peg$parseKW_DOUBLE();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseRBRAKE();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s5 = peg$c1050(s1, s3, s4);\n              if (s5) {\n                s5 = peg$FAILED;\n              } else {\n                s5 = void 0;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = [];\n                  if (peg$c602.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    while (s8 !== peg$FAILED) {\n                      s7.push(s8);\n                      if (peg$c602.test(input.charAt(peg$currPos))) {\n                        s8 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                      }\n                    }\n                  } else {\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsenumeric_type_suffix();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c1056(s1, s3, s4, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLBRAKE();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_NUMERIC();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_DECIMAL();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_INT();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_INTEGER();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_SMALLINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_TINYINT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_BIGINT();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_FLOAT();\n                          if (s3 === peg$FAILED) {\n                            s3 = peg$parseKW_REAL();\n                            if (s3 === peg$FAILED) {\n                              s3 = peg$parseKW_DOUBLE();\n                              if (s3 === peg$FAILED) {\n                                s3 = peg$parseKW_BIT();\n                                if (s3 === peg$FAILED) {\n                                  s3 = peg$parseKW_MONEY();\n                                  if (s3 === peg$FAILED) {\n                                    s3 = peg$parseKW_SMALLMONEY();\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRBRAKE();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s6 = peg$c1050(s1, s3, s5);\n                  if (s6) {\n                    s6 = peg$FAILED;\n                  } else {\n                    s6 = void 0;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsenumeric_type_suffix();\n                      if (s8 === peg$FAILED) {\n                        s8 = null;\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse__();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1057(s1, s3, s5, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATETIME2();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DATETIMEOFFSET();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_TIME();\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    if (peg$c602.test(input.charAt(peg$currPos))) {\n                      s10 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      while (s10 !== peg$FAILED) {\n                        s9.push(s10);\n                        if (peg$c602.test(input.charAt(peg$currPos))) {\n                          s10 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s10 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                        }\n                      }\n                    } else {\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseCOMMA();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = [];\n                            if (peg$c602.test(input.charAt(peg$currPos))) {\n                              s15 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s15 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              while (s15 !== peg$FAILED) {\n                                s14.push(s15);\n                                if (peg$c602.test(input.charAt(peg$currPos))) {\n                                  s15 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c603); }\n                                }\n                              }\n                            } else {\n                              s14 = peg$FAILED;\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c1058(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DATE();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_SMALLDATETIME();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_DATETIME2();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_DATETIME();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_DATETIMEOFFSET();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_TIME();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_TIMESTAMP();\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c1050(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1052(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_JSON();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1052(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TINYTEXT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_TEXT();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_MEDIUMTEXT();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_LONGTEXT();\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1059(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuniqueidentifier_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUEIDENTIFIER();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1050(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1059(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n      'NOCHECK': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'READ': true, // for lock table\n      // 'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      // 'STATUS': true, // reserved (MySQL)\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      // 'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), toUpper(type)]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n    on, with: withExpr,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  if (withExpr) dataType.push(`WITH (${indexOptionListToSQL(withExpr).join(', ')})`)\n  if (on) dataType.push(`ON [${on}]`)\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const { keyword, index } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonOptionConnector, commonTypeValue, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction anyValueFuncToSQL(stmt) {\n  const { args, type, over } = stmt\n  const { expr, having } = args\n  let sql = `${toUpper(type)}(${exprToSQL(expr)}`\n  if (having) sql = `${sql} HAVING ${toUpper(having.prefix)} ${exprToSQL(having.expr)}`\n  sql = `${sql})`\n  const overStr = overToSQL(over)\n  return [sql, overStr].filter(hasVal).join(' ')\n}\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { arrows = [], collate, target, expr: expression, keyword, symbol, as: alias, tail, properties = [] } = expr\n  const { length, dataType, parentheses, quoted, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `${toUpper(keyword)}(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  suffix += arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' ')\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  const result = [prefix, symbolChar, quoted, dataType, quoted, arrayDimension, str, suffix]\n  return result.filter(hasVal).join('')\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction flattenArgToSQL(arg) {\n  if (!arg) return ''\n  const { type, symbol, value } = arg\n  const result = [toUpper(type), symbol, exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction flattenFunToSQL(stmt) {\n  const { args, type } = stmt\n  const keys = ['input', 'path', 'outer', 'recursive', 'mode']\n  const argsStr = keys.map(key => flattenArgToSQL(args[key])).filter(hasVal).join(', ')\n  return `${toUpper(type)}(${argsStr})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses, parentheses, over, collate, suffix } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  const suffixStr = exprToSQL(suffix)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = expr.separator || ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = [str.join(''), suffixStr].filter(hasVal).join(' ')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  anyValueFuncToSQL,\n  castToSQL,\n  extractFunToSQL,\n  flattenFunToSQL,\n  funcToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let operator = expr.operator || expr.op\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction forXmlToSQL(stmt) {\n  if (!stmt) return\n  const { expr, keyword, type } = stmt\n  const result = [toUpper(type), toUpper(keyword)]\n  if (!expr) return result.join(' ')\n  return `${result.join(' ')}(${exprToSQL(expr)})`\n}\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    for: forXml,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  clauses.push(forXmlToSQL(forXml))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\nimport { withToSQL } from './with'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { from, table, set, where, orderby, with: withInfo, limit, returning } = stmt\n  const clauses = [\n    withToSQL(withInfo),\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { columnRefToSQL } from './column'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL, literalToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction conflictTargetToSQL(conflictTarget) {\n  if (!conflictTarget) return ''\n  const { type } = conflictTarget\n  switch (type) {\n    case 'column':\n      return `(${conflictTarget.expr.map(columnRefToSQL).join(', ')})`\n  }\n}\n\nfunction conflictActionToSQL(conflictAction) {\n  const { expr, keyword } = conflictAction\n  const { type } = expr\n  const result = [toUpper(keyword)]\n  switch (type) {\n    case 'origin':\n      result.push(literalToSQL(expr))\n      break\n    case 'update':\n      result.push('UPDATE', commonOptionConnector('SET', setToSQL, expr.set), commonOptionConnector('WHERE', exprToSQL, expr.where))\n      break\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction conflictToSQL(conflict) {\n  if (!conflict) return ''\n  const { action, target } = conflict\n  const result = [conflictTargetToSQL(target), conflictActionToSQL(action)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    conflict,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('ON CONFLICT', conflictToSQL, conflict))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  conflictToSQL,\n  insertToSQL,\n  valuesToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { intervalToSQL } from './interval'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n    case 'unpivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableTumbleToSQL(tumble) {\n  if (!tumble) return ''\n  const { data: tableInfo, timecol, size } = tumble\n  const fullTableName = [identifierToSql(tableInfo.db), identifierToSql(tableInfo.table)].filter(hasVal).join('.')\n  const result = ['TABLE(TUMBLE(TABLE', fullTableName, `DESCRIPTOR(${columnRefToSQL(timecol)})`, `${intervalToSQL(size)}))`]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, server, tablesample, table_hint } = tableInfo\n  const serverName = identifierToSql(server)\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr) {\n    const exprType = expr.type\n    switch (exprType) {\n      case 'values':\n        const { parentheses, values, prefix } = expr\n        const valueSQL = [parentheses && '(', '', parentheses && ')']\n        let valuesExpr = valuesToSQL(values)\n        if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n        valueSQL[1] = `VALUES ${valuesExpr}`\n        tableName = valueSQL.filter(hasVal).join('')\n        break\n      case 'tumble':\n        tableName = tableTumbleToSQL(expr)\n        break\n      default:\n        tableName = exprToSQL(expr)\n    }\n  }\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [serverName, database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  result.push(commonOptionConnector('AS', identifierToSql, as), operatorToSQL(operator))\n  if (table_hint) result.push(toUpper(table_hint.keyword), `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  if (!Array.isArray(tables)) {\n    const { expr, parentheses } = tables\n    const sql = tablesToSQL(expr)\n    if (parentheses) return `(${sql})`\n    return sql\n  }\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${toUpper(join)}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tableTumbleToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix, order_by, subFields = [],\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${literalToSQL(array_index.index)}]`\n    if (array_index.property) str = `${str}.${literalToSQL(array_index.property)}`\n  }\n  str = [str, ...subFields].join('.')\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  result.push(toUpper(order_by))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_action: onAction,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  onAction.map(onRef => reference.push(toUpper(onRef.type), exprToSQL(onRef.value)))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order_by } = columnOrder\n  const result = [\n    exprToSQL(typeof column === 'string' ? { type: 'column_ref', table: columnOrder.table, column } : columnOrder),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order_by),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fullTextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${literalToSQL(expr.array_index.index)}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fullTextSearchToSQL,\n}\n","import { columnToSQL, columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent, parentheses } = opt\n  const val = parentheses ? `(${value})` : value\n  const prefix = `TOP ${val}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  if (ident === '*') return ident\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n    case 'snowflake':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  let { prefix } = literal\n  const { type, parentheses, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'natural_string':\n      str = `N'${escape(value)}'`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `${prefix || ':'}${value}`\n      prefix = null\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { unionToSQL, multipleToSQL } from './union'\n\nconst supportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'declare', 'show', 'replace', 'if', 'grant', 'revoke', 'proc', 'raise', 'execute']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!supportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { commonTypeValue, identifierToSql, hasVal, toUpper, literalToSQL } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport astToSQL from './sql'\nimport { multipleToSQL } from './union'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'trigger':\n      clauses.push([name[0].schema ? `${identifierToSql(name[0].schema)}.` : '', identifierToSql(name[0].trigger)].filter(hasVal).join(''))\n      break\n    case 'database':\n    case 'schema':\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'view':\n      clauses.push(tablesToSQL(name), stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    case 'index':\n      clauses.push(columnRefToSQL(name), ...stmt.table ? ['ON', tableToSQL(stmt.table)] : [], stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction executeToSQL(stmt) {\n  const { type, name, args } = stmt\n  const sql = [toUpper(type)]\n  const nameWithArgs = [name]\n  if (args) nameWithArgs.push(`(${exprToSQL(args).join(', ')})`)\n  sql.push(nameWithArgs.join(''))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction forLoopToSQL(stmt) {\n  const { type, label, target, query, stmts } = stmt\n  const sql = [label, toUpper(type), target, 'IN', multipleToSQL([query]), 'LOOP', multipleToSQL(stmts), 'END LOOP', label]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction raiseToSQL(stmt) {\n  const { type, level, raise, using } = stmt\n  const sql = [toUpper(type), toUpper(level)]\n  if (raise) sql.push([literalToSQL(raise.keyword), raise.type === 'format' && raise.expr.length > 0 && ','].filter(hasVal).join(''), raise.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  if (using) sql.push(toUpper(using.type), toUpper(using.option), using.symbol, using.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare, symbol } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, constant, datatype, not_null, prefix, definition, keyword } = dec\n    const declareInfo = [[at, name].filter(hasVal).join(''), toUpper(as), toUpper(constant)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(datatype), ...commonTypeValue(dec.collate), toUpper(not_null))\n        if (definition) declareInfo.push(toUpper(definition.keyword), exprToSQL(definition.value))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(`${symbol} `)\n  result.push(info)\n  return result.join(' ')\n}\n\nfunction ifToSQL(stmt) {\n  const {\n    boolean_expr: boolExpr,\n    else_expr: elseExpr,\n    elseif_expr: elseifExpr,\n    if_expr: ifExpr,\n    prefix,\n    go,\n    semicolons,\n    suffix,\n    type,\n  } = stmt\n  const result = [toUpper(type), exprToSQL(boolExpr), literalToSQL(prefix), `${astToSQL(ifExpr.ast || ifExpr)}${semicolons[0]}`, toUpper(go)]\n  if (elseifExpr) {\n    result.push(\n      elseifExpr.map(\n        elseif => [toUpper(elseif.type), exprToSQL(elseif.boolean_expr), 'THEN', astToSQL(elseif.then.ast || elseif.then), elseif.semicolon].filter(hasVal).join(' ')\n      ).join(' ')\n    )\n  }\n  if (elseExpr) result.push('ELSE', `${astToSQL(elseExpr.ast || elseExpr)}${semicolons[1]}`)\n  result.push(literalToSQL(suffix))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction grantUserOrRoleToSQL(stmt) {\n  const { name, host } = stmt\n  const result = [literalToSQL(name)]\n  if (host) result.push('@', literalToSQL(host))\n  return result.join('')\n}\n\nfunction grantAndRevokeToSQL(stmt) {\n  const { type, grant_option_for, keyword, objects, on, to_from, user_or_roles, with: withOpt } = stmt\n  const result = [toUpper(type), literalToSQL(grant_option_for)]\n  const objStr = objects.map(obj => {\n    const { priv, columns } = obj\n    const privSQL = [exprToSQL(priv)]\n    if (columns) privSQL.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n    return privSQL.join(' ')\n  }).join(', ')\n  result.push(objStr)\n  if (on) {\n    result.push('ON')\n    switch (keyword) {\n      case 'priv':\n        result.push(\n          literalToSQL(on.object_type),\n          on.priv_level.map(privLevel => [identifierToSql(privLevel.prefix), identifierToSql(privLevel.name)].filter(hasVal).join('.')).join(', ')\n        )\n        break\n      case 'proxy':\n        result.push(grantUserOrRoleToSQL(on))\n        break\n    }\n  }\n  result.push(toUpper(to_from), user_or_roles.map(grantUserOrRoleToSQL).join(', '))\n  result.push(literalToSQL(withOpt))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  ifToSQL,\n  raiseToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL, varToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  let { keyword } = showExpr\n  const { suffix } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'COLUMNS':\n    case 'INDEXES':\n      str = commonOptionConnector('FROM', tablesToSQL, showExpr.from)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr[suffix])\n      break\n    case 'VAR':\n      str = varToSQL(showExpr.var)\n      keyword = ''\n      break\n    default:\n      break\n  }\n  return ['SHOW', toUpper(keyword), toUpper(suffix), str].filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  ifToSQL,\n  useToSQL,\n  raiseToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { procToSQL } from './proc'\nimport { showToSQL } from './show'\nimport { hasVal, toUpper } from './util'\n\nconst typeToSQLFn = {\n  alter      : alterToSQL,\n  analyze    : analyzeToSQL,\n  attach     : attachToSQL,\n  create     : createToSQL,\n  select     : selectToSQL,\n  deallocate : deallocateToSQL,\n  delete     : deleteToSQL,\n  exec       : execToSQL,\n  execute    : executeToSQL,\n  for        : forLoopToSQL,\n  update     : updateToSQL,\n  if         : ifToSQL,\n  insert     : insertToSQL,\n  drop       : commonCmdToSQL,\n  truncate   : commonCmdToSQL,\n  replace    : insertToSQL,\n  declare    : declareToSQL,\n  use        : useToSQL,\n  rename     : renameToSQL,\n  call       : callToSQL,\n  desc       : descToSQL,\n  set        : setVarToSQL,\n  lock       : lockUnlockToSQL,\n  unlock     : lockUnlockToSQL,\n  show       : showToSQL,\n  grant      : grantAndRevokeToSQL,\n  revoke     : grantAndRevokeToSQL,\n  proc       : procToSQL,\n  raise      : raiseToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  if (!stmt) return ''\n  const fun = typeToSQLFn[stmt.type]\n  const { _parentheses, _orderby, _limit } = stmt\n  const res = [_parentheses && '(', fun(stmt)]\n  while (stmt._next) {\n    const nextFun = typeToSQLFn[stmt._next.type]\n    const unionKeyword = toUpper(stmt.set_op)\n    res.push(unionKeyword, nextFun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(_parentheses && ')', orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { selectToSQL } from './select'\nimport { dataTypeToSQL, hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n    case 'schema':\n      name = identifierToSql(expr[resource])\n      break\n    case 'aggregate':\n    case 'function':\n    case 'domain':\n    case 'type':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nfunction alterTableToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterViewToSQL(stmt) {\n  const { type, columns, attributes, select, view, with: withExpr } = stmt\n  const action = toUpper(type)\n  const viewName = tableToSQL(view)\n  const result = [action, 'VIEW', viewName]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  if (attributes) result.push(`WITH ${attributes.map(toUpper).join(', ')}`)\n  result.push('AS', selectToSQL(select))\n  if (withExpr) result.push(toUpper(withExpr))\n  return result.filter(hasVal).join(' ')\n}\nfunction alterArgsToSQL(arg) {\n  const defaultSQL = arg.default && [toUpper(arg.default.keyword), exprToSQL(arg.default.value)].join(' ')\n  return [toUpper(arg.mode), arg.name, dataTypeToSQL(arg.type), defaultSQL].filter(hasVal).join(' ')\n}\n\nfunction alterSchemaToSQL(stmt) {\n  const { expr, keyword, schema, type } = stmt\n  const result = [toUpper(type), toUpper(keyword), identifierToSql(schema), alterExprToSQL(expr)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterDomainTypeToSQL(stmt) {\n  const { expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterFunctionToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      args && `(${args.expr ? args.expr.map(alterArgsToSQL).join(', ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterAggregateToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const { expr: argsExpr, orderby } = args\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      `(${argsExpr.map(alterArgsToSQL).join(', ')}${orderby ? [' ORDER', 'BY', orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterToSQL(stmt) {\n  const { keyword = 'table' } = stmt\n  switch (keyword) {\n    case 'aggregate':\n      return alterAggregateToSQL(stmt)\n    case 'table':\n      return alterTableToSQL(stmt)\n    case 'schema':\n      return alterSchemaToSQL(stmt)\n    case 'domain':\n    case 'type':\n      return alterDomainTypeToSQL(stmt)\n    case 'function':\n      return alterFunctionToSQL(stmt)\n    case 'view':\n      return alterViewToSQL(stmt)\n  }\n}\n\nexport {\n  alterArgsToSQL,\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { alterArgsToSQL, alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { setToSQL } from './update'\nimport { multipleToSQL, unionToSQL } from './union'\nimport {\n  columnIdentifierToSql,\n  columnOrderListToSQL,\n  commonOptionConnector,\n  commonKeywordArgsToSQL,\n  commonTypeValue,\n  dataTypeToSQL,\n  toUpper,\n  hasVal,\n  identifierToSql,\n  triggerEventToSQL,\n  literalToSQL,\n} from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    definer, for_each: forEach, keyword,\n    execute: triggerBody,\n    type, table, if_not_exists: ife,\n    temporary, trigger, events: triggerEvents,\n    order: triggerOrder, time: triggerTime, when,\n  } = stmt\n  const sql = [\n    toUpper(type), toUpper(temporary), definer, toUpper(keyword),\n    toUpper(ife), tableToSQL(trigger),\n    toUpper(triggerTime),\n    triggerEvents.map(event => {\n      const eventStr = [toUpper(event.keyword)]\n      const { args } = event\n      if (args) eventStr.push(toUpper(args.keyword), args.columns.map(columnRefToSQL).join(', '))\n      return eventStr.join(' ')\n    }),\n    'ON', tableToSQL(table), toUpper(forEach && forEach.keyword), toUpper(forEach && forEach.args),\n    triggerOrder && `${toUpper(triggerOrder.keyword)} ${identifierToSql(triggerOrder.trigger)}`,\n    commonOptionConnector('WHEN', exprToSQL, when),\n    toUpper(triggerBody.prefix),\n  ]\n  switch (triggerBody.type) {\n    case 'set':\n      sql.push(commonOptionConnector('SET', setToSQL, triggerBody.expr))\n      break\n    case 'multiple':\n      sql.push(multipleToSQL(triggerBody.expr.ast))\n      break\n  }\n  sql.push(toUpper(triggerBody.suffix))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createConstraintTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    or,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(or), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    recursive, replace, select, sql_security: sqlSecurity,\n    temporary, type, view, with: withClause, with_options: withOptions,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    toUpper(temporary),\n    toUpper(recursive),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    withOptions && ['WITH', `(${withOptions.map(withOpt => commonTypeValue(withOpt).join(' ')).join(', ')})`].join(' '),\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDomainToSQL(stmt) {\n  const {\n    as, domain, type, keyword, target,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(domain.schema), identifierToSql(domain.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    dataTypeToSQL(target),\n  ]\n  if (createDefinition && createDefinition.length > 0) {\n    const definitionSQL = []\n    for (const definition of createDefinition) {\n      const definitionType = definition.type\n      switch (definitionType) {\n        case 'collate':\n          definitionSQL.push(commonTypeValue(definition).join(' '))\n          break\n        case 'default':\n          definitionSQL.push(toUpper(definitionType), exprToSQL(definition.value))\n          break\n        case 'constraint':\n          definitionSQL.push(constraintDefinitionToSQL(definition))\n          break\n      }\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTypeToSQL(stmt) {\n  const { as, create_definitions: createDefinition, keyword, name, resource, type } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    toUpper(resource),\n  ]\n  if (createDefinition) {\n    const definitionSQL = []\n    switch (resource) {\n      case 'enum':\n        definitionSQL.push(exprToSQL(createDefinition))\n        break\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createFunctionReturnsOptToSQL(stmt) {\n  if (stmt.dataType) return dataTypeToSQL(stmt)\n  return [identifierToSql(stmt.db), identifierToSql(stmt.schema), identifierToSql(stmt.table)].filter(hasVal).join('.')\n}\n\nfunction createFunctionReturnsToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    Array.isArray(expr) ? `(${expr.map(columnDefinitionToSQL).join(', ')})` : createFunctionReturnsOptToSQL(expr),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\nfunction createFunctionOptionToSQL(stmt) {\n  const { type } = stmt\n  switch (type) {\n    case 'as':\n      return [toUpper(type), stmt.symbol, unionToSQL(stmt.declare), toUpper(stmt.begin), multipleToSQL(stmt.expr), toUpper(stmt.end), stmt.symbol].filter(hasVal).join(' ')\n    case 'set':\n      return [toUpper(type), stmt.parameter, toUpper(stmt.value && stmt.value.prefix), stmt.value && stmt.value.expr.map(exprToSQL).join(', ')].filter(hasVal).join(' ')\n    default:\n      return exprToSQL(stmt)\n  }\n}\nfunction createFunctionToSQL(stmt) {\n  const { type, replace, keyword, name, args, returns, options, last } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = args.map(alterArgsToSQL).filter(hasVal).join(', ')\n  sql.push(`${functionName}(${argsSQL})`, createFunctionReturnsToSQL(returns), options.map(createFunctionOptionToSQL).join(' '), last)\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction aggregateOptionToSQL(stmt) {\n  const { type, symbol, value } = stmt\n  const sql = [toUpper(type), symbol]\n  switch (toUpper(type)) {\n    case 'SFUNC':\n      sql.push([identifierToSql(value.schema), value.name].filter(hasVal).join('.'))\n      break\n    case 'STYPE':\n    case 'MSTYPE':\n      sql.push(dataTypeToSQL(value))\n      break\n    default:\n      sql.push(exprToSQL(value))\n      break\n  }\n  return sql.filter(hasVal).join(' ')\n}\nfunction createAggregateToSQL(stmt) {\n  const { type, replace, keyword, name, args, options } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = `${args.expr.map(alterArgsToSQL).join(', ')}${args.orderby ? [' ORDER', 'BY', args.orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''}`\n  sql.push(`${functionName}(${argsSQL})`, `(${options.map(aggregateOptionToSQL).join(', ')})`)\n  return sql.filter(hasVal).join(' ')\n}\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'aggregate':\n      sql = createAggregateToSQL(stmt)\n      break\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = stmt.resource === 'constraint' ? createConstraintTriggerToSQL(stmt) : createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'function':\n      sql = createFunctionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    case 'domain':\n      sql = createDomainToSQL(stmt)\n      break\n    case 'type':\n      sql = createTypeToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\nimport { withToSQL } from './with'\n\nfunction deleteToSQL(stmt) {\n  const { columns, from, table, where, orderby, with: withInfo, limit } = stmt\n  const clauses = [withToSQL(withInfo), 'DELETE']\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { assignToSQL } from './assign'\nimport { exprToSQL } from './expr'\nimport { toUpper } from './util'\n\nfunction returnToSQL(stmt) {\n  const { type, expr } = stmt\n  return [toUpper(type), exprToSQL(expr)].join(' ')\n}\n\nfunction procToSQL(expr) {\n  const { stmt } = expr\n  switch (stmt.type) {\n    case 'assign':\n      return assignToSQL(stmt)\n    case 'return':\n      return returnToSQL(stmt)\n  }\n}\n\nexport {\n  procToSQL,\n  returnToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fullTextSearchToSQL } from './column'\nimport { anyValueFuncToSQL, castToSQL, extractFunToSQL, flattenFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { tablesToSQL, unnestToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  any_value       : anyValueFuncToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  flatten         : flattenFunToSQL,\n  fulltext_search : fullTextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  tables          : tablesToSQL,\n  unnest          : unnestToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, quoted, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return [quoted, val.join(' '), quoted].filter(hasVal).join('')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type || 'ASC', toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  let separator = ' '\n  if (args.parentheses) {\n    separator = ''\n    str = `(${str})`\n  }\n  if (args.distinct) str = ['DISTINCT', str].join(separator)\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (args.separator) str = [str, toUpper(args.separator.keyword), literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { exprToSQL } from './expr'\nimport parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  exprToSQL(expr, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return exprToSQL(expr)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\n// for web worker\nif (typeof self === \"object\" && self) {\n  self.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n\nif (!global && typeof window === \"object\" && window) window.global = window\n\nif (typeof global === \"object\" && global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}