{"version":3,"sources":["/home/runner/work/node-sql-parser/node-sql-parser/webpack/universalModuleDefinition","/home/runner/work/node-sql-parser/node-sql-parser/webpack/bootstrap","/home/runner/work/node-sql-parser/node-sql-parser/src/util.js","/home/runner/work/node-sql-parser/node-sql-parser/src/array-struct.js","/home/runner/work/node-sql-parser/node-sql-parser/src/expr.js","/home/runner/work/node-sql-parser/node-sql-parser/src/aggregation.js","/home/runner/work/node-sql-parser/node-sql-parser/src/case.js","/home/runner/work/node-sql-parser/node-sql-parser/src/tables.js","/home/runner/work/node-sql-parser/node-sql-parser/src/column.js","/home/runner/work/node-sql-parser/node-sql-parser/src/command.js","/home/runner/work/node-sql-parser/node-sql-parser/src/exec.js","/home/runner/work/node-sql-parser/node-sql-parser/src/union.js","/home/runner/work/node-sql-parser/node-sql-parser/src/analyze.js","/home/runner/work/node-sql-parser/node-sql-parser/src/delete.js","/home/runner/work/node-sql-parser/node-sql-parser/src/proc.js","/home/runner/work/node-sql-parser/node-sql-parser/src/limit.js","/home/runner/work/node-sql-parser/node-sql-parser/src/func.js","/home/runner/work/node-sql-parser/node-sql-parser/src/alter.js","/home/runner/work/node-sql-parser/node-sql-parser/src/index-definition.js","/home/runner/work/node-sql-parser/node-sql-parser/src/select.js","/home/runner/work/node-sql-parser/node-sql-parser/src/update.js","/home/runner/work/node-sql-parser/node-sql-parser/src/over.js","/home/runner/work/node-sql-parser/node-sql-parser/src/with.js","/home/runner/work/node-sql-parser/node-sql-parser/src/create.js","/home/runner/work/node-sql-parser/node-sql-parser/src/sql.js","/home/runner/work/node-sql-parser/node-sql-parser/src/constrain.js","/home/runner/work/node-sql-parser/node-sql-parser/src/window.js","/home/runner/work/node-sql-parser/node-sql-parser/src/insert.js","/home/runner/work/node-sql-parser/node-sql-parser/src/binary.js","/home/runner/work/node-sql-parser/node-sql-parser/src/interval.js","/home/runner/work/node-sql-parser/node-sql-parser/src/assign.js","/home/runner/work/node-sql-parser/node-sql-parser/src/show.js","/home/runner/work/node-sql-parser/node-sql-parser/src/parser.single.js","/home/runner/work/node-sql-parser/node-sql-parser/src/parser.js","/home/runner/work/node-sql-parser/node-sql-parser/pegjs/bigquery.pegjs","/home/runner/work/node-sql-parser/node-sql-parser/index.js","/home/runner/work/node-sql-parser/node-sql-parser/(webpack)/buildin/global.js","/home/runner/work/node-sql-parser/node-sql-parser/node_modules/big-integer/BigInteger.js","/home/runner/work/node-sql-parser/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","concat","toUpperCase","connector","str","createValueExpr","_typeof","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","val","parentheses","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","hasVal","literalToSQL","literal","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","dataTypeToSQL","dataType","length","scale","arrayStructTypeToSQL","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","eventKw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","columnToSQL","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","within_group_orderby","fnName","overStr","overToSQL","separator","distinct","orderby","orderOrPartitionByToSQL","withinGroup","filterStr","where","any_value","anyValueFuncToSQL","window_func","windowFuncToSQL","assign","assignToSQL","binary_expr","binaryToSQL","case","res","conditions","len","cond","cast","castToSQL","column_ref","datatype","extract","extractFunToSQL","flatten","flattenFunToSQL","fulltext_search","fullTextSearchToSQL","function","funcToSQL","insert","unionToSQL","interval","intervalToSQL","show","showToSQL","struct","tables","tablesToSQL","unnest","unnestToSQL","namedWindowExprListToSQL","varToSQL","_expr$prefix","members","quoted","varName","exprOrigin","Reflect","deleteProperty","_i","_Object$keys","getExprListSQL","expressions","upperPrefix","info","nulls","select","_next","selectToSQL","unary_expr","unarExpr","space","unnestExpr","as","withOffset","with_offset","operatorToSQL","column","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","index","index_columns","tableToSQL","tableInfo","table","db","prefixStr","schema","server","tablesample","table_hint","serverName","schemaStr","tableName","values","valueSQL","valuesExpr","valuesToSQL","split","slice","tumble","data","timecol","size","tableTumbleToSQL","tableSampleSQL","repeatable","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","array_index","_expr$arrows","arrows","properties","order_by","_expr$subFields","subFields","offset","columnOffsetToSQL","_toConsumableArray","arrow","columnDataType","_ref","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onAction","on_action","onRef","columnOrder","opclass","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","apply","columnOption","generated","storage_type","generatedExpressionToSQL","asToSQL","asStr","test","against","has","getDual","star","columnsStr","commonCmdToSQL","stmt","trigger","options","lockUnlockToSQL","_step2","tableStmt","_iterator2","_createForOfIteratorHelper","_loop","lockType","lock_type","tableInfoTemp","done","err","e","f","lockMode","lock_mode","nowait","lockInfo","pgLock","grantUserOrRoleToSQL","host","grantAndRevokeToSQL","grant_option_for","objects","to_from","user_or_roles","withOpt","objStr","obj","priv","privSQL","object_type","priv_level","privLevel","execVariablesToSQL","typeToSQLFn","alterToSQL","analyze","attach","createToSQL","deallocate","delete","from","withInfo","limit","withToSQL","columnInfo","addition","limitToSQL","exec","parameters","execute","nameWithArgs","for","label","target","query","stmts","multipleToSQL","update","updateToSQL","if","boolExpr","boolean_expr","elseExpr","else_expr","elseifExpr","elseif_expr","ifExpr","if_expr","go","semicolons","astToSQL","elseif","then","semicolon","insertToSQL","drop","truncate","replace","declare","dec","at","constant","not_null","declareInfo","createDefinitionToSQL","use","rename","_step","_iterator","renameInfo","storeProcessCall","desc","set","lock","unlock","grant","revoke","proc","returnToSQL","raise","level","exprInfo","option","fun","_stmt","_parentheses","_orderby","_limit","nextFun","unionKeyword","set_op","astInfo","composePrefixValSuffix","fetch","seperator","limitOffsetToSQL","having","expression","alias","tail","_expr$properties","dataTypeSuffix","symbolChar","array","arrayDimensionToSymbol","castType","cast_type","source","argsStr","arg","flattenArgToSQL","args_parentheses","collateStr","suffixStr","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","trim","alterArgsToSQL","defaultSQL","_stmt$keyword","argsExpr","alterAggregateToSQL","_stmt$expr","alterTableToSQL","alterSchemaToSQL","alterDomainTypeToSQL","alterFunctionToSQL","attributes","view","withExpr","alterViewToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","_indexDefinition$inde","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","selectIntoToSQL","into","position","intoType","asStructVal","as_struct_val","forXml","_stmt$for_sys_time_as","for_sys_time_as_of","forSystem","lockingRead","locking_read","groupby","_stmt$into","parentheses_symbol","qualify","top","windowInfo","window","distinctToSQL","intoSQL","forXmlToSQL","setToSQL","sets","setItem","asWindowSpec","as_window_specification","asWindowSpecToSQL","onUpdate","isRecursive","recursive","withExprStr","cte","createDomainToSQL","domain","definitionType","createFunctionReturnsOptToSQL","createFunctionOptionToSQL","begin","parameter","createFunctionToSQL","returns","last","functionName","argsSQL","createFunctionReturnsToSQL","aggregateOptionToSQL","createAggregateToSQL","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","for_each","location","or","when","createConstraintTriggerToSQL","definer","triggerBody","ife","triggerEvents","triggerOrder","order","triggerTime","time","eventStr","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","algorithm","sqlSecurity","sql_security","withClause","withOptions","with_options","viewName","createViewToSQL","createTypeToSQL","supportedTypes","checkSupported","includes","toSQL","goToSQL","go_next","sqlItem","constraintDefinition","enforced","constraintSQL","windowSpec","window_specification","partitionby","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","constructArgsList","_expr$consider_nulls","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","partitionToSQL","partitionArr","conflictTargetToSQL","conflictTarget","conflictActionToSQL","conflictAction","conflictToSQL","conflict","_stmt$prefix","onDuplicateUpdate","on_duplicate_update","duplicateSet","op","rstr","isBetween","intervalExpr","unit","leftVar","rightVal","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","role_list","userAndHost","role","showGrantsForUser","_defineProperty","Parser","_classCallCheck","arguments","undefined","_opt$database","typeCase","parsers","whiteList","_opt$type","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c11","head","createBinaryExprChain","peg$c16","createList","peg$c19","peg$literalExpectation","peg$c27","peg$c41","peg$c43","peg$c45","peg$c48","peg$c50","peg$c53","peg$c55","peg$c57","peg$c65","peg$c67","peg$c73","peg$c75","peg$c78","peg$c81","peg$c83","peg$c85","peg$c87","peg$c89","peg$c92","peg$c94","peg$c96","peg$c98","peg$c101","peg$c103","peg$c105","peg$c107","peg$c113","peg$c121","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c135","peg$c137","peg$c139","peg$c143","peg$c145","peg$c147","peg$c149","peg$c151","peg$c154","peg$c157","peg$c159","peg$c161","peg$c163","peg$c166","peg$c170","peg$c172","peg$c175","peg$c177","peg$c180","peg$c182","peg$c188","peg$c191","peg$c193","peg$c195","peg$c198","peg$c200","peg$c205","peg$c207","peg$c210","peg$c212","peg$c222","peg$c224","peg$c226","peg$c228","peg$c230","peg$c233","peg$c235","peg$c237","peg$c239","peg$c241","peg$c243","peg$c245","peg$c247","peg$c249","peg$c251","peg$c253","peg$c255","peg$c257","peg$c259","peg$c261","peg$c263","peg$c265","peg$c267","peg$c269","peg$c271","peg$c273","peg$c275","peg$c280","peg$c282","peg$c290","peg$c292","peg$c294","peg$c307","peg$c313","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c318","peg$c319","peg$classExpectation","peg$c320","peg$c321","peg$c322","peg$c323","peg$c324","peg$c325","peg$c327","peg$c329","peg$c331","peg$c333","peg$c335","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c367","peg$c371","peg$c387","peg$c391","nk","peg$c394","peg$c396","peg$c398","peg$c400","peg$c402","peg$c404","peg$c412","peg$c414","peg$c417","peg$c419","peg$c421","peg$c434","peg$c435","peg$c436","peg$c437","chars","peg$c438","peg$c439","peg$c441","peg$c442","peg$c443","peg$c447","peg$c448","peg$c449","peg$c450","peg$c451","peg$c452","peg$c453","peg$c455","peg$c474","peg$c477","peg$c479","peg$c481","peg$c483","peg$c485","peg$c487","peg$c489","peg$c491","peg$c493","peg$c495","peg$c497","peg$c499","peg$c501","peg$c503","peg$c505","peg$c507","peg$c509","peg$c511","peg$c513","peg$c515","peg$c517","peg$c519","peg$c521","peg$c523","peg$c528","peg$c539","peg$c542","ca","peg$c543","peg$c544","peg$c545","peg$c546","peg$c548","peg$c551","peg$c554","peg$c557","peg$c560","peg$c563","peg$c566","peg$c569","peg$c572","peg$c575","peg$c578","peg$c581","peg$c584","peg$c587","peg$c589","peg$c590","peg$c601","peg$c602","peg$c603","peg$c604","peg$c605","peg$c606","peg$c607","peg$c608","peg$c611","peg$c613","peg$c615","peg$c617","peg$c619","peg$c621","peg$c624","peg$c626","peg$c630","peg$c634","peg$c637","peg$c639","peg$c642","peg$c644","peg$c647","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c661","peg$c663","peg$c665","peg$c667","peg$c669","peg$c671","peg$c674","peg$c676","peg$c678","peg$c680","peg$c682","peg$c684","peg$c686","peg$c688","peg$c690","peg$c692","peg$c695","peg$c698","peg$c700","peg$c703","peg$c706","peg$c709","peg$c712","peg$c715","peg$c718","peg$c721","peg$c724","peg$c727","peg$c730","peg$c734","peg$c737","peg$c740","peg$c743","peg$c746","peg$c749","peg$c752","peg$c755","peg$c758","peg$c761","peg$c763","peg$c765","peg$c767","peg$c769","peg$c771","peg$c774","peg$c777","peg$c780","peg$c783","peg$c789","peg$c795","peg$c798","peg$c801","peg$c804","peg$c807","peg$c813","peg$c822","peg$c825","peg$c846","peg$c853","peg$c858","peg$c861","peg$c867","peg$c873","peg$c883","peg$c886","peg$c889","peg$c892","peg$c895","peg$c899","peg$c902","peg$c905","peg$c908","peg$c911","peg$c914","peg$c918","peg$c922","peg$c925","peg$c928","peg$c931","peg$c933","peg$c935","peg$c937","peg$c939","peg$c941","peg$c943","peg$c945","peg$c947","peg$c949","peg$c950","peg$c951","peg$c952","peg$c956","peg$c959","peg$c960","peg$c961","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsestmt","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","peg$parsequery_expr","peg$parseselect_stmt","peg$parsequery_statement","s9","s11","s13","s15","peg$parseKW_UPDATE","peg$parsetable_ref_list","peg$parseKW_SET","peg$parseset_list","peg$parsefrom_clause","peg$parsewhere_clause","w","lc","peg$parseupdate_stmt","s17","peg$parsereplace_insert","peg$parseKW_INTO","peg$parsetable_name","peg$parseinsert_partition","peg$parseLPAREN","peg$parsecolumn","peg$parseCOMMA","peg$parsecolumn_list","peg$parseRPAREN","peg$parseinsert_value_clause","peg$parseon_duplicate_update_stmt","ri","v","odp","row","idx","peg$c4","peg$parsereplace_insert_stmt","peg$parseKW_IGNORE","ig","it","peg$c5","peg$parseinsert_no_columns_stmt","peg$parseinsert_into_set","peg$parseKW_DELETE","tt","peg$c3","peg$parsedelete_stmt","substr","peg$parseident_start","peg$parseKW_ANALYZE","peg$parseanalyze_stmt","peg$parseKW_ATTACH","peg$parseKW_DATABASE","peg$parseexpr","peg$parseKW_AS","peg$parseident","peg$parseattach_stmt","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","peg$c32","peg$parsedrop_stmt","s14","s19","s21","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","s8","peg$parsecreate_definition","peg$parsecreate_table_definition","peg$parsecreate_constraint_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_REPLACE","tp","con","to","ir","qe","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","lt","peg$c70","peg$parsecreate_table_stmt","peg$parseKW_SCHEMA","peg$parseident_name","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","kw","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parseproc_func_call","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parseKW_TABLES","peg$parselock_table","peg$parselock_table_list","ltl","peg$parselock_stmt","peg$parseKW_UNLOCK","peg$parseunlock_stmt","peg$parseKW_SHOW","peg$parsein_op_right","ins","in","peg$parselike_op_right","k","peg$c58","peg$parseKW_VAR__PRE_AT","peg$parseKW_USING","peg$parseshow_grant_for_using_list","peg$parseshow_grant_for_using","u","h","peg$parseshow_grant_for","peg$parseshow_grant_stmt","peg$parseshow_stmt","peg$parseKW_DESC","peg$parseKW_DESCRIBE","peg$parsedesc_stmt","peg$parsecmd_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parsecrud_stmt","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsevar_decl","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","peg$parseKW_ASSIGIN_EQUAL","peg$parsejoin_op","peg$parseon_clause","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseLBRAKE","peg$parseproc_primary_list","peg$parseRBRAKE","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseadditive_operator","peg$parseproc_primary","peg$parsemultiplicative_operator","peg$parseliteral","peg$parseparam","peg$parseproc_func_name","peg$c15","peg$parseset_item","tbl","peg$parseDOT","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c21","peg$parseKW_INSERT","s10","peg$parseKW_PARTITION","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","peg$parseselect_stmt_nake","peg$parseKW_KEY","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseKW_VAR_PRE","peg$c79","peg$parsemem_chain","peg$parseliteral_numeric","peg$parseexpr_list","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parsecreate_column_definition","peg$parseindex_type","peg$parsecte_column_definition","peg$parseindex_options","id","peg$parsecreate_index_definition","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","kc","peg$parsecreate_fulltext_spatial_index_definition","s12","df","co","cf","re","peg$parsedata_type","peg$parseKW_NOT_NULL","peg$parseliteral_not_null","peg$parseliteral_null","peg$parseKW_DEFAULT","peg$parsedefault_expr","peg$parsekeyword_comment","peg$parseKW_COLLATE","peg$parsecollate_expr","peg$parsecolumn_format","peg$parsestorage","peg$parsereference_definition","peg$parsetable_base","peg$parselock_type","peg$parseconstraint_name","de","peg$parsecreate_constraint_primary","peg$parseKW_UNIQUE","peg$parsecreate_constraint_unique","peg$parsecreate_constraint_foreign","nfr","peg$parsecreate_constraint_check","peg$parseKW_COMMENT","peg$parseliteral_string","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","peg$c155","peg$c164","peg$c167","peg$parsecreate_option_character_set_kw","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseKW_TO","tn","peg$parseALTER_RENAME_TABLE","peg$parseindex_option","peg$c202","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c213","ro","peg$parseKW_CURRENT_TIMESTAMP","peg$parsereference_option","peg$parseKW_CONSTRAINT","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","peg$c283","peg$parseunion_stmt_nake","ob","peg$c285","peg$parsecte_definition","s16","s18","s20","s22","s24","s26","s28","sv","fs","g","q","win","peg$parseKW_WITH","peg$parsewith_clause","peg$parseKW_SELECT","peg$parse___","peg$parseKW_STRUCT","peg$parseKW_VALUE","peg$parsestruct_value","peg$parsecolumn_clause","peg$parsefor_sys_time_as_of","peg$parseKW_GROUP","peg$parseKW_BY","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parseor_and_where_expr","peg$parsehaving_clause","peg$parseKW_QUALIFY","peg$parsequalify_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","with","peg$parseexpr_alias","peg$parseKW_AND","peg$parseKW_OR","peg$parseLOGIC_OPERATOR","peg$c384","peg$parsebinary_column_expr","peg$parsealias_clause","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","item","peg$c299","peg$parsecolumn_offset_expr","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseKW_SAFE_OFFSET","peg$parseKW_SAFE_ORDINAL","peg$parsecolumn_without_kw","pro","mid","peg$c303","reservedMap","peg$c432","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","peg$parsewith_offset","peg$parseKW_FROM","peg$parseKW_PIVOT","peg$parseaggr_func","el","peg$c457","peg$parseaggr_func_list","peg$parsepivot_operator","peg$parsetable_ref","peg$c316","peg$c317","peg$parsetable_join","peg$parsetablesample","peg$parsenumber","charAt","peg$parsehint","ts","peg$c337","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c342","peg$parseident_without_kw","catalog","peg$c343","peg$c344","peg$parseKW_WHERE","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_ASC","peg$parsenumber_or_param","peg$parseKW_LIMIT","i1","peg$c376","peg$c377","peg$parse_expr","peg$parsestruct_expr","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","peg$parseprimary","createUnaryExpr","peg$parseunary_expr","peg$parsearray_expr","peg$parseparentheses_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral_list","peg$c379","peg$parseparentheses_list_expr","peg$c380","peg$parsestruct_type","peg$parsecomparison_op_right","rh","logicExpr","peg$c382","peg$c385","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseexists_op","peg$parseexists_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c406","peg$parseis_op_right","peg$parsein_op","peg$parseKW_IN","peg$parselike_op","peg$c410","peg$parsemultiplicative_expr","list","peg$parsecast_keyword","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c531","peg$c532","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c533","peg$parsecast_expr","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c526","peg$c529","peg$parseextract_func","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseany_value_having","peg$parseover_partition","peg$parseany_value_func","peg$parsescalar_time_func","peg$parseKW_SESSION_USER","peg$parsescalar_func","peg$parseon_update_current_timestamp","bc","peg$c470","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then_list","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c425","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_ISOYEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parsecase_when_then","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parseKW_ELSE","cols","peg$c428","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_name","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","peg$c466","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c460","peg$parseKW_OVER","peg$c471","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CAST","peg$parseKW_SAFE_CAST","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$parseKW_NULL","peg$c541","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c593","exp","peg$c594","peg$c595","peg$parsedigits","peg$parsedigit","digit","peg$c597","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c955","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","self","NodeSQLParser","util","global","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","multiplySmallAndArray","square","divModSmall","lambda","remainder","divisor","quotient","divModAny","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","valueOf","neg","out","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,MAAM,WACT,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCJ,EAAGI,EACHC,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQF,GAAUG,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAQ,EAAoBK,EAAIF,EAGxBH,EAAoBM,EAAIP,EAGxBC,EAAoBO,EAAI,SAASf,EAASgB,EAAMC,GAC3CT,EAAoBU,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhET,EAAoBe,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBO,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,WAAwB,OAAO5B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBO,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRT,EAAoBU,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG5B,EAAoB+B,EAAI,GAIjB/B,EAAoBA,EAAoBgC,EAAI,I,q4CCpErD,IAAMC,EAAc,CAClBC,SAAWC,WACXC,KAAW,SAGTC,EAAYJ,EAEhB,SAASK,EAAsBC,EAASC,EAAQC,GAC9C,GAAKA,EACL,OAAKF,EACE,GAAPG,OAAUH,EAAQI,cAAa,KAAAD,OAAIF,EAAOC,IADrBD,EAAOC,GAI9B,SAASG,EAAUL,EAASM,GAC1B,GAAKA,EACL,MAAO,GAAPH,OAAUH,EAAQI,cAAa,KAAAD,OAAIG,GAOrC,SAASC,EAAgB5B,GACvB,IAAMkB,EAAIW,EAAU7B,GACpB,GAAI8B,MAAMC,QAAQ/B,GAAQ,MAAO,CAAEkB,KAAM,YAAalB,MAAOA,EAAMgC,IAAIJ,IACvE,GAAc,OAAV5B,EAAgB,MAAO,CAAEkB,KAAM,OAAQlB,MAAO,MAClD,OAAQkB,GACN,IAAK,UACH,MAAO,CAAEA,KAAM,OAAQlB,SACzB,IAAK,SACH,MAAO,CAAEkB,KAAM,SAAUlB,SAC3B,IAAK,SACH,MAAO,CAAEkB,KAAM,SAAUlB,SAC3B,QACE,MAAM,IAAIiC,MAAM,yBAADT,OAA0BN,EAAI,cAUnD,SAASgB,EAAiBC,EAAUC,EAAMC,GACxC,IAAMC,EAAO,CAAEH,WAAUjB,KAAM,eAE/B,OADAoB,EAAKF,KAAOA,EAAKlB,KAAOkB,EAAOR,EAAgBQ,GAC9B,YAAbD,GAAuC,gBAAbA,GAC5BG,EAAKD,MAAQ,CACXnB,KAAQ,YACRlB,MAAQ,CAAC4B,EAAgBS,EAAM,IAAKT,EAAgBS,EAAM,MAErDC,IAETA,EAAKD,MAAQA,EAAMnB,KAAOmB,EAAQT,EAAgBS,GAC3CC,GA2BT,SAASC,EAAOZ,GACd,OAAOA,EAWT,SAASa,IACP,OAAOrB,EAGT,SAASsB,EAAalB,GACpBJ,EAAYI,EAGd,SAASmB,EAASnB,GAChB,GAAKA,EAAL,CACA,IAAQvB,EAAgCuB,EAAhCvB,MAAO2C,EAAyBpB,EAAzBoB,QACTC,EADkCrB,EAAhBsB,YACE,IAAHrB,OAAOxB,EAAK,KAAMA,EACnC8C,EAAS,OAAHtB,OAAUoB,GACtB,OAAKD,EACE,GAAPnB,OAAUsB,EAAM,KAAAtB,OAAImB,EAAQlB,eADPqB,GAIvB,SAASC,EAAsBC,GAC7B,IAAQhC,EAAawB,IAAbxB,SACR,GAAKgC,EACL,OAAQhC,GAAYA,EAASiC,eAC3B,IAAK,aACL,IAAK,MACH,MAAO,IAAPzB,OAAWwB,EAAK,KAClB,IAAK,cACH,MAAO,IAAPxB,OAAWwB,EAAK,KAClB,IAAK,QACL,IAAK,UACL,IAAK,WACL,QACE,MAAO,IAAPxB,OAAYwB,EAAK,MAIvB,SAASE,EAAgBF,EAAOG,GAC9B,IAAQnC,EAAawB,IAAbxB,SACR,IAAe,IAAXmC,EAAiB,MAAO,IAAP3B,OAAWwB,EAAK,KACrC,GAAKA,EAAL,CACA,GAAc,MAAVA,EAAe,OAAOA,EAC1B,OAAQhC,GAAYA,EAASiC,eAC3B,IAAK,QACL,IAAK,UACL,IAAK,SACH,MAAO,IAAPzB,OAAYwB,EAAK,KACnB,IAAK,aACL,IAAK,YACH,MAAO,IAAPxB,OAAWwB,EAAK,KAClB,IAAK,cACH,MAAO,IAAPxB,OAAWwB,EAAK,KAClB,IAAK,WACL,IAAK,MACH,OAAOA,EACT,QACE,MAAO,IAAPxB,OAAYwB,EAAK,OAIvB,SAASI,EAAgB7B,GACvB,IAAM8B,EAAS,GACf,IAAK9B,EAAK,OAAO8B,EACjB,IAAQnC,EAAwBK,EAAxBL,KAAMoC,EAAkB/B,EAAlB+B,OAAQtD,EAAUuB,EAAVvB,MAItB,OAHAqD,EAAOE,KAAKrC,EAAKO,eACb6B,GAAQD,EAAOE,KAAKD,GACxBD,EAAOE,KAAKvD,EAAMyB,eACX4B,EAGT,SAASG,EAAQZ,GACf,GAAKA,EACL,OAAOA,EAAInB,cAGb,SAASgC,EAAOb,GACd,OAAOA,EAGT,SAASc,EAAaC,GACpB,GAAKA,EAAL,CACA,IAAMb,EAAWa,EAAXb,OACE5B,EAAqCyC,EAArCzC,KAAM2B,EAA+Bc,EAA/Bd,YAAae,EAAkBD,EAAlBC,OAAQ5D,EAAU2D,EAAV3D,MAC/B2B,EAAM3B,EACV,OAAQkB,GACN,IAAK,yBACHS,EAAM,IAAHH,OAAexB,EAAM,KACxB,MACF,IAAK,SACH2B,EAAM,IAAHH,OAAcxB,EAAM,KACvB,MACF,IAAK,eACH2B,EAAM,KAAHH,OAAexB,EAAM,KACxB,MACF,IAAK,aACH2B,EAAM,KAAHH,OAAexB,EAAM,KACxB,MACF,IAAK,kBACH2B,EAAM,KAAHH,OAAexB,GAClB,MACF,IAAK,iBACH2B,EAAM,KAAHH,OAAexB,EAAM,KACxB,MACF,IAAK,aACH2B,EAAM,KAAHH,OAAexB,EAAM,KACxB,MACF,IAAK,sBACH2B,EAAM,IAAHH,OAAcxB,EAAM,KACvB,MACF,IAAK,sBACH2B,EAAM,IAAHH,OAAOxB,EAAK,KACf,MACF,IAAK,UACL,IAAK,OACH2B,EAAM3B,EAAQ,OAAS,QACvB,MACF,IAAK,OACH2B,EAAM,OACN,MACF,IAAK,OACHA,EAAM,IACN,MACF,IAAK,QACHA,EAAM,GAAHH,OAAMsB,GAAU,KAAGtB,OAAGxB,GACzB8C,EAAS,KACT,MACF,IAAK,SACHnB,EAAM3B,EAAMyB,cACZ,MACF,IAAK,OACL,IAAK,WACL,IAAK,OACL,IAAK,YACHE,EAAM,GAAHH,OAAMN,EAAKO,cAAa,MAAAD,OAAKxB,EAAK,KACrC,MACF,IAAK,aACH2B,EAAM,KAAHH,OAAexB,EAAM,KAK5B,IAAMqD,EAAS,GAKf,OAJIP,GAAQO,EAAOE,KAAKC,EAAQV,IAChCO,EAAOE,KAAK5B,GACRiC,GAAQP,EAAOE,KAAuB,WAAlB1B,EAAO+B,IAAuBA,EAAOC,QAAUT,EAAgBQ,EAAOC,SAASC,KAAK,KAAON,EAAQI,IAC3HjC,EAAM0B,EAAOS,KAAK,KACXjB,EAAc,IAAHrB,OAAOG,EAAG,KAAMA,GAGpC,SAASoC,EAAcC,EAAKC,GAC1B,OAhLF,SAASC,EAAmBF,EAAKG,GAc/B,OAbA1E,OAAO0E,KAAKH,GACTI,QAAO,SAAA9D,GACN,IAAMN,EAAQgE,EAAI1D,GAClB,OAAOwB,MAAMC,QAAQ/B,IAA4B,WAAjB6B,EAAO7B,IAAgC,OAAVA,KAE9DqE,SAAQ,SAAA/D,GACP,IAAMgC,EAAO0B,EAAI1D,GACjB,GAAsB,WAAhBuB,EAAOS,IAAmC,UAAdA,EAAKpB,KAAmB,OAAOgD,EAAmB5B,EAAM6B,GAC1F,QAAgC,IAArBA,EAAK7B,EAAKtC,OAAwB,MAAM,IAAIiC,MAAM,2BAADT,OAA4Bc,EAAKtC,MAAK,WAElG,OADAgE,EAAI1D,GAAOsB,EAAgBuC,EAAK7B,EAAKtC,QAC9B,QAGJgE,EAkKAE,CAAmBI,KAAKC,MAAMD,KAAKE,UAAUR,IAAOC,GAG7D,SAASQ,EAAkBnC,GACzB,IAAQpB,EAAqBoB,EAArBpB,KAAMwD,EAAepC,EAAfoC,WAUd,MATe,CACblB,EAAQtC,GAAK,IAAAM,OACTkD,EAAW1C,KAAI,SAAA2C,GAEjB,GAAwB,UADQA,EAAxBzD,KAC0B,OAAOwC,EAAaiB,GACtD,IAAQC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,IAAKvB,EAAWqB,EAAXrB,OACpB,MAAO,GAAP9B,OAAUkC,EAAakB,GAAM,KAAApD,OAAIgC,EAAQF,GAAO,KAAA9B,OAAIkC,EAAamB,OAChEf,KAAK,MAAK,MAEDA,KAAK,KAGrB,SAASgB,EAAcxC,GACrB,IAAQyC,EAAiDzC,EAAjDyC,SAAUC,EAAuC1C,EAAvC0C,OAAQnC,EAA+BP,EAA/BO,YAAaoC,EAAkB3C,EAAlB2C,MAAOrB,EAAWtB,EAAXsB,OAC1CjC,EAAM,GAIV,OAHc,MAAVqD,IAAgBrD,EAAMsD,EAAQ,GAAHzD,OAAMwD,EAAM,MAAAxD,OAAKyD,GAAUD,GACtDnC,IAAalB,EAAM,IAAHH,OAAOG,EAAG,MAC1BiC,GAAUA,EAAOoB,SAAQrD,GAAO,IAAJH,OAAQoC,EAAOE,KAAK,OAC7C,GAAPtC,OAAUuD,GAAQvD,OAAGG,GAGvB,SAASuD,EAAqB5C,GAC5B,GAAKA,EAAL,CACA,IAAQyC,EAAuCzC,EAAvCyC,SAAUI,EAA6B7C,EAA7B6C,WAAYC,EAAiB9C,EAAjB8C,aACxBC,EAAgB7B,EAAQuB,GAE9B,GAD6C,UAAlBM,GAA+C,WAAlBA,EAChC,OAAOA,EAC/B,IAAMhC,EAAS8B,GAAcA,EAAWnD,KAAI,SAAAsD,GAK1C,MADoB,CADhBA,EADFC,WAE8BL,EAD5BI,EADqBE,aAGNpB,OAAOX,GAAQK,KAAK,QACtCA,KAAK,MACR,OAAOsB,EAAe,GAAH5D,OAAM6D,EAAa,KAAA7D,OAAI6B,EAAM,QAAA7B,OAAS6D,EAAa,KAAA7D,OAAI6B,IAG5E,SAASoC,EAAaC,GACpB,GAAKA,EAAL,CACA,IAAMrC,EAAS,GACPhC,EAA2BqE,EAA3BrE,QAASiC,EAAkBoC,EAAlBpC,OAAQtD,EAAU0F,EAAV1F,MAIzB,OAHAqD,EAAOE,KAAKlC,EAAQI,eAChB6B,GAAQD,EAAOE,KAAKD,GACxBD,EAAOE,KAAKG,EAAa1D,IAClBqD,EAAOS,KAAK,MAGrB,SAAS6B,EAAkBC,GACzB,OAAOA,EAAO5D,KAAI,SAAA6D,GAChB,IAAiBC,EAAkBD,EAA3BxE,QAAkB0E,EAASF,EAATE,KACpB1C,EAAS,CAACG,EAAQsC,IACxB,GAAIC,EAAM,CACR,IAAiBC,EAAoBD,EAA7B1E,QAAiB4E,EAAYF,EAAZE,QACzB5C,EAAOE,KAAKC,EAAQwC,GAASC,EAAQjE,IAAIkE,KAAgBpC,KAAK,OAEhE,OAAOT,EAAOS,KAAK,QAClBA,KAAK,QAGV,SAASqC,EAAeC,GACtB,OAAKA,EAEE,CAAC,YADYA,EAAZH,QACqBjE,IAAIqE,KAAajC,OAAOX,GAAQK,KAAK,OAAOA,KAAK,KAFvD,GAKzB,SAASwC,EAAuBN,GAC9B,OAAKA,EACE,CAACxC,EAAQwC,EAAO3E,SAAUmC,EAAQwC,EAAOD,OAD5B,GAItB,SAASQ,EAAsBC,GAC7B,IAAKA,GAAgD,iBAArBA,EAA+B,OAAOhD,EAAQgD,GAC9E,IAAQnF,EAA0CmF,EAA1CnF,QAASoF,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,UAAW7D,EAAgB2D,EAAhB3D,YAC9BQ,EAASG,EAAQnC,GAErB,OADIwB,IAAaQ,GAAU,IAAJ7B,OAAQkC,EAAa+C,GAAK,MAAAjF,OAAKkC,EAAagD,GAAU,MACtErD,EAGT,SAASsD,EAAqBC,GAC5B,GAAKA,EACL,OAAOA,EAAgB5E,IAAI6E,KAAkBzC,OAAOX,GAAQK,KAAK,Q,ieClUnE,SAASgD,EAAsBxE,GAC7B,IACayE,EAETzE,EAFF0E,UACA9F,EACEoB,EADFpB,KAEF,OAAQsC,kBAAQtC,IACd,IAAK,SACH,MAAO,IAAPM,OAAWyF,YAAaF,GAAS,KACnC,IAAK,QACH,OAvBN,SAA4BzE,GAC1B,IACc4E,EAIV5E,EAJF6E,WACAC,EAGE9E,EAHF8E,SACWL,EAETzE,EAFF0E,UACAnE,EACEP,EADFO,YAEF,IAAKkE,EAAU,MAAO,IAAPvF,OAAWyF,YAAaC,GAAU,KACjD,GAAIpF,MAAMC,QAAQgF,GAAW,MAAO,IAAPvF,OAAWuF,EAAS/E,KAAI,SAAAqF,GAAG,UAAA7F,OAAQyF,YAAaI,GAAI,QAAKjD,OAAOX,UAAQK,KAAK,MAAK,KAC/G,IAAMT,EAASiE,EAAUP,GACzB,OAAIK,EAAiB,IAAP5F,OAAW6B,EAAM,KACxBR,EAAc,IAAHrB,OAAO6B,EAAM,KAAMA,EAY1BkE,CAAmBjF,GAC5B,QACE,MAAO,IAIb,SAASkF,EAAqBlF,GAC5B,IAAQ6C,EAAwB7C,EAAxB6C,WAAY9D,EAAYiB,EAAZjB,QACdgC,EAAS,CAACG,kBAAQnC,IAMxB,OALI8D,GAAoC,WAAtBtD,EAAOsD,KACvB9B,EAAO2B,OAAS,EAChB3B,EAAOE,KAAK2B,+BAAqBC,KAEnC9B,EAAOE,KAAKuD,EAAsBxE,IAC3Be,EAAOe,OAAOX,UAAQK,KAAK,I,+PCzBpC,IAAM2D,EAAqB,CACzBC,MAAkBC,IAClBC,UCdF,SAAmBtF,GAEjB,IAAQyD,EAA6CzD,EAA7CyD,KAAM3B,EAAuC9B,EAAvC8B,OAAQyD,EAA+BvF,EAA/BuF,KAAMC,EAAyBxF,EAAzBwF,qBACxBnG,EAAM2F,EAAUvB,EAAKzD,MACnByF,EAASzF,EAAKhD,KACd0I,EAAUC,YAAUJ,GACtBK,EAAY,IACZnC,EAAKlD,cACPqF,EAAY,GACZvG,EAAM,IAAHH,OAAOG,EAAG,MAEXoE,EAAKoC,WAAUxG,EAAM,CAAC,WAAYA,GAAKmC,KAAKoE,IAC5CnC,EAAKqC,UAASzG,EAAM,GAAHH,OAAMG,EAAG,KAAAH,OAAI6G,EAAwBtC,EAAKqC,QAAS,cACpErC,EAAKmC,YAAWvG,EAAM,CAACA,EAAK6B,kBAAQuC,EAAKmC,UAAU7G,SAAUqC,uBAAaqC,EAAKmC,UAAUlI,QAAQoE,OAAOX,UAAQK,KAAK,MACzH,IAAMwE,EAAcR,EAAuB,iBAAHtG,OAAoB6G,EAAwBP,EAAsB,YAAW,KAAM,GACrHS,EAAYnE,EAAS,iBAAH5C,OAAoB8F,EAAUlD,EAAOoE,OAAM,KAAM,GACzE,MAAO,CAAC,GAADhH,OAAIuG,EAAM,KAAAvG,OAAIG,EAAG,KAAK2G,EAAaN,EAASO,GAAWnE,OAAOX,UAAQK,KAAK,MDDlF2E,UAAkBC,IAClBC,YAAkBC,IAClB,MAAkBpB,EAClBqB,OAAkBC,IAClBC,YAAkBC,IAClBC,KEtBF,SAAmB3G,GACjB,IAAM4G,EAAM,CAAC,QACPC,EAAa7G,EAAKyD,KAEpBzD,EAAKA,MAAM4G,EAAI3F,KAAK+D,EAAUhF,EAAKA,OAEvC,IAAK,IAAI3D,EAAI,EAAGyK,EAAMD,EAAWnE,OAAQrG,EAAIyK,IAAOzK,EAClDuK,EAAI3F,KAAK4F,EAAWxK,GAAGuC,KAAKO,eACxB0H,EAAWxK,GAAG0K,OAChBH,EAAI3F,KAAK+D,EAAU6B,EAAWxK,GAAG0K,OACjCH,EAAI3F,KAAK,SAEX2F,EAAI3F,KAAK+D,EAAU6B,EAAWxK,GAAG0E,SAKnC,OAFA6F,EAAI3F,KAAK,OAEF2F,EAAIpF,KAAK,MFMhBwF,KAAkBC,IAClBC,WAAkBtD,IAClBuD,SAAkB3E,gBAClB4E,QAAkBC,IAClBC,QAAkBC,IAClBC,gBAAkBC,IAClBC,SAAkBC,IAClBC,OAAkBC,IAClBC,SAAkBC,IAClBC,KAAkBC,IAClBC,OAAkBhD,EAClBiD,OAAkBC,IAClBC,OAAkBC,IAClB,OAAkBC,KAGpB,SAASC,EAASxI,GAChB,IAAAyI,EAAiEzI,EAAzDQ,cAAM,IAAAiI,EAAG,IAAGA,EAAEzL,EAA2CgD,EAA3ChD,KAAM0L,EAAqC1I,EAArC0I,QAAS3J,EAA4BiB,EAA5BjB,QAAS4J,EAAmB3I,EAAnB2I,OAAQrH,EAAWtB,EAAXsB,OAChDhB,EAAM,GACRvB,GAASuB,EAAIW,KAAKlC,GACtB,IAAM6J,EAAUF,GAAWA,EAAQhG,OAAS,EAAI,GAAHxD,OAAMlC,EAAI,KAAAkC,OAAIwJ,EAAQlH,KAAK,MAASxE,EAC7E+D,EAAS,GAAH7B,OAAMsB,GAAU,IAAEtB,OAAG0J,GAG/B,OAFItH,IAAQP,GAAUO,GACtBhB,EAAIW,KAAKF,GACF,CAAC4H,EAAQrI,EAAIkB,KAAK,KAAMmH,GAAQ7G,OAAOX,UAAQK,KAAK,IAK7D,SAASwD,EAAU6D,GACjB,GAAKA,EAAL,CACA,IAAM7I,EAAO6I,EACb,GAAIA,EAAWnH,IAAK,CAClB,IAAQA,EAAQ1B,EAAR0B,IACRoH,QAAQC,eAAe/I,EAAM0B,GAC7B,IAAK,IAALsH,EAAA,EAAAC,EAAkB9L,OAAO0E,KAAKH,GAAIsH,EAAAC,EAAAvG,OAAAsG,IAAE,CAA/B,IAAMhL,EAAGiL,EAAAD,GACZhJ,EAAKhC,GAAO0D,EAAI1D,IAGpB,OAAOmH,EAAmBnF,EAAKpB,MAAQuG,EAAmBnF,EAAKpB,MAAMoB,GAAQoB,uBAAapB,IAU5F,SAASkJ,EAAezE,GACtB,OAAKA,EACEA,EAAS/E,IAAIsF,GADE,GAgBxB,SAASe,EAAwB/F,EAAMQ,GACrC,IAAKhB,MAAMC,QAAQO,GAAO,MAAO,GACjC,IAAImJ,EAAc,GACZC,EAAclI,kBAAQV,GAC5B,OAAQ4I,GACN,IAAK,WACHD,EAAcnJ,EAAKN,KAAI,SAAA2J,GAAI,MAAI,CAACrE,EAAUqE,EAAKrJ,MAAOqJ,EAAKzK,MAAQ,MAAOsC,kBAAQmI,EAAKC,QAAQxH,OAAOX,UAAQK,KAAK,QACnH,MACF,IAAK,eAGL,QACE2H,EAAcnJ,EAAKN,KAAI,SAAA2J,GAAI,OAAIrE,EAAUqE,EAAKrJ,SAGlD,OAAOZ,oBAAUgK,EAAaD,EAAY3H,KAAK,OAtDjD2D,EAAkB,IAAOqD,EA2BzBrD,EAAmBT,UAAY,SAAA1E,GAC7B,IAAMX,EAAM6J,EAAelJ,EAAKtC,OAChC,OAAOsC,EAAKO,YAAc,IAAHrB,OAAOG,EAAImC,KAAK,MAAK,KAAMnC,GAGpD8F,EAAmBoE,OAAS,SAAAvJ,GAC1B,IAAMX,EAA4B,WAAtBE,EAAOS,EAAKwJ,OAAqB3B,YAAW7H,GAAQyJ,YAAYzJ,GAC5E,OAAOA,EAAKO,YAAc,IAAHrB,OAAOG,EAAG,KAAMA,GAGzC8F,EAAmBuE,WAtBnB,SAAoBC,GAClB,IAAQ9J,EAAgC8J,EAAhC9J,SAAUU,EAAsBoJ,EAAtBpJ,YAAaP,EAAS2J,EAAT3J,KACzB4J,EAAsB,MAAb/J,GAAiC,MAAbA,EAAoB,GAAK,IACtDR,EAAM,GAAHH,OAAMW,GAAQX,OAAG0K,GAAK1K,OAAG8F,EAAUhF,IAC5C,OAAOO,EAAc,IAAHrB,OAAOG,EAAG,KAAMA,I,6BGvEpC,yLAOA,SAASiJ,EAAYuB,GACnB,IAAQjL,EAA4CiL,EAA5CjL,KAAMkL,EAAsCD,EAAtCC,GAAI9J,EAAkC6J,EAAlC7J,KAAmB+J,EAAeF,EAA5BG,YAUxB,MATe,CAAC,GAAD9K,OACVgC,kBAAQtC,GAAK,KAAAM,OAAIc,GAAQgF,YAAUhF,IAAS,GAAE,KACjDlB,gCAAsB,KAAM8B,kBAAiBkJ,GAC7ChL,gCACEoC,kBAAQ6I,GAAcA,EAAWhL,SACjC6B,kBACAmJ,GAAcA,EAAWD,KAGfhI,OAAOX,UAAQK,KAAK,KAgBpC,SAASyI,EAAcpK,GACrB,GAAKA,EAEL,OADiBA,EAATjB,MAEN,IAAK,QACL,IAAK,UACH,OAnBN,SAA4BiB,GAC1B,IAAQiK,EAAoCjK,EAApCiK,GAAII,EAAgCrK,EAAhCqK,OAAQlK,EAAwBH,EAAxBG,KAAMmK,EAAkBtK,EAAlBsK,QAASvL,EAASiB,EAATjB,KAC7BmC,EAAS,CACbiE,YAAUhF,GACV,MACA4D,YAAesG,GACfxD,YAAYyD,IAERC,EAAM,CAAC,GAADlL,OAAIgC,kBAAQtC,GAAK,KAAAM,OAAI6B,EAAOS,KAAK,KAAI,MAEjD,OADIsI,GAAIM,EAAInJ,KAAK,KAAML,0BAAgBkJ,IAChCM,EAAI5I,KAAK,KASL6I,CAAmBxK,GAC5B,QACE,MAAO,IAIb,SAASyK,EAAeC,GACtB,GAAKA,EAAL,CACA,IAAQxL,EAA6DwL,EAA7DxL,QAASiB,EAAoDuK,EAApDvK,KAAMwK,EAA8CD,EAA9CC,MAAOC,EAAuCF,EAAvCE,cAAelK,EAAwBgK,EAAxBhK,YAAaC,EAAW+J,EAAX/J,OACpDO,EAAS,GACf,OAAQhC,EAAQ4B,eACd,IAAK,YACHI,EAAOE,KAAKC,kBAAQnC,GAAU,IAAFG,OAAM0B,0BAAgB4J,IAAM,IAAAtL,OAAQuL,EAAc/K,IAAIsF,KAAWlD,OAAOX,UAAQK,KAAK,MAAK,OACtH,MACF,IAAK,2BACHT,EAAOE,KAAKC,kBAAQnC,GAAU,IAAKiG,YAAUhF,IAC7C,MACF,IAAK,QACHe,EAAOE,KAAKC,kBAAQV,GAASU,kBAAQnC,GAAUwB,EAAc,IAAHrB,OAAOc,EAAKN,IAAIkB,mBAAiBY,KAAK,MAAK,UAAAtC,OAAW0B,0BAAgBZ,KAChI,MACF,QACEe,EAAOE,KAAK+D,YAAUhF,IAE1B,OAAOe,EAAOe,OAAOX,UAAQK,KAAK,MAWpC,SAASkJ,EAAWC,GAClB,GAAgC,WAA5BzJ,kBAAQyJ,EAAU/L,MAAoB,OAAO0J,EAAYqC,GAC7D,IAAQC,EAA8FD,EAA9FC,MAAOC,EAAuFF,EAAvFE,GAAIf,EAAmFa,EAAnFb,GAAI9J,EAA+E2K,EAA/E3K,KAAMH,EAAyE8K,EAAzE9K,SAAkBiL,EAAuDH,EAA/DnK,OAAmBuK,EAA4CJ,EAA5CI,OAAQC,EAAoCL,EAApCK,OAAQC,EAA4BN,EAA5BM,YAAaC,EAAeP,EAAfO,WACjFC,EAAavK,0BAAgBoK,GAC7BtM,EAAWkC,0BAAgBiK,GAC3BO,EAAYxK,0BAAgBmK,GAC9BM,EAAYT,GAAShK,0BAAgBgK,GACzC,GAAI5K,EAEF,OADiBA,EAAKpB,MAEpB,IAAK,SACH,IAAQ2B,EAAgCP,EAAhCO,YAAa+K,EAAmBtL,EAAnBsL,OAAQ9K,EAAWR,EAAXQ,OACvB+K,EAAW,CAAChL,GAAe,IAAK,GAAIA,GAAe,KACrDiL,EAAaC,YAAYH,GACzB9K,IAAQgL,EAAaA,EAAWE,MAAM,KAAKC,MAAM,GAAGjM,KAAI,SAAAY,GAAG,SAAApB,OAAOgC,kBAAQV,GAAO,KAAAtB,OAAIoB,MAAOkB,KAAK,KACrG+J,EAAS,GAAK,UAAHrM,OAAasM,GACxBH,EAAYE,EAASzJ,OAAOX,UAAQK,KAAK,IACzC,MACF,IAAK,SACH6J,EA3BR,SAA0BO,GACxB,IAAKA,EAAQ,MAAO,GACpB,IAAcjB,EAA6BiB,EAAnCC,KAAiBC,EAAkBF,EAAlBE,QAASC,EAASH,EAATG,KAGlC,MADe,CAAC,qBADM,CAACnL,0BAAgB+J,EAAUE,IAAKjK,0BAAgB+J,EAAUC,QAAQ9I,OAAOX,UAAQK,KAAK,KACvD,cAAFtC,OAAgB0E,YAAekI,GAAQ,QAAA5M,OAAQ6I,YAAcgE,GAAK,OACvGjK,OAAOX,UAAQK,KAAK,KAsBhBwK,CAAiBhM,GAC7B,MACF,QACEqL,EAAYrG,YAAUhF,GAI5B,IAAIX,EAAM,CAAC8L,EAAYzM,EAAU0M,EADjCC,EAAY,CAACnK,kBAAQ4J,GAAYO,GAAWvJ,OAAOX,UAAQK,KAAK,MACTM,OAAOX,UAAQK,KAAK,KACvEmJ,EAAUpK,cAAalB,EAAM,IAAHH,OAAOG,EAAG,MACxC,IAAM0B,EAAS,CAAC1B,GAChB,GAAI4L,EAAa,CACf,IAAMgB,EAAiB,CAAC,cAAejH,YAAUiG,EAAYjL,MAAOoB,uBAAa6J,EAAYiB,aAAapK,OAAOX,UAAQK,KAAK,KAC9HT,EAAOE,KAAKgL,GAId,OAFAlL,EAAOE,KAAKnC,gCAAsB,KAAM8B,kBAAiBkJ,GAAKG,EAAcpK,IACxEqL,GAAYnK,EAAOE,KAAKC,kBAAQgK,EAAWnM,SAAU,IAAFG,OAAMgM,EAAWlL,KAAKN,IAAI4K,GAAgBxI,OAAOX,UAAQK,KAAK,MAAK,MACnHT,EAAOe,OAAOX,UAAQK,KAAK,KAOpC,SAAS4G,EAAYD,GACnB,IAAKA,EAAQ,MAAO,GACpB,IAAK3I,MAAMC,QAAQ0I,GAAS,CAC1B,IAAQnI,EAAsBmI,EAAtBnI,KAAMO,EAAgB4H,EAAhB5H,YACR6J,EAAMhC,EAAYpI,GACxB,OAAIO,EAAoB,IAAPrB,OAAWkL,EAAG,KACxBA,EAET,IAAM+B,EAAYhE,EAAO,GACnBiE,EAAU,GAChB,GAAuB,SAAnBD,EAAUvN,KAAiB,MAAO,OACtCwN,EAAQnL,KAAKyJ,EAAWyB,IACxB,IAAK,IAAI9P,EAAI,EAAGA,EAAI8L,EAAOzF,SAAUrG,EAAG,CACtC,IAAMgQ,EAAWlE,EAAO9L,GAChBiQ,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAO/K,EAAS6K,EAAT7K,KACbnC,EAAM,GACZA,EAAI4B,KAAKO,EAAO,IAAHtC,OAAOgC,kBAAQM,IAAU,KACtCnC,EAAI4B,KAAKyJ,EAAW2B,IACpBhN,EAAI4B,KAAKnC,gCAAsB,KAAMkG,IAAWsH,IAC5CC,GAAOlN,EAAI4B,KAAK,UAAD/B,OAAWqN,EAAM7M,IAAIkB,mBAAiBY,KAAK,MAAK,MACnE4K,EAAQnL,KAAK5B,EAAIyC,OAAOX,UAAQK,KAAK,MAEvC,OAAO4K,EAAQtK,OAAOX,UAAQK,KAAK,IAGrC,SAASgL,EAAiBC,GACxB,IAAQ1N,EAA2B0N,EAA3B1N,QAASiC,EAAkByL,EAAlBzL,OAAQtD,EAAU+O,EAAV/O,MACnB0M,EAAM,CAACrL,EAAQI,eAGrB,OAFI6B,GAAQoJ,EAAInJ,KAAKD,GACrBoJ,EAAInJ,KAAKvD,GACF0M,EAAI5I,KAAK,O,klCC7HlB,SAASoC,EAAe5D,GACtB,IACE0M,EAEE1M,EAFF0M,YAAWC,EAET3M,EAFW4M,cAAM,IAAAD,EAAG,GAAEA,EAAE7C,EAExB9J,EAFwB8J,GAAIvI,EAE5BvB,EAF4BuB,QAAS2I,EAErClK,EAFqCkK,OAAQrJ,EAE7Cb,EAF6Ca,OAAQkK,EAErD/K,EAFqD+K,OAAQH,EAE7D5K,EAF6D4K,MAAOrK,EAEpEP,EAFoEO,YAAasM,EAEjF7M,EAFiF6M,WACnFvL,EACEtB,EADFsB,OAAQwL,EACN9M,EADM8M,SAAQC,EACd/M,EADgBgN,iBAAS,IAAAD,EAAG,GAAEA,EAE9B1N,EAAiB,MAAX6K,EAAiB,IAV7B,SAA2BA,EAAQrJ,GACjC,GAAsB,iBAAXqJ,EAAqB,OAAOtJ,0BAAgBsJ,EAAQrJ,GAC/D,IAAQb,EAAyBkK,EAAzBlK,KAAMiN,EAAmB/C,EAAnB+C,OAAQ3L,EAAW4I,EAAX5I,OACtB,MAAO,CAAC0D,YAAUhF,GAAOiN,EAAQ3L,GAAQQ,OAAOX,UAAQK,KAAK,IAO5B0L,CAAkBhD,EAAQrJ,GACvD+J,IAAOvL,EAAM,GAAHH,OAAM0B,0BAAgBgK,GAAM,KAAA1L,OAAIG,IAC1C0L,IAAQ1L,EAAM,GAAHH,OAAM0B,0BAAgBmK,GAAO,KAAA7L,OAAIG,IAC5CqN,IACFrN,EAAM,GAAHH,OAAMG,EAAG,KAAAH,OAAIkC,uBAAasL,EAAYlC,OAAM,KAC3CkC,EAAYtO,WAAUiB,EAAM,GAAHH,OAAMG,EAAG,KAAAH,OAAIkC,uBAAasL,EAAYtO,aAGrE,IAAM2C,EAAS,CADf1B,EAAM,CAACA,GAAGH,OAAAiO,EAAKH,IAAWxL,KAAK,KAG7B1C,gCAAsB,KAAMkG,IAAW8E,GACvC8C,EAAOlN,KAAI,SAAC0N,EAAO5C,GAAK,OAAK1L,gCAAsBsO,EAAOhM,eAAcyL,EAAWrC,OAAShJ,KAAK,MAE/FD,GAASR,EAAOE,KAAKH,0BAAgBS,GAASC,KAAK,MACvDT,EAAOE,KAAKC,kBAAQI,IACpBP,EAAOE,KAAKC,kBAAQ4L,IACpB,IAAM1C,EAAMrJ,EAAOe,OAAOX,UAAQK,KAAK,KACvC,OAAOjB,EAAc,IAAHrB,OAAOkL,EAAG,KAAMA,EAGpC,SAASiD,EAAexK,GACtB,IAAAyK,EAAkDzK,GAAc,GAAxDJ,EAAQ6K,EAAR7K,SAAUC,EAAM4K,EAAN5K,OAAQpB,EAAMgM,EAANhM,OAAQqB,EAAK2K,EAAL3K,MAAO3C,EAAIsN,EAAJtN,KACrCe,EAAS0B,EAIb,OAHc,MAAVC,IAAgB3B,GAAU,IAAJ7B,OAAQ,CAACwD,EAAQC,GAAOb,QAAO,SAAAxB,GAAG,OAAW,MAAPA,KAAakB,KAAK,MAAK,MACnFF,GAAUA,EAAOoB,SAAQ3B,GAAU,IAAJ7B,OAAQoC,EAAOE,KAAK,OACnDxB,IAAMe,GAAUiE,YAAUhF,IACvBe,EAGT,SAASwM,EAA+BC,GACtC,IAAMC,EAAY,GAClB,IAAKD,EAAqB,OAAOC,EACjC,IACE5K,EAKE2K,EALF3K,WACA9D,EAIEyO,EAJFzO,QACA2O,EAGEF,EAHFE,MACA9C,EAEE4C,EAFF5C,MACW+C,EACTH,EADFI,UAOF,OALAH,EAAUxM,KAAKC,kBAAQnC,IACvB0O,EAAUxM,KAAKmH,YAAYwC,IAC3B6C,EAAUxM,KAAK4B,GAAc,IAAJ3D,OAAQ2D,EAAWnD,KAAI,SAAAqF,GAAG,OAAIC,YAAUD,MAAMvD,KAAK,MAAK,MACjFiM,EAAUxM,KAAKC,kBAAQwM,IACvBC,EAASjO,KAAI,SAAAmO,GAAK,OAAIJ,EAAUxM,KAAKC,kBAAQ2M,EAAMjP,MAAOoG,YAAU6I,EAAMnQ,WACnE+P,EAAU3L,OAAOX,UA6B1B,SAASoD,EAAiBuJ,GACxB,IAAQ5D,EAA8C4D,EAA9C5D,OAAQ3I,EAAsCuM,EAAtCvM,QAAS+H,EAA6BwE,EAA7BxE,MAAOyE,EAAsBD,EAAtBC,QAASjB,EAAagB,EAAbhB,SAQzC,MAPe,CACb9H,YAA4B,iBAAXkF,EAAsB,CAAEtL,KAAM,aAAcgM,MAAOkD,EAAYlD,MAAOV,UAAW4D,GAClGhP,gCAAsByC,GAAWA,EAAQ3C,KAAMgC,kBAAiBW,GAAWA,EAAQ7D,OACnFqQ,EACA7M,kBAAQ4L,GACR5L,kBAAQoI,IAEIxH,OAAOX,UAAQK,KAAK,KASpC,SAASwM,EAAsBC,GAC7B,IAAM/D,EAAS,GACTlN,EAAO4G,EAAeqK,EAAiB/D,QACvCzH,EAAW4K,EAAeY,EAAiBpL,YACjDqH,EAAOjJ,KAAKjE,GACZkN,EAAOjJ,KAAKwB,GACZ,IAAMyL,EAlDR,SAAsBrL,GACpB,IAAMqL,EAAY,GAEhBC,EAMEtL,EANFsL,SAAyBC,EAMvBvL,EANQwL,cAA6BC,EAMrCzL,EANqCyL,MAAOlL,EAM5CP,EAN4CO,QAAS7B,EAMrDsB,EANqDtB,QAASgN,EAM9D1L,EAN8D0L,QACnDC,EAKX3L,EALF4L,YACgBC,EAId7L,EAJF8L,eACmBC,EAGjB/L,EAHFgM,kBACeC,EAEbjM,EAFFkM,cACsBvB,EACpB3K,EADFmM,qBAIF,GADAd,EAAUjN,KAAKC,kBAAQiN,GAAYA,EAASzQ,QACxC8Q,EAAY,CACd,IAAQ5P,EAAgB4P,EAAhB5P,KAAMlB,EAAU8Q,EAAV9Q,MACdwQ,EAAUjN,KAAKrC,EAAKO,cAAe6F,YAAUtH,IAS/C,OAPAwQ,EAAUjN,KAAKgO,YAA0BX,IACzCJ,EAAUjN,KAAKgD,gCAAsByK,GAAgBxN,kBAAQ0N,GAAgBzL,uBAAaC,IAC1F8K,EAAUjN,KAAIiO,MAAdhB,EAASf,EAASrM,0BAAgBsN,KAClCF,EAAUjN,KAAIiO,MAAdhB,EAASf,EAASrM,0BAAgBS,KAClC2M,EAAUjN,KAAIiO,MAAdhB,EAASf,EAASrM,0BAAgBgO,KAClCZ,EAAUjN,KAAIiO,MAAdhB,EAASf,EAASrM,0BAAgByN,KAClCL,EAAUjN,KAAIiO,MAAdhB,EAASf,EAASI,EAA+BC,KAC1CU,EAAUpM,OAAOX,UAAQK,KAAK,KA2BnB2N,CAAalB,GAC/B/D,EAAOjJ,KAAKiN,GACZ,IAAMkB,EAdR,SAAkCA,GAChC,GAAKA,EAEL,MADe,CAAClO,kBAAQkO,EAAU1R,OAAQ,IAAFwB,OAAM8F,YAAUoK,EAAUpP,MAAK,KAAKkB,kBAAQkO,EAAUC,eAChFvN,OAAOX,UAAQK,KAAK,KAWhB8N,CAAyBrB,EAAiBmB,WAE5D,OADAlF,EAAOjJ,KAAKmO,GACLlF,EAAOpI,OAAOX,UAAQK,KAAK,KAGpC,SAAS+N,EAAQC,GACf,OAAKA,EACE,CAAC,KAAM,8BAA8BC,KAAKD,GAAS5O,0BAAgB4O,GAAS/O,gCAAsB+O,IAAQhO,KAAK,KADnG,GAIrB,SAASiG,EAAoBzH,GAC3B,IAAQ0P,EAAsC1P,EAAtC0P,QAAS5F,EAA6B9J,EAA7B8J,GAAInG,EAAyB3D,EAAzB2D,QAAS+J,EAAgB1N,EAAhB0N,MAAO9P,EAASoC,EAATpC,KAGrC,MAAO,CAFW,CAACsD,kBAAQwM,GAAQ,IAAFxO,OAAMyE,EAAQjE,KAAI,SAAAqF,GAAG,OAAInB,EAAemB,MAAMvD,KAAK,MAAK,MAAKA,KAAK,KAC/E,CAACN,kBAAQwO,GAAU,CAAC,IAAK1K,YAAUhF,EAAKA,MAAOpC,GAAQ,IAAJsB,OAAQkC,uBAAaxD,IAAS,KAAKkE,OAAOX,UAAQK,KAAK,KAAKA,KAAK,KACxG+N,EAAQzF,IAAKhI,OAAOX,UAAQK,KAAK,KAGnE,SAASuC,EAAYmG,EAAQrJ,GAC3B,IAAQb,EAAekK,EAAflK,KACR,GAAa,SADUkK,EAATtL,KACO,OAAOqI,YAAUiD,GAClCrJ,IAAQb,EAAKa,OAASA,GAC1B,IAAIxB,EAAM2F,YAAUhF,GAGpB,OAFIA,EAAKO,aAAeuI,QAAQ6G,IAAI3P,EAAM,iBAAgBX,EAAM,IAAHH,OAAOG,EAAG,MACnEW,EAAK0M,aAA6B,eAAd1M,EAAKpB,OAAuBS,EAAM,GAAHH,OAAMG,EAAG,KAAAH,OAAIkC,uBAAapB,EAAK0M,YAAYlC,OAAM,MACjG,CAACnL,EAAKkQ,EAAQrF,EAAOJ,KAAKhI,OAAOX,UAAQK,KAAK,KAcvD,SAASmD,EAAahB,EAASwE,GAC7B,IAAKxE,GAAuB,MAAZA,EAAiB,OAAOA,EACxC,IAAM9C,EAbR,SAAiBsH,GACf,IAAMgE,EAAY3M,MAAMC,QAAQ0I,IAAWA,EAAO,GAClD,SAAIgE,GAAgC,SAAnBA,EAAUvN,MAWZgR,CAAQzH,GACjBpH,EAAS,GACI0D,EAAyBd,EAApCe,UAAqBmL,EAAelM,EAAfkM,KAAMjR,EAAS+E,EAAT/E,KACnCmC,EAAOE,KAAK4O,EAAM3O,kBAAQtC,IAC1B,IACMkR,GADcrL,GAAYd,GACDjE,KAAI,SAAAqF,GAAG,OAAIhB,EAAYgB,EAAKlE,MAASW,KAAK,MAEzE,OADAT,EAAOE,KAAK,CAACrC,GAAQ,IAAKkR,EAAYlR,GAAQ,KAAKkD,OAAOX,UAAQK,KAAK,KAChET,EAAOe,OAAOX,UAAQK,KAAK,O,2jDC9JpC,SAASuO,EAAeC,GACtB,IAAQpR,EAAgCoR,EAAhCpR,KAAMG,EAA0BiR,EAA1BjR,QAAS/B,EAAiBgT,EAAjBhT,KAAMwD,EAAWwP,EAAXxP,OACvB4L,EAAU,CAAClL,kBAAQtC,GAAOsC,kBAAQnC,GAAUmC,kBAAQV,IAC1D,OAAQzB,GACN,IAAK,QACHqN,EAAQnL,KAAKmH,YAAYpL,IACzB,MACF,IAAK,UACHoP,EAAQnL,KAAK,CAACjE,EAAK,GAAG+N,OAAS,GAAH7L,OAAM0B,0BAAgB5D,EAAK,GAAG+N,QAAO,KAAM,GAAInK,0BAAgB5D,EAAK,GAAGiT,UAAUnO,OAAOX,UAAQK,KAAK,KACjI,MACF,IAAK,WACL,IAAK,SACL,IAAK,YACH4K,EAAQnL,KAAKL,0BAAgB5D,IAC7B,MACF,IAAK,OACHoP,EAAQnL,KAAKmH,YAAYpL,GAAOgT,EAAKE,SAAWF,EAAKE,QAAQxQ,IAAIsF,KAAWlD,OAAOX,UAAQK,KAAK,MAChG,MACF,IAAK,QACH4K,EAAQnL,KAAIiO,MAAZ9C,EAAO,CAAMxI,YAAe5G,IAAKkC,OAAAiO,EAAK6C,EAAKpF,MAAQ,CAAC,KAAMF,YAAWsF,EAAKpF,QAAU,IAAE,CAAEoF,EAAKE,SAAWF,EAAKE,QAAQxQ,IAAIsF,KAAWlD,OAAOX,UAAQK,KAAK,QAK5J,OAAO4K,EAAQtK,OAAOX,UAAQK,KAAK,KAsErC,SAAS2O,EAAgBH,GACvB,IAAQpR,EAA0BoR,EAA1BpR,KAAMG,EAAoBiR,EAApBjR,QAASoJ,EAAW6H,EAAX7H,OACjBpH,EAAS,CAACnC,EAAKO,cAAe+B,kBAAQnC,IAC5C,GAA2B,WAAvBH,EAAKO,cAA4B,OAAO4B,EAAOS,KAAK,KACxD,IAC8B4O,EADxBC,EAAY,GAAEC,EAAAC,EACIpI,GAAM,QAAAqI,EAAA,WAAE,IAArB7F,EAASyF,EAAA1S,MACVkN,EAA+BD,EAA/BC,MAAkB6F,EAAa9F,EAAxB+F,UACTC,EAAgB,CAACjG,YAAWE,IAClC,GAAI6F,EAAU,CAEZE,EAAc1P,KADM,CAAC,SAAU,OAAQ,UACRvB,KAAI,SAAA1B,GAAG,OAAIkD,kBAAQuP,EAASzS,OAAO8D,OAAOX,UAAQK,KAAK,MAExF6O,EAAUpP,KAAK0P,EAAcnP,KAAK,OAPpC,IAAA8O,EAAA9R,MAAA4R,EAAAE,EAAApS,KAAA0S,MAAAJ,IAQC,MAAAK,GAAAP,EAAAQ,EAAAD,GAAA,QAAAP,EAAAS,IAED,OADAhQ,EAAOE,KAAIiO,MAAXnO,EAAM,CAAMsP,EAAU7O,KAAK,OAAKtC,OAAAiO,EAzBlC,SAAgB6C,GACd,IAAmBgB,EAAqBhB,EAAhCiB,UAAqBC,EAAWlB,EAAXkB,OACvBC,EAAW,GACjB,GAAIH,EAAU,CACZ,IAAQpT,EAASoT,EAATpT,KACRuT,EAASlQ,KAAKrD,EAAKuB,eAGrB,OADI+R,GAAQC,EAASlQ,KAAKiQ,EAAO/R,eAC1BgS,EAiB8BC,CAAOpB,MACrCjP,EAAOe,OAAOX,UAAQK,KAAK,KA2DpC,SAAS6P,EAAqBrB,GAC5B,IAAQhT,EAAegT,EAAfhT,KAAMsU,EAAStB,EAATsB,KACRvQ,EAAS,CAACK,uBAAapE,IAE7B,OADIsU,GAAMvQ,EAAOE,KAAK,IAAKG,uBAAakQ,IACjCvQ,EAAOS,KAAK,IAGrB,SAAS+P,EAAoBvB,GAC3B,IAAQpR,EAAwFoR,EAAxFpR,KAAM4S,EAAkFxB,EAAlFwB,iBAAkBzS,EAAgEiR,EAAhEjR,QAAS0S,EAAuDzB,EAAvDyB,QAASnF,EAA8C0D,EAA9C1D,GAAIoF,EAA0C1B,EAA1C0B,QAASC,EAAiC3B,EAAjC2B,cAAqBC,EAAY5B,EAAI,KAC9FjP,EAAS,CAACG,kBAAQtC,GAAOwC,uBAAaoQ,IACtCK,EAASJ,EAAQ/R,KAAI,SAAAoS,GACzB,IAAQC,EAAkBD,EAAlBC,KAAMpO,EAAYmO,EAAZnO,QACRqO,EAAU,CAAChN,YAAU+M,IAE3B,OADIpO,GAASqO,EAAQ/Q,KAAK,IAAD/B,OAAKyE,EAAQjE,IAAIkE,KAAgBpC,KAAK,MAAK,MAC7DwQ,EAAQxQ,KAAK,QACnBA,KAAK,MAER,GADAT,EAAOE,KAAK4Q,GACRvF,EAEF,OADAvL,EAAOE,KAAK,MACJlC,GACN,IAAK,OACHgC,EAAOE,KACLG,uBAAakL,EAAG2F,aAChB3F,EAAG4F,WAAWxS,KAAI,SAAAyS,GAAS,MAAI,CAACvR,0BAAgBuR,EAAU3R,QAASI,0BAAgBuR,EAAUnV,OAAO8E,OAAOX,UAAQK,KAAK,QAAMA,KAAK,OAErI,MACF,IAAK,QACHT,EAAOE,KAAKoQ,EAAqB/E,IAMvC,OAFAvL,EAAOE,KAAKC,kBAAQwQ,GAAUC,EAAcjS,IAAI2R,GAAsB7P,KAAK,OAC3ET,EAAOE,KAAKG,uBAAawQ,IAClB7Q,EAAOe,OAAOX,UAAQK,KAAK,KCnNpC,SAAS4Q,EAAmBpC,GAC1B,IAAQhT,EAAgBgT,EAAhBhT,KAAMU,EAAUsS,EAAVtS,MAEd,MADe,CAAC,IAADwB,OAAKlC,GAAQ,IAAKgI,YAAUtH,IAC7BoE,OAAOX,UAAQK,KAAK,K,wBCuB9B6Q,EAAc,CAClBjN,MAAakN,IACbC,QC5BF,SAAsBvC,GACpB,IAAQpR,EAAgBoR,EAAhBpR,KAAMgM,EAAUoF,EAAVpF,MAGd,MAAO,CAFQ1J,kBAAQtC,GACL8L,YAAWE,IACFpJ,KAAK,MDyBhCgR,OCtBF,SAAqBxC,GACnB,IAAQpR,EAAqCoR,EAArCpR,KAAMF,EAA+BsR,EAA/BtR,SAAUsB,EAAqBgQ,EAArBhQ,KAAM8J,EAAekG,EAAflG,GAAIiB,EAAWiF,EAAXjF,OAClC,MAAO,CAAC7J,kBAAQtC,GAAOsC,kBAAQxC,GAAWsG,YAAUhF,GAAOkB,kBAAQ4I,GAAKlJ,0BAAgBmK,IAASjJ,OAAOX,UAAQK,KAAK,MDqBrHzD,OAAa0U,IACblJ,OAAaE,IACbiJ,WF0FF,SAAyB1C,GACvB,IAAQpR,EAAwBoR,EAAxBpR,KAAMG,EAAkBiR,EAAlBjR,QAASiB,EAASgQ,EAAThQ,KACvB,MAAO,CAACkB,kBAAQtC,GAAOsC,kBAAQnC,GAAUiG,YAAUhF,IAAO8B,OAAOX,UAAQK,KAAK,ME3F9EmR,OE9BF,SAAqB3C,GACnB,IAAQrM,EAAgEqM,EAAhErM,QAASiP,EAAuD5C,EAAvD4C,KAAMhI,EAAiDoF,EAAjDpF,MAAO1E,EAA0C8J,EAA1C9J,MAAOJ,EAAmCkK,EAAnClK,QAAe+M,EAAoB7C,EAAI,KAAd8C,EAAU9C,EAAV8C,MACxD1G,EAAU,CAAC2G,YAAUF,GAAW,UAChCG,EAAarO,YAAahB,EAASiP,GASzC,OARAxG,EAAQnL,KAAK+R,GACTxT,MAAMC,QAAQmL,KACO,IAAjBA,EAAMlI,SAAsC,IAAtBkI,EAAM,GAAGqI,UAAoB7G,EAAQnL,KAAKmH,YAAYwC,KAEpFwB,EAAQnL,KAAKnC,gCAAsB,OAAQsJ,IAAawK,IACxDxG,EAAQnL,KAAKnC,gCAAsB,QAASkG,IAAWkB,IACvDkG,EAAQnL,KAAK8E,YAAwBD,EAAS,aAC9CsG,EAAQnL,KAAKiS,YAAWJ,IACjB1G,EAAQtK,OAAOX,UAAQK,KAAK,MFmBnC2R,KD5BF,SAAmBnD,GACjB,IAAQjR,EAAgCiR,EAAhCjR,QAAS9C,EAAuB+T,EAAvB/T,OAAQmX,EAAepD,EAAfoD,WAMzB,MALe,CACblS,kBAAQnC,GACR2L,YAAWzO,GACXmX,EAAW1T,IAAI0S,GAAoBtQ,OAAOX,UAAQK,KAAK,OAE3CM,OAAOX,UAAQK,KAAK,MCsBlC6R,QFQF,SAAsBrD,GACpB,IAAQpR,EAAqBoR,EAArBpR,KAAM5B,EAAegT,EAAfhT,KAAMyG,EAASuM,EAATvM,KACd2G,EAAM,CAAClJ,kBAAQtC,IACf0U,EAAe,CAACtW,GAGtB,OAFIyG,GAAM6P,EAAarS,KAAK,IAAD/B,OAAK8F,YAAUvB,GAAMjC,KAAK,MAAK,MAC1D4I,EAAInJ,KAAKqS,EAAa9R,KAAK,KACpB4I,EAAItI,OAAOX,UAAQK,KAAK,MEb/B+R,IFgBF,SAAsBvD,GACpB,IAAQpR,EAAsCoR,EAAtCpR,KAAM4U,EAAgCxD,EAAhCwD,MAAOC,EAAyBzD,EAAzByD,OAAQC,EAAiB1D,EAAjB0D,MAAOC,EAAU3D,EAAV2D,MAEpC,MADY,CAACH,EAAOtS,kBAAQtC,GAAO6U,EAAQ,KAAMG,EAAc,CAACF,IAAS,OAAQE,EAAcD,GAAQ,WAAYH,GACxG1R,OAAOX,UAAQK,KAAK,MElB/BqS,OAAaC,IACbC,GFmHF,SAAiB/D,GACf,IACgBgE,EASZhE,EATFiE,aACWC,EAQTlE,EARFmE,UACaC,EAOXpE,EAPFqE,YACSC,EAMPtE,EANFuE,QACA/T,EAKEwP,EALFxP,OACAgU,EAIExE,EAJFwE,GACAC,EAGEzE,EAHFyE,WACAnT,EAEE0O,EAFF1O,OACA1C,EACEoR,EADFpR,KAEImC,EAAS,CAACG,kBAAQtC,GAAOoG,YAAUgP,GAAW5S,uBAAaZ,GAAS,GAAFtB,OAAKwV,YAASJ,EAAO5S,KAAO4S,IAAOpV,OAAGuV,EAAW,IAAMvT,kBAAQsT,IAUvI,OATIJ,GACFrT,EAAOE,KACLmT,EAAW1U,KACT,SAAAiV,GAAM,MAAI,CAACzT,kBAAQyT,EAAO/V,MAAOoG,YAAU2P,EAAOV,cAAe,OAAQS,YAASC,EAAOC,KAAKlT,KAAOiT,EAAOC,MAAOD,EAAOE,WAAW/S,OAAOX,UAAQK,KAAK,QACzJA,KAAK,MAGP0S,GAAUnT,EAAOE,KAAK,OAAQ,GAAF/B,OAAKwV,YAASR,EAASxS,KAAOwS,IAAShV,OAAGuV,EAAW,KACrF1T,EAAOE,KAAKG,uBAAaE,IAClBP,EAAOe,OAAOX,UAAQK,KAAK,MExIlCoG,OAAakN,IACbC,KAAahF,EACbiF,SAAajF,EACbkF,QAAaH,IACbI,QFoFF,SAAsBlF,GACpB,IAAQpR,EAA0BoR,EAA1BpR,KAAMsW,EAAoBlF,EAApBkF,QAASlU,EAAWgP,EAAXhP,OACjBD,EAAS,CAACG,kBAAQtC,IAClByK,EAAO6L,EAAQxV,KAAI,SAAAyV,GACvB,IAAQC,EAA4ED,EAA5EC,GAAIpY,EAAwEmY,EAAxEnY,KAAM8M,EAAkEqL,EAAlErL,GAAIuL,EAA8DF,EAA9DE,SAAUlO,EAAoDgO,EAApDhO,SAAUmO,EAA0CH,EAA1CG,SAAU9U,EAAgC2U,EAAhC3U,OAAQqC,EAAwBsS,EAAxBtS,WAAY9D,EAAYoW,EAAZpW,QAClEwW,EAAc,CAAC,CAACH,EAAIpY,GAAM8E,OAAOX,UAAQK,KAAK,IAAKN,kBAAQ4I,GAAK5I,kBAAQmU,IAC9E,OAAQtW,GACN,IAAK,WACHwW,EAAYtU,KAAIiO,MAAhBqG,EAAW,CAAMlI,YAAelG,IAASjI,OAAAiO,EAAKrM,0BAAgBqU,EAAI5T,UAAQ,CAAEL,kBAAQoU,MAChFzS,GAAY0S,EAAYtU,KAAKC,kBAAQ2B,EAAW9D,SAAUiG,YAAUnC,EAAWnF,QACnF,MACF,IAAK,SACH6X,EAAYtU,KAAKC,kBAAQV,IACzB,MACF,IAAK,QACH+U,EAAYtU,KAAKC,kBAAQV,GAAS,IAAFtB,OAAM2D,EAAWnD,IAAI8V,KAAuBhU,KAAK,MAAK,MAK1F,OAAO+T,EAAYzT,OAAOX,UAAQK,KAAK,QACtCA,KAAK,GAADtC,OAAI8B,EAAM,MAEjB,OADAD,EAAOE,KAAKoI,GACLtI,EAAOS,KAAK,ME1GnBiU,IFmCF,SAAkBzF,GAChB,IAAQpR,EAAaoR,EAAbpR,KAAMiM,EAAOmF,EAAPnF,GACR7L,EAASkC,kBAAQtC,GACjBF,EAAWkC,0BAAgBiK,GACjC,MAAO,GAAP3L,OAAUF,EAAM,KAAAE,OAAIR,IEtCpBgX,OFqBF,SAAqB1F,GACnB,IAAQpR,EAAgBoR,EAAhBpR,KAAMgM,EAAUoF,EAAVpF,MACRwB,EAAU,GACV5L,EAAS,GAAHtB,OAAMN,GAAQA,EAAKO,cAAa,UAC5C,GAAIyL,EAAO,KACiB+K,EADjBC,EAAArF,EACY3F,GAAK,IAA1B,IAAAgL,EAAApX,MAAAmX,EAAAC,EAAA1X,KAAA0S,MAA4B,KACpBiF,EADSF,EAAAjY,MACWgC,IAAIgL,KAC9B0B,EAAQnL,KAAK4U,EAAWrU,KAAK,UAC9B,MAAAqP,GAAA+E,EAAA9E,EAAAD,GAAA,QAAA+E,EAAA7E,KAEH,MAAO,GAAP7R,OAAUsB,EAAM,KAAAtB,OAAIkN,EAAQ5K,KAAK,QE9BjC5E,KF1CF,SAAmBoT,GACjB,IACM8F,EAAmB9Q,YAAUgL,EAAKhQ,MACxC,MAAO,GAAPd,OAFa,OAEC,KAAAA,OAAI4W,IEwClBC,KFVF,SAAmB/F,GACjB,IAAQpR,EAAgBoR,EAAhBpR,KAAMgM,EAAUoF,EAAVpF,MACR5L,EAASkC,kBAAQtC,GACvB,MAAO,GAAPM,OAAUF,EAAM,KAAAE,OAAI0B,0BAAgBgK,KEQpCoL,IFsCF,SAAqBhG,GACnB,IAAQhQ,EAASgQ,EAAThQ,KAEFM,EAAM0E,YAAUhF,GACtB,MAAO,GAAPd,OAFe,MAEC,KAAAA,OAAIoB,IEzCpB2V,KAAa9F,EACb+F,OAAa/F,EACbnI,KAAaC,IACbkO,MAAa5E,EACb6E,OAAa7E,EACb8E,KGjDF,SAAmBrW,GACjB,IAAQgQ,EAAShQ,EAATgQ,KACR,OAAQA,EAAKpR,MACX,IAAK,SACH,OAAO4H,YAAYwJ,GACrB,IAAK,SACH,OAXN,SAAqBA,GACnB,IAAQpR,EAAeoR,EAAfpR,KAAMoB,EAASgQ,EAAThQ,KACd,MAAO,CAACkB,kBAAQtC,GAAOoG,YAAUhF,IAAOwB,KAAK,KASlC8U,CAAYtG,KH4CvBuG,MFGF,SAAoBvG,GAClB,IAAQpR,EAA8BoR,EAA9BpR,KAAM4X,EAAwBxG,EAAxBwG,MAAOD,EAAiBvG,EAAjBuG,MAAOhK,EAAUyD,EAAVzD,MACtBnC,EAAM,CAAClJ,kBAAQtC,GAAOsC,kBAAQsV,IAGpC,OAFID,GAAOnM,EAAInJ,KAAK,CAACG,uBAAamV,EAAMxX,SAAyB,WAAfwX,EAAM3X,MAAqB2X,EAAMvW,KAAK0C,OAAS,GAAK,KAAKZ,OAAOX,UAAQK,KAAK,IAAK+U,EAAMvW,KAAKN,KAAI,SAAA+W,GAAQ,OAAIzR,YAAUyR,MAAWjV,KAAK,OACrL+K,GAAOnC,EAAInJ,KAAKC,kBAAQqL,EAAM3N,MAAOsC,kBAAQqL,EAAMmK,QAASnK,EAAMvL,OAAQuL,EAAMvM,KAAKN,KAAI,SAAA+W,GAAQ,OAAIzR,YAAUyR,MAAWjV,KAAK,OAC5H4I,EAAItI,OAAOX,UAAQK,KAAK,OELjC,SAASqG,EAAWmI,GAClB,IAAKA,EAAM,MAAO,GAIlB,IAHA,IAAM2G,EAAMtE,EAAYrC,EAAKpR,MAC7BgY,EAA2C5G,EAAnC6G,EAAYD,EAAZC,aAAcC,EAAQF,EAARE,SAAUC,EAAMH,EAANG,OAC1BnQ,EAAM,CAACiQ,GAAgB,IAAKF,EAAI3G,IAC/BA,EAAKxG,OAAO,CACjB,IAAMwN,EAAU3E,EAAYrC,EAAKxG,MAAM5K,MACjCqY,EAAe/V,kBAAQ8O,EAAKkH,QAClCtQ,EAAI3F,KAAKgW,EAAcD,EAAQhH,EAAKxG,QACpCwG,EAAOA,EAAKxG,MAGd,OADA5C,EAAI3F,KAAK4V,GAAgB,IAAK9Q,YAAwB+Q,EAAU,YAAa5D,YAAW6D,IACjFnQ,EAAI9E,OAAOX,UAAQK,KAAK,KAGjC,SAASoS,EAAc5D,GAErB,IADA,IAAMpJ,EAAM,GACHvK,EAAI,EAAGyK,EAAMkJ,EAAKtN,OAAQrG,EAAIyK,IAAOzK,EAAG,CAC/C,IAAM8a,EAAUnH,EAAK3T,IAAM2T,EAAK3T,GAAGqF,IAAMsO,EAAK3T,GAAGqF,IAAMsO,EAAK3T,GAC5DuK,EAAI3F,KAAK4G,EAAWsP,IAEtB,OAAOvQ,EAAIpF,KAAK,S,80BIhFlB,SAAS4V,EAAuBpH,GAC9B,OAAKA,EACE,CAAC9O,kBAAQ8O,EAAKxP,QAASwE,YAAUgL,EAAKtS,OAAQwD,kBAAQ8O,EAAK1O,SADhD,GAgBpB,SAAS4R,EAAWJ,GAClB,OAAKA,EACDA,EAAMuE,OAbFA,GADgBrH,EAciB8C,GAbjCuE,MAAOpK,EAAW+C,EAAX/C,OACA,GAAH/N,OAAAiO,EAAOiK,EAAuBnK,IAAOE,EAAKiK,EAAuBC,KAC/DvV,OAAOX,UAAQK,KAAK,MAGpC,SAA0BsR,GACxB,IAAQwE,EAAqBxE,EAArBwE,UAAW5Z,EAAUoV,EAAVpV,MACnB,OAAqB,IAAjBA,EAAMgF,QAA8B,WAAd4U,EAA+BlY,oBAAU,SAAU4F,YAAUtH,EAAM,KACtF0B,oBAAU,QAAS1B,EAAMgC,IAAIsF,KAAWxD,KAAK,GAADtC,OAAkB,WAAdoY,EAAyB,IAAM,IAAEpY,OAAGgC,kBAAQoW,GAAU,OAMtGC,CAAiBzE,GAFL,GAbrB,IAA0B9C,EAChBqH,EAAOpK,I,6BCTjB,oMAIA,SAAS7G,EAAkB4J,GACzB,IAAQvM,EAAqBuM,EAArBvM,KAAM7E,EAAeoR,EAAfpR,KAAM2G,EAASyK,EAATzK,KACZvF,EAAiByD,EAAjBzD,KAAMwX,EAAW/T,EAAX+T,OACVpN,EAAM,GAAHlL,OAAMgC,kBAAQtC,GAAK,KAAAM,OAAI8F,YAAUhF,IAIxC,OAHIwX,IAAQpN,EAAM,GAAHlL,OAAMkL,EAAG,YAAAlL,OAAWgC,kBAAQsW,EAAOhX,QAAO,KAAAtB,OAAI8F,YAAUwS,EAAOxX,QAGvE,CAFPoK,EAAM,GAAHlL,OAAMkL,EAAG,KACIzE,YAAUJ,IACJzD,OAAOX,UAAQK,KAAK,KAa5C,SAASyF,EAAUjH,GACjB,IAAA2M,EAA8G3M,EAAtG4M,cAAM,IAAAD,EAAG,GAAEA,EAAEpL,EAAyFvB,EAAzFuB,QAASkS,EAAgFzT,EAAhFyT,OAAcgE,EAAkEzX,EAAxEA,KAAkBjB,EAAsDiB,EAAtDjB,QAASiC,EAA6ChB,EAA7CgB,OAAY0W,EAAiC1X,EAArC8J,GAAW6N,EAA0B3X,EAA1B2X,KAAIC,EAAsB5X,EAApB6M,kBAAU,IAAA+K,EAAG,GAAEA,EACjGlV,EAAyE+Q,EAAzE/Q,OAAQD,EAAiEgR,EAAjEhR,SAAUlC,EAAuDkT,EAAvDlT,YAAaoI,EAA0C8K,EAA1C9K,OAAQhG,EAAkC8Q,EAAlC9Q,MAAekV,EAAmBpE,EAA3BnS,OAClDjC,EAAM,GACI,MAAVqD,IAAgBrD,EAAMsD,EAAQ,GAAHzD,OAAMwD,EAAM,MAAAxD,OAAKyD,GAAUD,GACtDnC,IAAalB,EAAM,IAAHH,OAAOG,EAAG,MAC1BwY,GAAkBA,EAAenV,SAAQrD,GAAO,IAAJH,OAAQ2Y,EAAerW,KAAK,OAC5E,IAAIhB,EAASwE,YAAUyS,GACnBK,EAAa,KACbxW,EAAS,GAYb,MAXe,OAAXN,IACFR,EAAS,GAAHtB,OAAMgC,kBAAQnC,GAAQ,KAAAG,OAAIsB,GAChCc,EAAS,IACTwW,EAAa,IAAH5Y,OAAO8B,EAAO7B,cAAa,MAEvCmC,GAAUsL,EAAOlN,KAAI,SAAC0N,EAAO5C,GAAK,OAAK1L,gCAAsBsO,EAAOhM,eAAcyL,EAAWrC,OAAShJ,KAAK,KACvGmW,IAAMrW,GAAU,IAAJpC,OAAQyY,EAAK9X,SAAQ,KAAAX,OAAI8F,YAAU2S,EAAK3X,QACpD0X,IAAOpW,GAAU,OAAJpC,OAAW0B,0BAAgB8W,KACxCnW,IAASD,GAAU,IAAJpC,OAAQ4B,0BAAgBS,GAASC,KAAK,OAE1C,CAAChB,EAAQsX,EAAYnP,EAAQlG,EAAUkG,EA9BxD,SAAgC8K,GAC9B,IAAKA,IAAWA,EAAOsE,MAAO,MAAO,GACrC,OAAQtE,EAAOsE,OACb,IAAK,MACH,MAAO,KACT,IAAK,MACH,MAAO,QAuBYC,CAAuBvE,GACgCpU,EAAKiC,GACrEQ,OAAOX,UAAQK,KAAK,IAGpC,SAAS6F,EAAgB2I,GACvB,IAAQvM,EAAeuM,EAAfvM,KAAM7E,EAASoR,EAATpR,KACNoE,EAAuCS,EAAvCT,MAAkBiV,EAAqBxU,EAAhCyU,UAAqBC,EAAW1U,EAAX0U,OAC9BpX,EAAS,CAAC,GAAD7B,OAAIgC,kBAAQtC,GAAK,KAAAM,OAAIgC,kBAAQ8B,IAAU,OAAQ9B,kBAAQ+W,GAAWjT,YAAUmT,IAC3F,MAAO,GAAPjZ,OAAU6B,EAAOe,OAAOX,UAAQK,KAAK,KAAI,KAU3C,SAAS+F,EAAgByI,GACvB,IAAQvM,EAAeuM,EAAfvM,KAAM7E,EAASoR,EAATpR,KAERwZ,EADO,CAAC,QAAS,OAAQ,QAAS,YAAa,QAChC1Y,KAAI,SAAA1B,GAAG,OAV9B,SAAyBqa,GACvB,IAAKA,EAAK,MAAO,GACjB,IAAQzZ,EAAwByZ,EAAxBzZ,KAAMoC,EAAkBqX,EAAlBrX,OAAQtD,EAAU2a,EAAV3a,MAEtB,MADe,CAACwD,kBAAQtC,GAAOoC,EAAQgE,YAAUtH,IACnCoE,OAAOX,UAAQK,KAAK,KAMF8W,CAAgB7U,EAAKzF,OAAO8D,OAAOX,UAAQK,KAAK,MAChF,MAAO,GAAPtC,OAAUgC,kBAAQtC,GAAK,KAAAM,OAAIkZ,EAAO,KAGpC,SAASzQ,EAAU3H,GACjB,IAAQyD,EAAqEzD,EAArEyD,KAAMzG,EAA+DgD,EAA/DhD,KAAMub,EAAyDvY,EAAzDuY,iBAAkBhY,EAAuCP,EAAvCO,YAAagF,EAA0BvF,EAA1BuF,KAAMhE,EAAoBvB,EAApBuB,QAASD,EAAWtB,EAAXsB,OAC5DkX,EAAa1X,0BAAgBS,GAASC,KAAK,KAC3CkE,EAAUC,YAAUJ,GACpBkT,EAAYzT,YAAU1D,GAC5B,IAAKmC,EAAM,MAAO,CAACzG,EAAM0I,GAAS5D,OAAOX,UAAQK,KAAK,KACtD,IAAIoE,EAAY5F,EAAK4F,WAAa,KACZ,SAAlB1E,kBAAQlE,KAAkB4I,EAAY,KAC1C,IAAIvG,EAAM,CAACrC,GAKX,OAJAqC,EAAI4B,MAA0B,IAArBsX,EAA6B,IAAM,KAC5ClZ,EAAI4B,KAAK+D,YAAUvB,GAAMjC,KAAKoE,KACL,IAArB2S,GAA4BlZ,EAAI4B,KAAK,KACzC5B,EAAM,CAACA,EAAImC,KAAK,IAAKiX,GAAW3W,OAAOX,UAAQK,KAAK,KAC7C,CAACjB,EAAc,IAAHrB,OAAOG,EAAG,KAAMA,EAAKmZ,EAAY9S,GAAS5D,OAAOX,UAAQK,KAAK,O,6BClFnF,4JAQA,SAAS6D,EAAerF,GACtB,IAAKA,EAAM,MAAO,GAClB,IACEhB,EAQEgB,EARFhB,OACoB0Z,EAOlB1Y,EAPF2Y,mBACaC,EAMX5Y,EANF6Y,YACeC,EAKb9Y,EALF+Y,cAA2Bha,EAKzBiB,EALyBjB,QACfia,EAIVhZ,EAJFiZ,WACAzY,EAGER,EAHFQ,OACA0Y,EAEElZ,EAFFkZ,SACAlY,EACEhB,EADFgB,OAEEhE,EAAO,GACPyF,EAAW,GACf,OAAQyW,GACN,IAAK,SACHzW,EAAW,CAACuL,YAAsBhO,IAClC,MACF,IAAK,QACHyC,EAAW0W,YAAwBnZ,GACnChD,EAAOgD,EAAKkZ,GACZ,MACF,IAAK,QACL,IAAK,SACHlc,EAAO4D,0BAAgBZ,EAAKkZ,IAC5B,MACF,IAAK,YACL,IAAK,WACL,IAAK,SACL,IAAK,OACHlc,EAAO4D,0BAAgBZ,EAAKkZ,IAC5B,MACF,IAAK,YACL,IAAK,OACL,IAAK,eACHlc,EAAO,CAACgE,EAAQE,kBAAQlB,EAAKkZ,KAAYpX,OAAOX,UAAQK,KAAK,KAC7D,MACF,IAAK,aACHxE,EAAO4D,0BAAgBZ,EAAKkZ,IAC5BzW,EAAW,CAAC+S,YAAsBkD,IAClC,MACF,IAAK,MACH1b,EAAO4D,0BAAgBZ,EAAKkZ,IAC5B,MACF,QACElc,EAAO,CAACgE,EAAQhB,EAAKkZ,IAAWpX,QAAO,SAAAxB,GAAG,OAAY,OAARA,KAAckB,KAAK,KAarE,MAVmB,CACjBN,kBAAQlC,GACRkC,kBAAQnC,GACRmC,kBAAQ4X,GACRE,GAAapV,YAAeoV,GAC5B9X,kBAAQV,GACRxD,GAAQA,EAAKoc,OACb3W,EAASX,OAAOX,UAAQK,KAAK,KAC7BoX,GAAc,GAAJ1Z,OAAOgC,kBAAQ0X,EAAW7Z,SAAQ,KAAAG,OAAI0E,YAAegV,EAAW1O,UAE1DpI,OAAOX,UAAQK,KAAK,KAuBxC,SAAS6X,EAAehB,GACtB,IAAMiB,EAAajB,EAAG,SAAY,CAACnX,kBAAQmX,EAAG,QAAStZ,SAAUiG,YAAUqT,EAAG,QAAS3a,QAAQ8D,KAAK,KACpG,MAAO,CAACN,kBAAQmX,EAAIza,MAAOya,EAAIrb,KAAMwF,wBAAc6V,EAAIzZ,MAAO0a,GAAYxX,OAAOX,UAAQK,KAAK,KAiDhG,SAAS8Q,EAAWtC,GAClB,IAAAuJ,EAA8BvJ,EAAtBjR,QACR,YADe,IAAAwa,EAAG,QAAOA,GAEvB,IAAK,YACH,OAnBN,SAA6BvJ,GAC3B,IAAQvM,EAAoCuM,EAApCvM,KAAMzD,EAA8BgQ,EAA9BhQ,KAAMjB,EAAwBiR,EAAxBjR,QAAS/B,EAAegT,EAAfhT,KAAM4B,EAASoR,EAATpR,KACrB4a,EAAsB/V,EAA5BzD,KAAgB8F,EAAYrC,EAAZqC,QAUxB,MATe,CACb5E,kBAAQtC,GACRsC,kBAAQnC,GACR,CACE,CAAC6B,0BAAgB5D,EAAK+N,QAASnK,0BAAgB5D,EAAKA,OAAO8E,OAAOX,UAAQK,KAAK,KAAI,IAAAtC,OAC/Esa,EAAS9Z,IAAI2Z,GAAgB7X,KAAK,OAAKtC,OAAG4G,EAAU,CAAC,SAAU,KAAMA,EAAQpG,IAAI2Z,GAAgB7X,KAAK,OAAOA,KAAK,KAAO,GAAE,MAC/HM,OAAOX,UAAQK,KAAK,IACtB6D,EAAerF,IAEH8B,OAAOX,UAAQK,KAAK,KAOvBiY,CAAoBzJ,GAC7B,IAAK,QACH,OA7EN,SAAyBA,GACvB,IAAQpR,EAA2BoR,EAA3BpR,KAAMgM,EAAqBoF,EAArBpF,MAAK8O,EAAgB1J,EAAdhQ,YAAI,IAAA0Z,EAAG,GAAEA,EAK9B,MADe,CAHAxY,kBAAQtC,GAGC,QAFNwJ,YAAYwC,GACb5K,EAAKN,IAAIsF,KAC2BxD,KAAK,OAC5CM,OAAOX,UAAQK,KAAK,KAuEvBmY,CAAgB3J,GACzB,IAAK,SACH,OAtDN,SAA0BA,GACxB,IAAQhQ,EAAgCgQ,EAAhChQ,KAAMjB,EAA0BiR,EAA1BjR,QAASgM,EAAiBiF,EAAjBjF,OAAQnM,EAASoR,EAATpR,KAE/B,MADe,CAACsC,kBAAQtC,GAAOsC,kBAAQnC,GAAU6B,0BAAgBmK,GAAS1F,EAAerF,IAC3E8B,OAAOX,UAAQK,KAAK,KAmDvBoY,CAAiB5J,GAC1B,IAAK,SACL,IAAK,OACH,OAnDN,SAA8BA,GAC5B,IAAQhQ,EAA8BgQ,EAA9BhQ,KAAMjB,EAAwBiR,EAAxBjR,QAAS/B,EAAegT,EAAfhT,KAAM4B,EAASoR,EAATpR,KAO7B,MANe,CACbsC,kBAAQtC,GACRsC,kBAAQnC,GACR,CAAC6B,0BAAgB5D,EAAK+N,QAASnK,0BAAgB5D,EAAKA,OAAO8E,OAAOX,UAAQK,KAAK,KAC/E6D,EAAerF,IAEH8B,OAAOX,UAAQK,KAAK,KA2CvBqY,CAAqB7J,GAC9B,IAAK,WACH,OA1CN,SAA4BA,GAC1B,IAAQvM,EAAoCuM,EAApCvM,KAAMzD,EAA8BgQ,EAA9BhQ,KAAMjB,EAAwBiR,EAAxBjR,QAAS/B,EAAegT,EAAfhT,KAAM4B,EAASoR,EAATpR,KAUnC,MATe,CACbsC,kBAAQtC,GACRsC,kBAAQnC,GACR,CACE,CAAC6B,0BAAgB5D,EAAK+N,QAASnK,0BAAgB5D,EAAKA,OAAO8E,OAAOX,UAAQK,KAAK,KAC/EiC,GAAQ,IAAJvE,OAAQuE,EAAKzD,KAAOyD,EAAKzD,KAAKN,IAAI2Z,GAAgB7X,KAAK,MAAQ,GAAE,MACrEM,OAAOX,UAAQK,KAAK,IACtB6D,EAAerF,IAEH8B,OAAOX,UAAQK,KAAK,KA+BvBsY,CAAmB9J,GAC5B,IAAK,OACH,OA7EN,SAAwBA,GACtB,IAAQpR,EAA4DoR,EAA5DpR,KAAM+E,EAAsDqM,EAAtDrM,QAASoW,EAA6C/J,EAA7C+J,WAAYxQ,EAAiCyG,EAAjCzG,OAAQyQ,EAAyBhK,EAAzBgK,KAAYC,EAAajK,EAAI,KAGlEjP,EAAS,CAFAG,kBAAQtC,GAEC,OADP8L,YAAWsP,IAM5B,OAJIrW,GAAS5C,EAAOE,KAAK,IAAD/B,OAAKyE,EAAQjE,IAAIkE,KAAgBpC,KAAK,MAAK,MAC/DuY,GAAYhZ,EAAOE,KAAK,QAAD/B,OAAS6a,EAAWra,IAAIwB,WAASM,KAAK,QACjET,EAAOE,KAAK,KAAMwI,YAAYF,IAC1B0Q,GAAUlZ,EAAOE,KAAKC,kBAAQ+Y,IAC3BlZ,EAAOe,OAAOX,UAAQK,KAAK,KAoEvB0Y,CAAelK,M,o7BClJ5B,SAASmK,EAAeC,GACtB,IAAKA,EAAW,MAAO,GACvB,IAAQrb,EAAkBqb,EAAlBrb,QAASH,EAASwb,EAATxb,KACjB,MAAO,CAACG,EAAQI,cAAe+B,kBAAQtC,IAGzC,SAASyb,EAAiBC,GACxB,GAAKA,EAAL,CACA,IAAQ1b,EAAuB0b,EAAvB1b,KAAMoB,EAAiBsa,EAAjBta,KAAMgB,EAAWsZ,EAAXtZ,OACduZ,EAAY3b,EAAKO,cACjBqb,EAAgB,GAEtB,OADAA,EAAcvZ,KAAKsZ,GACXA,GACN,IAAK,iBACCvZ,GAAQwZ,EAAcvZ,KAAKD,GAC/BwZ,EAAcvZ,KAAKG,uBAAapB,IAChC,MACF,IAAK,QACL,IAAK,OACHwa,EAAc9X,OAAS,EACvB8X,EAAcvZ,KAAIiO,MAAlBsL,EAAarN,EAASgN,EAAeG,KACrC,MACF,IAAK,cACHE,EAAcvZ,KAAKjB,GACnB,MACF,IAAK,UACL,IAAK,YACH,MACF,IAAK,UACHwa,EAAcC,QACdD,EAAcvZ,KAAKkC,uBAAamX,IAChC,MACF,IAAK,mBACHE,EAAcvZ,KAAKD,EAAQE,kBAAQlB,EAAKtC,OAAQyE,4BAAkBnC,EAAKsM,KACvE,MACF,QACEkO,EAAcvZ,KAAKD,EAAQI,uBAAapB,IAG5C,OAAOwa,EAAc1Y,OAAOX,UAAQK,KAAK,MAG3C,SAASkZ,EAAqBC,GAC5B,OAAKA,EACEA,EAAajb,IAAI2a,GADE,GAI5B,SAASlB,EAAwByB,GAC/B,IACmBC,EAKfD,EALFE,gBACYV,EAIVQ,EAJFG,WAAUC,EAIRJ,EAHFK,cAAeC,OAAY,IAAAF,EAAG,GAAEA,EAChCnY,EAEE+X,EAFF/X,WACAyJ,EACEsO,EADFtO,GAAU2N,EACRW,EAAe,KACbnY,EAAW,GAEjB,GADAA,EAASxB,KAAIiO,MAAbzM,EAAQ0K,EAASgN,EAAeC,KAC5BvX,GAAcA,EAAWH,OAAQ,CACnC,IAAMyY,EAA4C,UAA5Bja,kBAAQ2Z,GAA8B,IAAH3b,OAAO8F,YAAUnC,EAAW,IAAG,SAAA3D,OAAU2D,EAAWnD,KAAI,SAAAqF,GAAG,OAAIC,YAAUD,MAAMvD,KAAK,MAAK,KAClJiB,EAASxB,KAAKka,GAKhB,OAHA1Y,EAASxB,KAAKyZ,EAAqBQ,GAAc1Z,KAAK,MAClDyY,GAAUxX,EAASxB,KAAK,SAAD/B,OAAUwb,EAAqBT,GAAUzY,KAAK,MAAK,MAC1E8K,GAAI7J,EAASxB,KAAK,OAAD/B,OAAQoN,EAAE,MACxB7J,EAGT,SAAS2Y,EAAqBR,GAC5B,IAAMS,EAAW,GACTtc,EAAmB6b,EAAnB7b,QAASyL,EAAUoQ,EAAVpQ,MAIjB,OAHA6Q,EAASpa,KAAKC,kBAAQnC,IACtBsc,EAASpa,KAAKuJ,GACd6Q,EAASpa,KAAIiO,MAAbmM,EAAQlO,EAASgM,EAAwByB,KAClCS,EAASvZ,OAAOX,UAAQK,KAAK,O,6BClFtC,iFAgBA,SAAS8Z,EAAgBC,GACvB,GAAKA,GACgBA,EAAbC,SACR,CACA,IAAQzc,EAAkBwc,EAAlBxc,QAASiB,EAASub,EAATvb,KACXe,EAAS,GACT0a,EAAWva,kBAAQnC,GACzB,OAAQ0c,GACN,IAAK,MACH1a,EAAOE,KAAKjB,EAAKN,IAAI8I,KAAUhH,KAAK,OACpC,MACF,QACET,EAAOE,KAAKwa,EAA0B,iBAATzb,EAAoBY,0BAAgBZ,GAAQgF,YAAUhF,IAEvF,OAAOe,EAAOe,OAAOX,UAAQK,KAAK,MAyBpC,SAASiI,EAAYuG,GACnB,IACiB0L,EAmBb1L,EAnBF2L,cACAhY,EAkBEqM,EAlBFrM,QACAkC,EAiBEmK,EAjBFnK,SACK+V,EAgBH5L,EAAI,IAfN4C,EAeE5C,EAfF4C,KAAIiJ,EAeF7L,EAdF8L,mBAAoBC,OAAS,IAAAF,EAAG,GAAEA,EACpBG,EAaZhM,EAbFiM,aACAC,EAYElM,EAZFkM,QACA1E,EAWExH,EAXFwH,OAAM2E,EAWJnM,EAVFuL,YAAI,IAAAY,EAAG,GAAEA,EACTrJ,EASE9C,EATF8C,MACA5C,EAQEF,EARFE,QACApK,EAOEkK,EAPFlK,QACoBvF,EAMlByP,EANFoM,mBACAC,EAKErM,EALFqM,QACAC,EAIEtM,EAJFsM,IACQC,EAGNvM,EAHFwM,OACM3J,EAEJ7C,EAAI,KADN9J,EACE8J,EADF9J,MAEIkG,EAAU,CAAC2G,YAAUF,GAAW,SAAU3R,kBAAQwa,IACxDtP,EAAQnL,KAAKb,mBAASkc,IAClB9c,MAAMC,QAAQyQ,IAAU9D,EAAQnL,KAAKiP,EAAQ1O,KAAK,MACtD4K,EAAQnL,KAzEV,SAAuB4E,GACrB,GAAKA,EAAL,CACA,GAAwB,iBAAbA,EAAuB,OAAOA,EACzC,IAAQjH,EAAkBiH,EAAlBjH,KAAM+E,EAAYkC,EAAZlC,QACR5C,EAAS,CAACG,kBAAQtC,IAExB,OADI+E,GAAS5C,EAAOE,KAAK,IAAD/B,OAAKyE,EAAQjE,IAAIkE,KAAgBpC,KAAK,MAAK,MAC5DT,EAAOe,OAAOX,UAAQK,KAAK,MAmErBib,CAAc5W,GAAWlB,YAAahB,EAASiP,IAC5D,IAAQ4I,EAAaD,EAAbC,SACJkB,EAAU,GACVlB,IAAUkB,EAAU5d,gCAAsB,OAAQwc,EAAiBC,IACtD,WAAbC,GAAuBpP,EAAQnL,KAAKyb,GAExCtQ,EAAQnL,KAAKnC,gCAAsB,OAAQsJ,IAAawK,IACvC,SAAb4I,GAAqBpP,EAAQnL,KAAKyb,GACtC,IAAApP,EAA0ByO,GAAa,GAA/Bhd,EAAOuO,EAAPvO,QAASiB,EAAIsN,EAAJtN,KACjBoM,EAAQnL,KAAKnC,gCAAsBC,EAASiG,IAAWhF,IACvDoM,EAAQnL,KAAKnC,gCAAsB,QAASkG,IAAWkB,IACvDkG,EAAQnL,KAAK7B,oBAAU,WAAY8J,YAAegT,GAAS1a,KAAK,QAChE4K,EAAQnL,KAAKnC,gCAAsB,SAAUkG,IAAWwS,IACxDpL,EAAQnL,KAAKnC,gCAAsB,UAAWkG,IAAWqX,IACzDjQ,EAAQnL,KAAKnC,gCAAsB,SAAUkG,IAAWuX,IACxDnQ,EAAQnL,KAAK8E,YAAwBD,EAAS,aAC9CsG,EAAQnL,KAAKiS,YAAWJ,IACxB1G,EAAQnL,KAAKC,kBAAQ8a,IACJ,QAAbR,GAAoBpP,EAAQnL,KAAKyb,GACrCtQ,EAAQnL,KApDV,SAAqB+O,GACnB,GAAKA,EAAL,CACA,IAAQhQ,EAAwBgQ,EAAxBhQ,KAAMjB,EAAkBiR,EAAlBjR,QAASH,EAASoR,EAATpR,KACjBmC,EAAS,CAACG,kBAAQtC,GAAOsC,kBAAQnC,IACvC,OAAKiB,EACE,GAAPd,OAAU6B,EAAOS,KAAK,KAAI,KAAAtC,OAAI8F,YAAUhF,GAAK,KAD3Be,EAAOS,KAAK,MAgDjBmb,CAAYf,IACzB,IAAMxR,EAAMgC,EAAQtK,OAAOX,UAAQK,KAAK,KACxC,OAAOjB,EAAc,IAAHrB,OAAOkL,EAAG,KAAMA,I,6pCC3FpC,SAASwS,EAASC,GAChB,IAAKA,GAAwB,IAAhBA,EAAKna,OAAc,MAAO,GACvC,IACsBiT,EADhBvJ,EAAU,GAAEwJ,EAAArF,EACAsM,GAAI,IAAtB,IAAAjH,EAAApX,MAAAmX,EAAAC,EAAA1X,KAAA0S,MAAwB,KAAboF,EAAGL,EAAAjY,MACJkN,EAAyBoL,EAAzBpL,MAAOV,EAAkB8L,EAAlB9L,OAAQxM,EAAUsY,EAAVtY,MAEjBof,EAAU,CADJ,CAAClS,EAAOV,GAAQpI,OAAOX,UAAQzB,KAAI,SAAA2J,GAAI,OAAIzI,0BAAgByI,MAAO7H,KAAK,MAE/ElB,EAAM,GACN5C,IACF4C,EAAM0E,YAAUtH,GAChBof,EAAQ7b,KAAK,IAAKX,IAEpB8L,EAAQnL,KAAK6b,EAAQhb,OAAOX,UAAQK,KAAK,OAC1C,MAAAqP,GAAA+E,EAAA9E,EAAAD,GAAA,QAAA+E,EAAA7E,IACD,OAAO3E,EAAQ5K,KAAK,MAGtB,SAASsS,EAAY9D,GACnB,IAAQ4C,EAAuE5C,EAAvE4C,KAAMhI,EAAiEoF,EAAjEpF,MAAOoL,EAA0DhG,EAA1DgG,IAAK9P,EAAqD8J,EAArD9J,MAAOJ,EAA8CkK,EAA9ClK,QAAe+M,EAA+B7C,EAAI,KAAzB8C,EAAqB9C,EAArB8C,MAAOhP,EAAckM,EAAdlM,UAYjE,MAXgB,CACdiP,YAAUF,GACV,SACAzK,YAAYwC,GACZ9L,gCAAsB,MAAO8d,EAAU5G,GACvClX,gCAAsB,OAAQsJ,IAAawK,GAC3C9T,gCAAsB,QAASkG,IAAWkB,GAC1CH,YAAwBD,EAAS,YACjCoN,YAAWJ,GACXjP,yBAAeC,IAEFhC,OAAOX,UAAQK,KAAK,O,6BCxCrC,4DAIA,SAASmE,EAAUJ,GACjB,GAAKA,EAAL,CACA,IAAiCwX,EAAsCxX,EAA/DyX,wBAAuChd,EAAwBuF,EAAxBvF,KAAMjB,EAAkBwG,EAAlBxG,QAASH,EAAS2G,EAAT3G,KACxD2b,EAAYrZ,kBAAQtC,GAC1B,GAAkB,WAAd2b,EAAwB,MAAO,QAAPrb,OAAe+d,YAAkBF,IAC7D,GAAkB,cAAdxC,EAA2B,CAC7B,IAAI2C,EAAW,GAAHhe,OAAMgC,kBAAQtC,GAAK,KAAAM,OAAIgC,kBAAQnC,IACrC0E,EAAOuB,YAAUhF,GAEvB,OADIyD,IAAMyZ,EAAW,GAAHhe,OAAMge,EAAQ,KAAAhe,OAAIuE,EAAKjC,KAAK,MAAK,MAC5C0b,EAET,MAAM,IAAIvd,MAAM,wB,6BCflB,2DAOA,SAASoT,EAAUkH,GACjB,GAAKA,GAAgC,IAApBA,EAASvX,OAA1B,CACA,IAAMya,EAAclD,EAAS,GAAGmD,UAAY,aAAe,GACrDC,EAAcpD,EAASva,KAAI,SAAA4d,GAC/B,IAAQtgB,EAAwBsgB,EAAxBtgB,KAAMgT,EAAkBsN,EAAlBtN,KAAMrM,EAAY2Z,EAAZ3Z,QACduG,EAAS1K,MAAMC,QAAQkE,GAAW,IAAHzE,OAAOyE,EAAQjE,IAAIkE,KAAgBpC,KAAK,MAAK,KAAM,GACxF,MAAO,GAAPtC,OAAwB,YAAdlC,EAAK4B,KAAqBgC,0BAAgB5D,EAAKU,OAAS0D,uBAAapE,IAAKkC,OAAGgL,EAAM,SAAAhL,OAAQ8F,YAAUgL,GAAK,QACnHxO,KAAK,MAER,MAAO,QAAPtC,OAAeie,GAAWje,OAAGme,M,g6BCO/B,SAAS7H,EAAsB3S,GAC7B,IAAKA,EAAY,MAAO,GACxB,IAAQqW,EAAarW,EAAbqW,SACR,OAAQA,GACN,IAAK,SACH,OAAOlL,YAAsBnL,GAC/B,IAAK,QACH,OAAOuY,YAAqBvY,GAC9B,IAAK,aACH,OAAOoM,YAA0BpM,GACnC,IAAK,WACH,MAAO,CAAC3B,kBAAQ2B,EAAWrC,QAASwE,YAAUnC,EAAWnF,QAAQoE,OAAOX,UAAQK,KAAK,KACvF,QACE,MAAM,IAAI7B,MAAM,sBAADT,OAAuBga,EAAQ,WA6LpD,SAASqE,EAAkBvN,GACzB,IACElG,EAEEkG,EAFFlG,GAAI0T,EAEFxN,EAFEwN,OAAQ5e,EAEVoR,EAFUpR,KAAMG,EAEhBiR,EAFgBjR,QAAS0U,EAEzBzD,EAFyByD,OACPiF,EAClB1I,EADF2I,mBAEIvO,EAAM,CACVlJ,kBAAQtC,GACRsC,kBAAQnC,GACR,CAAC6B,0BAAgB4c,EAAOzS,QAASnK,0BAAgB4c,EAAOxgB,OAAO8E,OAAOX,UAAQK,KAAK,KACnFN,kBAAQ4I,GACRtH,wBAAciR,IAEhB,GAAIiF,GAAoBA,EAAiBhW,OAAS,EAAG,CACnD,IACyCiT,EADnCwF,EAAgB,GAAEvF,E,goBAAArF,CACCmI,GAAgB,IAAzC,IAAA9C,EAAApX,MAAAmX,EAAAC,EAAA1X,KAAA0S,MAA2C,KAAhC/N,EAAU8S,EAAAjY,MACb+f,EAAiB5a,EAAWjE,KAClC,OAAQ6e,GACN,IAAK,UACHtC,EAAcla,KAAKH,0BAAgB+B,GAAYrB,KAAK,MACpD,MACF,IAAK,UACH2Z,EAAcla,KAAKC,kBAAQuc,GAAiBzY,YAAUnC,EAAWnF,QACjE,MACF,IAAK,aACHyd,EAAcla,KAAKgO,YAA0BpM,MAGlD,MAAAgO,GAAA+E,EAAA9E,EAAAD,GAAA,QAAA+E,EAAA7E,IACD3G,EAAInJ,KAAKka,EAAcrZ,OAAOX,UAAQK,KAAK,MAE7C,OAAO4I,EAAItI,OAAOX,UAAQK,KAAK,KAwBjC,SAASkc,EAA8B1N,GACrC,OAAIA,EAAKvN,SAAiBD,wBAAcwN,GACjC,CAACpP,0BAAgBoP,EAAKnF,IAAKjK,0BAAgBoP,EAAKjF,QAASnK,0BAAgBoP,EAAKpF,QAAQ9I,OAAOX,UAAQK,KAAK,KAYnH,SAASmc,EAA0B3N,GACjC,IAAQpR,EAASoR,EAATpR,KACR,OAAQA,GACN,IAAK,KACH,MAAO,CAACsC,kBAAQtC,GAAOoR,EAAKhP,OAAQ6G,YAAWmI,EAAKkF,SAAUhU,kBAAQ8O,EAAK4N,OAAQhK,YAAc5D,EAAKhQ,MAAOkB,kBAAQ8O,EAAKzN,KAAMyN,EAAKhP,QAAQc,OAAOX,UAAQK,KAAK,KACnK,IAAK,MACH,MAAO,CAACN,kBAAQtC,GAAOoR,EAAK6N,UAAW3c,kBAAQ8O,EAAKtS,OAASsS,EAAKtS,MAAM8C,QAASwP,EAAKtS,OAASsS,EAAKtS,MAAMsC,KAAKN,IAAIsF,KAAWxD,KAAK,OAAOM,OAAOX,UAAQK,KAAK,KAChK,QACE,OAAOwD,YAAUgL,IAGvB,SAAS8N,EAAoB9N,GAC3B,IAAQpR,EAA+DoR,EAA/DpR,KAAMqW,EAAyDjF,EAAzDiF,QAASlW,EAAgDiR,EAAhDjR,QAAS/B,EAAuCgT,EAAvChT,KAAMyG,EAAiCuM,EAAjCvM,KAAMsa,EAA2B/N,EAA3B+N,QAAS7N,EAAkBF,EAAlBE,QAAS8N,EAAShO,EAATgO,KACxD5T,EAAM,CAAClJ,kBAAQtC,GAAOsC,kBAAQ+T,GAAU/T,kBAAQnC,IAChDkf,EAAe,CAACrd,0BAAgB5D,EAAK+N,QAAS/N,EAAKA,MAAM8E,OAAOX,UAAQK,KAAK,KAC7E0c,EAAUza,EAAK/D,IAAI2Z,KAAgBvX,OAAOX,UAAQK,KAAK,MAE7D,OADA4I,EAAInJ,KAAK,GAAD/B,OAAI+e,EAAY,KAAA/e,OAAIgf,EAAO,KAzBrC,SAAoClO,GAClC,IAAQpR,EAAwBoR,EAAxBpR,KAAMG,EAAkBiR,EAAlBjR,QAASiB,EAASgQ,EAAThQ,KAMvB,MALY,CACVkB,kBAAQtC,GACRsC,kBAAQnC,GACRS,MAAMC,QAAQO,GAAQ,IAAHd,OAAOc,EAAKN,IAAIsO,KAAuBxM,KAAK,MAAK,KAAMkc,EAA8B1d,IAE/F8B,OAAOX,UAAQK,KAAK,KAkBS2c,CAA2BJ,GAAU7N,EAAQxQ,IAAIie,GAA2Bnc,KAAK,KAAMwc,GACxH5T,EAAItI,OAAOX,UAAQK,KAAK,KAGjC,SAAS4c,EAAqBpO,GAC5B,IAAQpR,EAAwBoR,EAAxBpR,KAAMoC,EAAkBgP,EAAlBhP,OAAQtD,EAAUsS,EAAVtS,MAChB0M,EAAM,CAAClJ,kBAAQtC,GAAOoC,GAC5B,OAAQE,kBAAQtC,IACd,IAAK,QACHwL,EAAInJ,KAAK,CAACL,0BAAgBlD,EAAMqN,QAASrN,EAAMV,MAAM8E,OAAOX,UAAQK,KAAK,MACzE,MACF,IAAK,QACL,IAAK,SACH4I,EAAInJ,KAAKuB,wBAAc9E,IACvB,MACF,QACE0M,EAAInJ,KAAK+D,YAAUtH,IAGvB,OAAO0M,EAAItI,OAAOX,UAAQK,KAAK,KAUjC,SAASiR,EAAYzC,GACnB,IAAQjR,EAAYiR,EAAZjR,QACJqL,EAAM,GACV,OAAQrL,EAAQ4B,eACd,IAAK,YACHyJ,EAbN,SAA8B4F,GAC5B,IAAQpR,EAAgDoR,EAAhDpR,KAAMqW,EAA0CjF,EAA1CiF,QAASlW,EAAiCiR,EAAjCjR,QAAS/B,EAAwBgT,EAAxBhT,KAAMyG,EAAkBuM,EAAlBvM,KAAMyM,EAAYF,EAAZE,QACtC9F,EAAM,CAAClJ,kBAAQtC,GAAOsC,kBAAQ+T,GAAU/T,kBAAQnC,IAChDkf,EAAe,CAACrd,0BAAgB5D,EAAK+N,QAAS/N,EAAKA,MAAM8E,OAAOX,UAAQK,KAAK,KAC7E0c,EAAU,GAAHhf,OAAMuE,EAAKzD,KAAKN,IAAI2Z,KAAgB7X,KAAK,OAAKtC,OAAGuE,EAAKqC,QAAU,CAAC,SAAU,KAAMrC,EAAKqC,QAAQpG,IAAI2Z,KAAgB7X,KAAK,OAAOA,KAAK,KAAO,IAEvJ,OADA4I,EAAInJ,KAAK,GAAD/B,OAAI+e,EAAY,KAAA/e,OAAIgf,EAAO,SAAAhf,OAASgR,EAAQxQ,IAAI0e,GAAsB5c,KAAK,MAAK,MACjF4I,EAAItI,OAAOX,UAAQK,KAAK,KAOrB6c,CAAqBrO,GAC3B,MACF,IAAK,QACH5F,EAlTN,SAA0B4F,GACxB,IACEpR,EAMEoR,EANFpR,KAAMG,EAMJiR,EANIjR,QAAS6L,EAMboF,EANapF,MAAO0T,EAMpBtO,EANoBsO,KAAMxU,EAM1BkG,EAN0BlG,GAAIyU,EAM9BvO,EAN8BuO,UACjBzF,EAKb9I,EALF+I,cACoBL,EAIlB1I,EAJF2I,mBACe6F,EAGbxO,EAHFyO,cACgBC,EAEd1O,EAFF2O,eACYC,EACV5O,EADF6O,WAEIzU,EAAM,CAAClJ,kBAAQtC,GAAOsC,kBAAQqd,GAAYrd,kBAAQnC,GAAUmC,kBAAQ4X,GAAc1Q,YAAYwC,IACpG,GAAI0T,EAAM,CACR,IAAcQ,EAA+BR,EAArC1f,KAAuBmgB,EAAcT,EAArB1T,MAClBoU,EAAgB5W,YAAY2W,GAElC,OADA3U,EAAInJ,KAAKC,kBAAQ4d,GAAWE,GACrB5U,EAAItI,OAAOX,UAAQK,KAAK,KAUjC,OARIkX,GACFtO,EAAInJ,KAAK,IAAD/B,OAAKwZ,EAAiBhZ,IAAI8V,GAAuBhU,KAAK,MAAK,MAEjEgd,GACFpU,EAAInJ,KAAKud,EAAa9e,IAAI8M,KAAkBhL,KAAK,MAEnD4I,EAAInJ,KAAKC,kBAAQwd,GAAgBxd,kBAAQ4I,IACrC8U,GAAWxU,EAAInJ,KAAK4G,YAAW+W,IAC5BxU,EAAItI,OAAOX,UAAQK,KAAK,KA0RrByd,CAAiBjP,GACvB,MACF,IAAK,UACH5F,EAAwB,eAAlB4F,EAAKkJ,SAvPjB,SAAsClJ,GACpC,IACEkP,EASElP,EATFkP,WAA2BC,EASzBnP,EATUoP,cACZC,EAQErP,EARFqP,WACA/b,EAOE0M,EAPF1M,OAAQ+P,EAONrD,EAPMqD,QACEtR,EAMRiO,EANFsP,SAAmB1M,EAMjB5C,EANiB4C,KACnB2M,EAKEvP,EALFuP,SACAxgB,EAIEiR,EAJFjR,QACAygB,EAGExP,EAHFwP,GACA5gB,EAEEoR,EAFFpR,KAAMgM,EAEJoF,EAFIpF,MACN6U,EACEzP,EADFyP,KAEIrV,EAAM,CAAClJ,kBAAQtC,GAAOsC,kBAAQse,GAAKte,kBAAQie,GAAeje,kBAAQnC,GAAU6B,0BAAgBse,GAAahe,kBAAQqe,IACjHhc,EAAQF,4BAAkBC,GAMhC,OALA8G,EAAInJ,KAAKsC,EAAO,KAAMmH,YAAWE,IAC7BgI,GAAMxI,EAAInJ,KAAK,OAAQyJ,YAAWkI,IACtCxI,EAAInJ,KAAIiO,MAAR9E,EAAG+C,EAASnJ,iCAAuBqb,IAAWngB,OAAAiO,EAAKnJ,iCAAuBjC,MACtE0d,GAAMrV,EAAInJ,KAAKC,kBAAQue,EAAK7gB,MAAOoG,YAAUya,EAAK1Y,OACtDqD,EAAInJ,KAAKC,kBAAQmS,EAAQtU,SAAU4I,YAAU0L,EAAQrT,OAC9CoK,EAAItI,OAAOX,UAAQK,KAAK,KAoOYke,CAA6B1P,GA1R1E,SAA4BA,GAC1B,IACE2P,EAKE3P,EALF2P,QAAmB5d,EAKjBiO,EALOsP,SAAmBvgB,EAK1BiR,EAL0BjR,QACnB6gB,EAIP5P,EAJFqD,QACAzU,EAGEoR,EAHFpR,KAAMgM,EAGJoF,EAHIpF,MAAsBiV,EAG1B7P,EAHW+I,cACbwF,EAEEvO,EAFFuO,UAAWtO,EAETD,EAFSC,QAAiB6P,EAE1B9P,EAFkB1M,OACbyc,EACL/P,EADFgQ,MAA2BC,EACzBjQ,EADmBkQ,KAAmBT,EACtCzP,EADsCyP,KAEpCrV,EAAM,CACVlJ,kBAAQtC,GAAOsC,kBAAQqd,GAAYoB,EAASze,kBAAQnC,GACpDmC,kBAAQ2e,GAAMnV,YAAWuF,GACzB/O,kBAAQ+e,GACRH,EAAcpgB,KAAI,SAAA6D,GAChB,IAAM4c,EAAW,CAACjf,kBAAQqC,EAAMxE,UACxB0E,EAASF,EAATE,KAER,OADIA,GAAM0c,EAASlf,KAAKC,kBAAQuC,EAAK1E,SAAU0E,EAAKE,QAAQjE,IAAIkE,KAAgBpC,KAAK,OAC9E2e,EAAS3e,KAAK,QAEvB,KAAMkJ,YAAWE,GAAQ1J,kBAAQa,GAAWA,EAAQhD,SAAUmC,kBAAQa,GAAWA,EAAQ0B,MACzFsc,GAAgB,GAAJ7gB,OAAOgC,kBAAQ6e,EAAahhB,SAAQ,KAAAG,OAAI0B,0BAAgBmf,EAAa9P,UACjFnR,gCAAsB,OAAQkG,IAAWya,GACzCve,kBAAQ0e,EAAYpf,SAEtB,OAAQof,EAAYhhB,MAClB,IAAK,MACHwL,EAAInJ,KAAKnC,gCAAsB,MAAO8d,IAAUgD,EAAY5f,OAC5D,MACF,IAAK,WACHoK,EAAInJ,KAAK2S,YAAcgM,EAAY5f,KAAK0B,MAI5C,OADA0I,EAAInJ,KAAKC,kBAAQ0e,EAAYte,SACtB8I,EAAItI,OAAOX,UAAQK,KAAK,KA0PiD4e,CAAmBpQ,GAC/F,MACF,IAAK,YACH5F,EApON,SAA8B4F,GAC5B,IACEqQ,EAEErQ,EAFFqQ,UAAWzN,EAET5C,EAFS4C,KAAqBkG,EAE9B9I,EAFe+I,cACjBha,EACEiR,EADFjR,QAASgM,EACPiF,EADOjF,OAAQnM,EACfoR,EADepR,KAAY0hB,EAC3BtQ,EAAI,KADiCuQ,EACrCvQ,EADqCuQ,QAYzC,MAVY,CACVrf,kBAAQtC,GACRsC,kBAAQnC,GACRmC,kBAAQ4X,GACR1X,uBAAaif,GACbnf,kBAAQof,GACRxhB,gCAAsB,SAAUsC,eAAc2J,GAC9CjM,gCAAsB,UAAWsC,eAAcmf,GAC/CzhB,gCAAsB,OAAQsC,eAAcwR,IAEnC9Q,OAAOX,UAAQK,KAAK,KAqNrBgf,CAAqBxQ,GAC3B,MACF,IAAK,WACH5F,EAAM0T,EAAoB9N,GAC1B,MACF,IAAK,QACH5F,EAxNN,SAA0B4F,GACxB,IACEyQ,EAGEzQ,EAHFyQ,aAA6BC,EAG3B1Q,EAHY2Q,cAA2B5hB,EAGvCiR,EAHuCjR,QAAS6hB,EAGhD5Q,EAHgD4Q,QAAwBC,EAGxE7Q,EAHyDvF,cAC/C2P,EAEVpK,EAFF+K,WAAoC+F,EAElC9Q,EAFqB+Q,YAAyBvW,EAE9CwF,EAF8CxF,MAAO8B,EAErD0D,EAFqD1D,GAAmBgO,EAExEtK,EAFyDiL,cAA2C+F,EAEpGhR,EAFkFiR,iBAA6CC,EAE/HlR,EAFkHmR,YAA6BC,EAE/IpR,EAFwIqR,MAAazW,EAErJoF,EAFqJpF,MAAO0W,EAE5JtR,EAF4JsR,WAAY1iB,EAExKoR,EAFwKpR,KAAMsH,EAE9K8J,EAF8K9J,MAC1K+T,EACJjK,EAAI,KAD6BuR,EACjCvR,EADcwR,kBAEZC,EAAexH,GAAY,SAAJ/a,OAAawb,YAAqBT,GAAUzY,KAAK,MAAK,KAC7EkgB,EAAiBd,GAAW,GAAJ1hB,OAAOgC,kBAAQ0f,EAAQ7hB,SAAQ,MAAAG,OAAK0hB,EAAQjd,QAAQjE,KAAI,SAAAqF,GAAG,OAAInE,0BAAgBmE,MAAMvD,KAAK,MAAK,KACvH4I,EAAM,CACVlJ,kBAAQtC,GAAOsC,kBAAQkZ,GAAYlZ,kBAAQnC,GAAUmC,kBAAQuf,GAC7D7f,0BAAgB4J,GAAQtJ,kBAAQkgB,GAAO1W,YAAWE,IAAM1L,OAAAiO,EAAKgN,YAAe2G,IAAW,KAAA5hB,OACnFmF,+BAAqBwc,GAAa,KAAKa,EAAgBhH,YAAqBJ,GAAU9Y,KAAK,KAAM6D,YAAe2b,GAAe3b,YAAe6b,GAClJpiB,gCAAsB,aAAcsC,eAAckgB,KAQpD,OANIC,EACFnX,EAAInJ,KAAKwgB,EAAc3iB,gCAAsB,QAASkG,IAAWkB,IAEjEkE,EAAInJ,KAAKnC,gCAAsB,QAASkG,IAAWkB,GAAQub,GAE7DrX,EAAInJ,KAAKnC,gCAAsB,KAAMkG,IAAWsH,GAAKxN,gCAAsB,gBAAiBsC,eAAcsf,IACnGtW,EAAItI,OAAOX,UAAQK,KAAK,KAoMrBmgB,CAAiB3R,GACvB,MACF,IAAK,WACH5F,EApMN,SAA6B4F,GAC3B,IACEpR,EAGEoR,EAHFpR,KAAMG,EAGJiR,EAHIjR,QAAS6iB,EAGb5R,EAHa4R,SAAUrD,EAGvBvO,EAHuBuO,UACVzF,EAEb9I,EAFF+I,cACoBL,EAClB1I,EADF2I,mBAEIvO,EAAM,CACVlJ,kBAAQtC,GACRsC,kBAAQqd,GACRrd,kBAAQnC,GACRmC,kBAAQ4X,GACR1Q,YAAYwZ,IAGd,OADIlJ,GAAkBtO,EAAInJ,KAAKyX,EAAiBhZ,IAAI8V,GAAuBhU,KAAK,MACzE4I,EAAItI,OAAOX,UAAQK,KAAK,KAsLrBqgB,CAAoB7R,GAC1B,MACF,IAAK,WACH5F,EAtLN,SAA6B4F,GAC3B,IACEpR,EAGEoR,EAHFpR,KAAMG,EAGJiR,EAHIjR,QAASL,EAGbsR,EAHatR,SACAoa,EAEb9I,EAFF+I,cACoBL,EAClB1I,EADF2I,mBAEIvO,EAAM,CACVlJ,kBAAQtC,GACRsC,kBAAQnC,GACRmC,kBAAQ4X,GACRrY,gCAAsB/B,IAGxB,OADIga,GAAkBtO,EAAInJ,KAAKyX,EAAiBhZ,IAAI8M,KAAkBhL,KAAK,MACpE4I,EAAItI,OAAOX,UAAQK,KAAK,KAyKrBsgB,CAAoB9R,GAC1B,MACF,IAAK,OACH5F,EAzKN,SAAyB4F,GACvB,IACE+R,EAGE/R,EAHF+R,UAAWpe,EAGTqM,EAHSrM,QAASgc,EAGlB3P,EAHkB2P,QAAS5gB,EAG3BiR,EAH2BjR,QAC7Bqe,EAEEpN,EAFFoN,UAAWnI,EAETjF,EAFSiF,QAAS1L,EAElByG,EAFkBzG,OAAsByY,EAExChS,EAF0BiS,aAC5B1D,EACEvO,EADFuO,UAAW3f,EACToR,EADSpR,KAAMob,EACfhK,EADegK,KAAYkI,EAC3BlS,EAAI,KADiDmS,EACrDnS,EADuCoS,aAEnCvX,EAAmBmP,EAAnBnP,GAAU7N,EAASgd,EAAfA,KACNqI,EAAW,CAACzhB,0BAAgBiK,GAAKjK,0BAAgB5D,IAAO8E,OAAOX,UAAQK,KAAK,KAiBlF,MAhBY,CACVN,kBAAQtC,GACRsC,kBAAQ+T,GACR/T,kBAAQqd,GACRrd,kBAAQkc,GACR2E,GAAa,eAAJ7iB,OAAmBgC,kBAAQ6gB,IACpCpC,EACAqC,GAAe,gBAAJ9iB,OAAoBgC,kBAAQ8gB,IACvC9gB,kBAAQnC,GACRsjB,EACA1e,GAAW,IAAJzE,OAAQyE,EAAQjE,IAAIe,yBAAuBe,KAAK,MAAK,KAC5D2gB,GAAe,CAAC,OAAQ,IAAFjjB,OAAMijB,EAAYziB,KAAI,SAAAkS,GAAO,OAAI9Q,0BAAgB8Q,GAASpQ,KAAK,QAAMA,KAAK,MAAK,MAAKA,KAAK,KAC/G,KACAqG,YAAW0B,GACXrI,kBAAQghB,IAECpgB,OAAOX,UAAQK,KAAK,KAiJrB8gB,CAAgBtS,GACtB,MACF,IAAK,SACH5F,EAAMmT,EAAkBvN,GACxB,MACF,IAAK,OACH5F,EAnHN,SAAyB4F,GACvB,IAAQlG,EAA4EkG,EAA5ElG,GAAwB4O,EAAoD1I,EAAxE2I,mBAAsC5Z,EAAkCiR,EAAlCjR,QAAS/B,EAAyBgT,EAAzBhT,KAAMkc,EAAmBlJ,EAAnBkJ,SAAUta,EAASoR,EAATpR,KACrEwL,EAAM,CACVlJ,kBAAQtC,GACRsC,kBAAQnC,GACR,CAAC6B,0BAAgB5D,EAAK+N,QAASnK,0BAAgB5D,EAAKA,OAAO8E,OAAOX,UAAQK,KAAK,KAC/EN,kBAAQ4I,GACR5I,kBAAQgY,IAEV,GAAIR,EAAkB,CACpB,IAAMyC,EAAgB,GACtB,OAAQjC,GACN,IAAK,OACHiC,EAAcla,KAAK+D,YAAU0T,IAGjCtO,EAAInJ,KAAKka,EAAcrZ,OAAOX,UAAQK,KAAK,MAE7C,OAAO4I,EAAItI,OAAOX,UAAQK,KAAK,KAiGrB+gB,CAAgBvS,GACtB,MACF,QACE,MAAM,IAAIrQ,MAAM,2BAADT,OAA4BH,IAE/C,OAAOqL,I,6BC1XT,6CAEMoY,EAAiB,CAAC,UAAW,SAAU,SAAU,aAAc,SAAU,OAAQ,SAAU,SAAU,OAAQ,SAAU,WAAY,OAAQ,OAAQ,MAAO,QAAS,MAAO,SAAU,OAAQ,SAAU,UAAW,OAAQ,UAAW,KAAM,QAAS,SAAU,OAAQ,QAAS,WAEpR,SAASC,EAAeziB,GACtB,IAAM0B,EAAM1B,GAAQA,EAAK0B,IAAM1B,EAAK0B,IAAM1B,EAC1C,IAAKwiB,EAAeE,SAAShhB,EAAI9C,MAAO,MAAM,IAAIe,MAAM,GAADT,OAAIwC,EAAI9C,KAAI,4CAGrE,SAAS+jB,EAAMjhB,GACb,OAAIlC,MAAMC,QAAQiC,IAChBA,EAAIK,QAAQ0gB,GACL7O,YAAclS,KAEvB+gB,EAAe/gB,GACRmG,YAAWnG,IAUL,SAASgT,EAAShT,GAC/B,MAAe,OAAXA,EAAI8S,GARV,SAASoO,EAAQ5S,GACf,IAAKA,GAAwB,IAAhBA,EAAKtN,OAAc,MAAO,GACvC,IAAMkE,EAAM,CAAC+b,EAAM3S,EAAKtO,MAExB,OADIsO,EAAK6S,SAASjc,EAAI3F,KAAK+O,EAAKwE,GAAGrV,cAAeyjB,EAAQ5S,EAAK6S,UACxDjc,EAAI9E,QAAO,SAAAghB,GAAO,OAAIA,KAASthB,KAAK,KAIfohB,CAAQlhB,GAC7BihB,EAAMjhB,K,q1BCnBf,SAASuN,EAA0B8T,GACjC,GAAKA,EAAL,CACA,IACE7D,EAME6D,EANF7D,WACiBrE,EAKfkI,EALFjI,gBACAkI,EAIED,EAJFC,SACAxY,EAGEuY,EAHFvY,MACAzL,EAEEgkB,EAFFhkB,QACsByO,EACpBuV,EADF/T,qBAEIiU,EAAgB,GAQtB,OAPAA,EAAchiB,KAAKC,kBAAQnC,IAC3BkkB,EAAchiB,KAAKL,0BAAgBse,IACnC+D,EAAchiB,KAAKC,kBAAQ2Z,IAC3BoI,EAAchiB,KAAKL,0BAAgB4J,IACnCyY,EAAchiB,KAAIiO,MAAlB+T,EAAa9V,EAASgM,YAAwB4J,KAC9CE,EAAchiB,KAAIiO,MAAlB+T,EAAa9V,EAASI,YAA+BC,KACrDyV,EAAchiB,KAAKC,kBAAQ8hB,IACpBC,EAAcnhB,OAAOX,UAAQK,KAAK,Q,6BC1B3C,gIAoBA,SAASyb,EAAkBF,GACzB,GAA4B,iBAAjBA,EAA2B,OAAOA,EAC7C,IAA8BmG,EAAenG,EAArCoG,qBACR,MAAO,IAAPjkB,OAnBF,SAAkCgkB,GAChC,IACElmB,EAIEkmB,EAJFlmB,KACAomB,EAGEF,EAHFE,YACAtd,EAEEod,EAFFpd,QACqBud,EACnBH,EADFI,oBAQF,MANe,CACbtmB,EACA+I,YAAwBqd,EAAa,gBACrCrd,YAAwBD,EAAS,YACjC5E,kBAAQmiB,IAEIvhB,OAAOX,UAAQK,KAAK,KAMvB+hB,CAAyBL,GAAW,KAGjD,SAASM,EAAqBC,GAC5B,IAAQzmB,EAAgDymB,EAAhDzmB,KAA+B+f,EAAiB0G,EAA1CzG,wBACd,MAAO,GAAP9d,OAAUlC,EAAI,QAAAkC,OAAO+d,EAAkBF,IAGzC,SAASxU,EAAyBmb,GAEhC,OADiBA,EAAT1jB,KACIN,IAAI8jB,GAAsBhiB,KAAK,MAe7C,SAASmiB,EAAkB3jB,GACzB,IAAQyD,EAAoCzD,EAApCyD,KAAMzG,EAA8BgD,EAA9BhD,KAAI4mB,EAA0B5jB,EAAxB6jB,sBAAc,IAAAD,EAAG,GAAEA,EACjCE,EAAWrgB,EAAOuB,YAAUvB,GAAMjC,KAAK,MAAQ,GAE/CuiB,EAhBR,SAA+Bte,GAE7B,OAAQvE,kBAAQuE,IACd,IAAK,YACL,IAAK,OACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,GAQaue,CAAsBhnB,GAE9C,MADe,CAACA,EAAM,IAAK8mB,GAAWC,GAAmB,IAAKF,GAAkB,IAAKA,EAAgBE,GAAmB,KAC1GjiB,OAAOX,UAAQK,KAAK,IAGpC,SAAS8E,EAAgBtG,GACvB,IAAQuF,EAASvF,EAATuF,KAGR,MAAO,CAFKoe,EAAkB3jB,GACd2F,YAAUJ,IACJzD,OAAOX,UAAQK,KAAK,O,6BC7D5C,mHAWA,SAASiK,EAAYH,GACnB,GAAoB,WAAhBA,EAAO1M,KAAmB,OAAO6K,YAAY6B,GACjD,IAAMc,EAAUd,EAAO5L,IAAIsF,KAC3B,MAAO,IAAP9F,OAAWkN,EAAQ5K,KAAK,QAAO,KAGjC,SAASyiB,EAAe5hB,GACtB,IAAKA,EAAW,MAAO,GACvB,IAAM6hB,EAAe,CAAC,YAAa,KACnC,GAAI1kB,MAAMC,QAAQ4C,GAChB6hB,EAAajjB,KAAKoB,EAAU3C,IAAIkB,mBAAiBY,KAAK,WACjD,CACL,IAAQ9D,EAAU2E,EAAV3E,MACRwmB,EAAajjB,KAAKvD,EAAMgC,IAAIsF,KAAWxD,KAAK,OAG9C,OADA0iB,EAAajjB,KAAK,KACXijB,EAAapiB,OAAOX,UAAQK,KAAK,IAG1C,SAAS2iB,EAAoBC,GAC3B,IAAKA,EAAgB,MAAO,GAE5B,OADiBA,EAATxlB,MAEN,IAAK,SACH,MAAO,IAAPM,OAAWklB,EAAepkB,KAAKN,IAAIkE,KAAgBpC,KAAK,MAAK,MAInE,SAAS6iB,EAAoBC,GAC3B,IAAQtkB,EAAkBskB,EAAlBtkB,KAAMjB,EAAYulB,EAAZvlB,QACNH,EAASoB,EAATpB,KACFmC,EAAS,CAACG,kBAAQnC,IACxB,OAAQH,GACN,IAAK,SACHmC,EAAOE,KAAKG,uBAAapB,IACzB,MACF,IAAK,SACHe,EAAOE,KAAK,SAAUnC,gCAAsB,MAAO8d,IAAU5c,EAAKgW,KAAMlX,gCAAsB,QAASkG,IAAWhF,EAAKkG,QAG3H,OAAOnF,EAAOe,OAAOX,UAAQK,KAAK,KAGpC,SAAS+iB,EAAcC,GACrB,IAAKA,EAAU,MAAO,GACtB,IAAQxlB,EAAmBwlB,EAAnBxlB,OAER,MADe,CAACmlB,EADWK,EAAX/Q,QAC6B4Q,EAAoBrlB,IACnD8C,OAAOX,UAAQK,KAAK,KAGpC,SAASsT,EAAY9E,GACnB,IACEpF,EAWEoF,EAXFpF,MACAhM,EAUEoR,EAVFpR,KAAI6lB,EAUFzU,EATFxP,cAAM,IAAAikB,EAAG,OAAMA,EACf9gB,EAQEqM,EARFrM,QACA6gB,EAOExU,EAPFwU,SACAlZ,EAME0E,EANF1E,OACApF,EAKE8J,EALF9J,MACqBwe,EAInB1U,EAJF2U,oBACAtiB,EAGE2N,EAHF3N,UACAyB,EAEEkM,EAFFlM,UACAkS,EACEhG,EADFgG,IAEF1I,EAAuCoX,GAAqB,GAApD3lB,EAAOuO,EAAPvO,QAAc6lB,EAAYtX,EAAjB0I,IACX5J,EAAU,CAAClL,kBAAQtC,GAAOsC,kBAAQV,GAAS4H,YAAYwC,GAAQqZ,EAAe5hB,IAQpF,OAPI7C,MAAMC,QAAQkE,IAAUyI,EAAQnL,KAAK,IAAD/B,OAAKyE,EAAQjE,IAAIkB,mBAAiBY,KAAK,MAAK,MACpF4K,EAAQnL,KAAKnC,gCAAsBU,MAAMC,QAAQ6L,GAAU,SAAW,GAAIG,EAAaH,IACvFc,EAAQnL,KAAKnC,gCAAsB,cAAeylB,EAAeC,IACjEpY,EAAQnL,KAAKnC,gCAAsB,MAAO8d,IAAU5G,IACpD5J,EAAQnL,KAAKnC,gCAAsB,QAASkG,IAAWkB,IACvDkG,EAAQnL,KAAK4C,yBAAeC,IAC5BsI,EAAQnL,KAAKnC,gCAAsBC,EAAS6d,IAAUgI,IAC/CxY,EAAQtK,OAAOX,UAAQK,KAAK,O,6BCpFrC,oDAGA,SAASkF,EAAY1G,GACnB,IAAIH,EAAWG,EAAKH,UAAYG,EAAK6kB,GACjCC,EAAO9f,YAAUhF,EAAKD,OACtBglB,GAAY,EAChB,GAAIvlB,MAAMC,QAAQqlB,GAAO,CACvB,OAAQjlB,GACN,IAAK,IACHA,EAAW,KACX,MACF,IAAK,KACHA,EAAW,SACX,MACF,IAAK,UACL,IAAK,cACHklB,GAAY,EACZD,EAAO,GAAH5lB,OAAM4lB,EAAK,GAAE,SAAA5lB,OAAQ4lB,EAAK,IAK7BC,IAAWD,EAAO,IAAH5lB,OAAO4lB,EAAKtjB,KAAK,MAAK,MAE5C,IAAMvB,EAASD,EAAKD,MAAME,QAAU,GAC9BZ,EAAM,CAAC2F,YAAUhF,EAAKF,MAAOD,EAAUilB,EAAM5jB,kBAAQjB,EAAOrB,MAAOoG,YAAU/E,EAAOvC,QAAQoE,OAAOX,UAAQK,KAAK,KACtH,OAAOxB,EAAKO,YAAc,IAAHrB,OAAOG,EAAG,KAAMA,I,6BC3BzC,oDAGA,SAAS0I,EAAcid,GACrB,IAAQhlB,EAAeglB,EAAfhlB,KAAMilB,EAASD,EAATC,KAEd,MADe,CAAC,WAAYjgB,YAAUhF,GAAOkB,kBAAQ+jB,IACvCnjB,OAAOX,UAAQK,KAAK,O,6BCNpC,6CAEA,SAASgF,EAAYxG,GAEnB,IAAQF,EAAiCE,EAAjCF,KAAMC,EAA2BC,EAA3BD,MAAOiB,EAAoBhB,EAApBgB,OAAQjC,EAAYiB,EAAZjB,QAC7Be,EAAKf,QAAUA,EACf,IAAMmmB,EAAUlgB,YAAUlF,GACpBqlB,EAAWngB,YAAUjF,GAC3B,MAAO,GAAPb,OAAUgmB,EAAO,KAAAhmB,OAAI8B,EAAM,KAAA9B,OAAIimB,K,6BCRjC,kEA+BA,SAASld,EAAUmd,GACjB,IA3BsBC,EACVC,EAAU1S,EAAOE,EA0BvB/T,EAAYqmB,EAAZrmB,QACEuC,EAAW8jB,EAAX9jB,OACJjC,EAAM,GACV,OAAQ6B,kBAAQnC,IACd,IAAK,SA9BKumB,GADUD,EAgCGD,GA/B2B,GAA9BxS,EAAiByS,EAAjBzS,KAAOE,EAAUuS,EAAVvS,MA+BzBzT,EA9BG,CACLP,gCAAsB,KAAMsC,eAAckkB,GAAYA,EAASvlB,OAC/DjB,gCAAsB,OAAQsJ,IAAawK,GAC3CM,YAAWJ,IACXhR,OAAOX,UAAQK,KAAK,KA2BlB,MACF,IAAK,YACL,IAAK,YACHnC,EA3BN,SAA+BkmB,GAC7B,IAAQvlB,EAASulB,EAATvlB,KACR,GAAKA,EAAL,CACA,IAAQ6kB,EAAO7kB,EAAP6kB,GACR,MAAoB,SAAhB3jB,kBAAQ2jB,GAAuB/lB,gCAAsB,OAAQsC,eAAcpB,EAAKD,OAC7EjB,gCAAsB,QAASkG,IAAWhF,IAsBvCwlB,CAAsBJ,GAC5B,MACF,IAAK,UACL,IAAK,UACH/lB,EAAMP,gCAAsB,OAAQsJ,IAAagd,EAASxS,MAC1D,MACF,IAAK,SACHvT,EA1BN,SAA2BomB,GACzB,IAAaC,EAAYD,EAAiB,IAC1C,GAAKC,EAAL,CACA,IAAQC,EAA0BD,EAA1BC,KAAMrU,EAAoBoU,EAApBpU,KAAMsU,EAAcF,EAAdE,UAChBC,EAAc,IAAH3mB,OAAOymB,EAAI,KAE1B,OADIrU,IAAMuU,GAAe,KAAJ3mB,OAASoS,EAAI,MAC3B,CAAC,MAAOuU,EAAaD,GAAa,QAASA,GAAaA,EAAUlmB,KAAI,SAAAomB,GAAI,UAAA5mB,OAAQ4mB,EAAI,QAAKtkB,KAAK,OAAOM,OAAOX,UAAQK,KAAK,MAoBxHukB,CAAkBX,GACxB,MACF,IAAK,SACH/lB,EAAMP,gCAAsB,GAAI4L,IAAY0a,EAAS9jB,IACrD,MACF,IAAK,MACHjC,EAAMmJ,YAAS4c,EAAQ,KACvBrmB,EAAU,GAKd,MAAO,CAAC,OAAQmC,kBAAQnC,GAAUmC,kBAAQI,GAASjC,GAAKyC,OAAOX,UAAQK,KAAK,O,qRC1D9EwkB,I,MAAAA,G,EAAA,G,EACGrnB,W,EAAesD,S,6pECAgC,IAE5CgkB,EAAM,oBAAAA,K,4FAAAC,CAAA,KAAAD,G,UA0DT,O,EA1DSA,G,EAAA,EAAAjoB,IAAA,SAAAN,MACV,SAAO0M,GAAwB,IAAnBnL,EAAGknB,UAAAzjB,OAAA,QAAA0jB,IAAAD,UAAA,GAAAA,UAAA,GAAG1nB,cACV0Y,EAAU7a,KAAK2F,MAAMmI,EAAKnL,GAChC,OAAOkY,GAAWA,EAAQzV,MAC3B,CAAA1D,IAAA,SAAAN,MAED,SAAOgE,GAAwB,IAAnBzC,EAAGknB,UAAAzjB,OAAA,QAAA0jB,IAAAD,UAAA,GAAAA,UAAA,GAAG1nB,cAEhB,OADA0B,uBAAalB,GACNyV,YAAShT,EAAKzC,KACtB,CAAAjB,IAAA,YAAAN,MAED,SAAUsC,GAAyB,IAAnBf,EAAGknB,UAAAzjB,OAAA,QAAA0jB,IAAAD,UAAA,GAAAA,UAAA,GAAG1nB,cAEpB,OADA0B,uBAAalB,GACN+F,YAAUhF,KAClB,CAAAhC,IAAA,QAAAN,MAED,SAAM0M,GAAwB,IAAnBnL,EAAGknB,UAAAzjB,OAAA,QAAA0jB,IAAAD,UAAA,GAAAA,UAAA,GAAG1nB,cACf4nB,EAAgDpnB,EAAxCP,gBAAQ,IAAA2nB,EAAI1nB,WAAsB0nB,EAC1ClmB,uBAAalB,GACb,IAAMqnB,EAAW5nB,EAASiC,cAC1B,GAAI4lB,EAAQD,GAAW,OAAOC,EAAQD,GAAUlc,EAAIgP,QACpD,MAAM,IAAIzZ,MAAM,GAADT,OAAIR,EAAQ,kCAC5B,CAAAV,IAAA,iBAAAN,MAED,SAAe0M,EAAKoc,GAA8B,IAAnBvnB,EAAGknB,UAAAzjB,OAAA,QAAA0jB,IAAAD,UAAA,GAAAA,UAAA,GAAG1nB,cACnC,GAAK+nB,GAAkC,IAArBA,EAAU9jB,OAA5B,CACA,IAAA+jB,EAA2BxnB,EAAnBL,YAAI,IAAA6nB,EAAG,QAAOA,EACtB,IAAKnqB,KAAK,GAAD4C,OAAIN,EAAI,UAA0C,mBAAxBtC,KAAK,GAAD4C,OAAIN,EAAI,SAAwB,MAAM,IAAIe,MAAM,GAADT,OAAIN,EAAI,6BAC9F,IAIqC+W,EAJ/B+Q,EAAWpqB,KAAK,GAAD4C,OAAIN,EAAI,SAAQX,KAAK3B,MACpCqqB,EAAgBD,EAAStc,EAAKnL,GAChC2nB,GAAe,EACfC,EAAW,GAAEjR,EAAArF,EACOoW,GAAa,IAArC,IAAA/Q,EAAApX,MAAAmX,EAAAC,EAAA1X,KAAA0S,MAAuC,KAECR,EAF7B0W,EAASnR,EAAAjY,MACdqpB,GAA4B,EAAKzW,EAAAC,EACRiW,GAAS,IAAtC,IAAAlW,EAAA9R,MAAA4R,EAAAE,EAAApS,KAAA0S,MAAwC,KAA7BoW,EAAc5W,EAAA1S,MACjBupB,EAAQ,IAAIC,OAAOF,EAAgB,KACzC,GAAIC,EAAMxX,KAAKqX,GAAY,CACzBC,GAA4B,EAC5B,QAEH,MAAAlW,GAAAP,EAAAQ,EAAAD,GAAA,QAAAP,EAAAS,IACD,IAAKgW,EAA2B,CAC9BF,EAAWC,EACXF,GAAe,EACf,QAEH,MAAA/V,GAAA+E,EAAA9E,EAAAD,GAAA,QAAA+E,EAAA7E,IACD,IAAK6V,EAAc,MAAM,IAAIjnB,MAAM,gBAADT,OAAiB2nB,EAAQ,qBAAA3nB,OAAoBN,EAAI,iCAAAM,OAAgCkL,EAAG,SACvH,CAAApM,IAAA,YAAAN,MAED,SAAU0M,EAAKnL,GACb,IAAMkY,EAAU7a,KAAK2F,MAAMmI,EAAKnL,GAChC,OAAOkY,GAAWA,EAAQgQ,YAC3B,CAAAnpB,IAAA,aAAAN,MAED,SAAW0M,EAAKnL,GACd,IAAMkY,EAAU7a,KAAK2F,MAAMmI,EAAKnL,GAChC,OAAOkY,GAAWA,EAAQiQ,gB,8EAC3BnB,EA1DS,GA6DGA,O,6BC1Df,IAAIoB,EAAS,EAAQ,IAQrB,SAASC,EAAgBC,EAASC,EAAUC,EAAOlI,GACjDjjB,KAAKirB,QAAWA,EAChBjrB,KAAKkrB,SAAWA,EAChBlrB,KAAKmrB,MAAWA,EAChBnrB,KAAKijB,SAAWA,EAChBjjB,KAAKU,KAAW,cAEuB,mBAA5B2C,MAAM+nB,mBACf/nB,MAAM+nB,kBAAkBprB,KAAMgrB,IAdlC,SAAsBK,EAAOC,GAC3B,SAASC,IAASvrB,KAAKwrB,YAAcH,EACrCE,EAAKxpB,UAAYupB,EAAOvpB,UACxBspB,EAAMtpB,UAAY,IAAIwpB,EAexBE,CAAaT,EAAiB3nB,OAE9B2nB,EAAgBU,aAAe,SAASR,EAAUC,GAChD,IAAIQ,EAA2B,CACzB5mB,QAAS,SAAS6mB,GAChB,MAAO,IAAOC,EAAcD,EAAYE,MAAQ,KAGlD,MAAS,SAASF,GAChB,IACI7rB,EADAgsB,EAAe,GAGnB,IAAKhsB,EAAI,EAAGA,EAAI6rB,EAAYI,MAAM5lB,OAAQrG,IACxCgsB,GAAgBH,EAAYI,MAAMjsB,aAAcmD,MAC5C+oB,EAAYL,EAAYI,MAAMjsB,GAAG,IAAM,IAAMksB,EAAYL,EAAYI,MAAMjsB,GAAG,IAC9EksB,EAAYL,EAAYI,MAAMjsB,IAGpC,MAAO,KAAO6rB,EAAYM,SAAW,IAAM,IAAMH,EAAe,KAGlEI,IAAK,SAASP,GACZ,MAAO,iBAGT3lB,IAAK,SAAS2lB,GACZ,MAAO,gBAGTQ,MAAO,SAASR,GACd,OAAOA,EAAYS,cAI3B,SAASC,EAAIC,GACX,OAAOA,EAAGC,WAAW,GAAGC,SAAS,IAAI5pB,cAGvC,SAASgpB,EAAc3pB,GACrB,OAAOA,EACJyW,QAAQ,MAAO,QACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAAS4T,GAAM,MAAO,OAASD,EAAIC,MACpE5T,QAAQ,yBAAyB,SAAS4T,GAAM,MAAO,MAASD,EAAIC,MAGzE,SAASN,EAAY/pB,GACnB,OAAOA,EACJyW,QAAQ,MAAO,QACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAAS4T,GAAM,MAAO,OAASD,EAAIC,MACpE5T,QAAQ,yBAAyB,SAAS4T,GAAM,MAAO,MAASD,EAAIC,MA6CzE,MAAO,YAtCP,SAA0BrB,GACxB,IACInrB,EAAG2sB,EANoBd,EAKvBe,EAAe,IAAIzpB,MAAMgoB,EAAS9kB,QAGtC,IAAKrG,EAAI,EAAGA,EAAImrB,EAAS9kB,OAAQrG,IAC/B4sB,EAAa5sB,IATY6rB,EASaV,EAASnrB,GAR1C4rB,EAAyBC,EAAYtpB,MAAMspB,IAalD,GAFAe,EAAaC,OAETD,EAAavmB,OAAS,EAAG,CAC3B,IAAKrG,EAAI,EAAG2sB,EAAI,EAAG3sB,EAAI4sB,EAAavmB,OAAQrG,IACtC4sB,EAAa5sB,EAAI,KAAO4sB,EAAa5sB,KACvC4sB,EAAaD,GAAKC,EAAa5sB,GAC/B2sB,KAGJC,EAAavmB,OAASsmB,EAGxB,OAAQC,EAAavmB,QACnB,KAAK,EACH,OAAOumB,EAAa,GAEtB,KAAK,EACH,OAAOA,EAAa,GAAK,OAASA,EAAa,GAEjD,QACE,OAAOA,EAAatd,MAAM,GAAI,GAAGnK,KAAK,MAClC,QACAynB,EAAaA,EAAavmB,OAAS,IAQxBymB,CAAiB3B,GAAY,QAJlD,SAAuBC,GACrB,OAAOA,EAAQ,IAAOU,EAAcV,GAAS,IAAO,eAGM2B,CAAc3B,GAAS,WAiuzBrFxrB,EAAOD,QAAU,CACfqtB,YAAa/B,EACbrlB,MAhuzBF,SAAmBqnB,EAAOpZ,GACxBA,OAAsB,IAAZA,EAAqBA,EAAU,GAEzC,IAuyEIqZ,EAvyEAC,EAAa,GAEbC,EAAyB,CAAEnnB,MAAOonB,IAClCC,EAAyBD,GA4JzBE,EAAU,SAASC,EAAMlS,GACnB,OAAOmS,GAAsBD,EAAMlS,IAiCzCoS,EAAU,SAASF,EAAMlS,GACnB,OAAOqS,GAAWH,EAAMlS,IAM9BsS,EAAUC,GAAuB,KAAK,GAgBtCC,EAAUD,GAAuB,aAAa,GAsI9CE,EAAUF,GAAuB,UAAU,GAE3CG,EAAUH,GAAuB,UAAU,GAE3CI,EAAUJ,GAAuB,QAAQ,GAazCK,EAAUL,GAAuB,UAAU,GAE3CM,EAAUN,GAAuB,UAAU,GAgB3CO,EAAUP,GAAuB,aAAa,GAE9CQ,EAAUR,GAAuB,OAAO,GAExCS,EAAUT,GAAuB,aAAa,GAuD9CU,EAAU,SAASf,EAAMlS,GACrB,OAAOqS,GAAWH,EAAMlS,EAAM,IAGlCkT,EAAUX,GAAuB,MAAM,GAgEvCY,EAAU,SAASjB,EAAMlS,GACrB,OAAOqS,GAAWH,EAAMlS,IAG5BoT,EAAUb,GAAuB,UAAU,GAa3Cc,EAAUd,GAAuB,KAAK,GAStCe,EAAUf,GAAuB,aAAa,GAE9CgB,EAAUhB,GAAuB,WAAW,GAE5CiB,EAAUjB,GAAuB,WAAW,GAE5CkB,EAAUlB,GAAuB,WAAW,GAE5CmB,EAAUnB,GAAuB,QAAQ,GAWzCoB,EAAUpB,GAAuB,QAAQ,GAEzCqB,EAAUrB,GAAuB,QAAQ,GAEzCsB,EAAUtB,GAAuB,UAAU,GAE3CuB,EAAUvB,GAAuB,aAAa,GAW9CwB,EAAWxB,GAAuB,kBAAkB,GAEpDyB,EAAWzB,GAAuB,UAAU,GAE5C0B,EAAW1B,GAAuB,WAAW,GAE7C2B,EAAW3B,GAAuB,OAAO,GAkCzC4B,EAAW5B,GAAuB,OAAO,GAiDzC6B,EAAW7B,GAAuB,iBAAiB,GAEnD8B,EAAW9B,GAAuB,SAAS,GAE3C+B,EAAW/B,GAAuB,WAAW,GAQ7CgC,EAAWhC,GAAuB,WAAW,GAE7CiC,EAAWjC,GAAuB,QAAQ,GAE1CkC,EAAWlC,GAAuB,UAAU,GAQ5CmC,EAAWnC,GAAuB,cAAc,GAEhDoC,EAAWpC,GAAuB,iBAAiB,GAEnDqC,EAAWrC,GAAuB,gBAAgB,GAiBlDsC,EAAWtC,GAAuB,kBAAkB,GAEpDuC,EAAWvC,GAAuB,kBAAkB,GAEpDwC,EAAWxC,GAAuB,YAAY,GAE9CyC,EAAWzC,GAAuB,YAAY,GAE9C0C,EAAW1C,GAAuB,sBAAsB,GASxD2C,EAAW3C,GAAuB,cAAc,GAShD4C,GAAW5C,GAAuB,eAAe,GAEjD6C,GAAW7C,GAAuB,KAAK,GAEvC8C,GAAW9C,GAAuB,QAAQ,GAE1C+C,GAAW/C,GAAuB,OAAO,GASzCgD,GAAWhD,GAAuB,UAAU,GAe5CiD,GAAWjD,GAAuB,WAAW,GAE7CkD,GAAWlD,GAAuB,WAAW,GAS7CmD,GAAWnD,GAAuB,QAAQ,GAE1CoD,GAAWpD,GAAuB,SAAS,GAQ3CqD,GAAWrD,GAAuB,gBAAgB,GAElDsD,GAAWtD,GAAuB,SAAS,GAkC3CuD,GAAWvD,GAAuB,eAAe,GAajDwD,GAAWxD,GAAuB,SAAS,GAE3CyD,GAAWzD,GAAuB,OAAO,GAEzC0D,GAAW1D,GAAuB,eAAe,GAYjD2D,GAAW3D,GAAuB,SAAS,GAE3C4D,GAAW5D,GAAuB,QAAQ,GAsB1C6D,GAAW7D,GAAuB,QAAQ,GAE1C8D,GAAW9D,GAAuB,UAAU,GAQ5C+D,GAAW/D,GAAuB,WAAW,GAE7CgE,GAAWhE,GAAuB,aAAa,GA0D/CiE,GAAWjE,GAAuB,YAAY,GAE9CkE,GAAWlE,GAAuB,WAAW,GAE7CmE,GAAWnE,GAAuB,YAAY,GAE9CoE,GAAWpE,GAAuB,aAAa,GAE/CqE,GAAWrE,GAAuB,eAAe,GAQjDsE,GAAWtE,GAAuB,UAAU,GAE5CuE,GAAWvE,GAAuB,UAAU,GAE5CwE,GAAWxE,GAAuB,UAAU,GAE5CyE,GAAWzE,GAAuB,UAAU,GAE5C0E,GAAW1E,GAAuB,MAAM,GAExC2E,GAAW3E,GAAuB,UAAU,GAE5C4E,GAAW5E,GAAuB,WAAW,GAE7C6E,GAAW7E,GAAuB,WAAW,GAE7C8E,GAAW9E,GAAuB,UAAU,GAE5C+E,GAAW/E,GAAuB,YAAY,GAE9CgF,GAAWhF,GAAuB,UAAU,GAE5CiF,GAAWjF,GAAuB,QAAQ,GAE1CkF,GAAWlF,GAAuB,YAAY,GAE9CmF,GAAWnF,GAAuB,KAAK,GAEvCoF,GAAWpF,GAAuB,MAAM,GAExCqF,GAAWrF,GAAuB,KAAK,GAEvCsF,GAAWtF,GAAuB,aAAa,GAE/CuF,GAAWvF,GAAuB,UAAU,GAE5CwF,GAAWxF,GAAuB,SAAS,GAE3CyF,GAAWzF,GAAuB,WAAW,GAE7C0F,GAAW1F,GAAuB,KAAK,GAEvC2F,GAAW3F,GAAuB,KAAK,GAuBvC4F,GAAW5F,GAAuB,aAAa,GAE/C6F,GAAW7F,GAAuB,UAAU,GAqD5C8F,GAAW9F,GAAuB,eAAe,GAEjD+F,GAAW/F,GAAuB,MAAM,GAExCgG,GAAWhG,GAAuB,MAAM,GAmFxCiG,GAAWjG,GAAuB,UAAU,GAiC5CkG,GAAW,SAASvG,EAAMlS,GAQpB,OAPAA,EAAK0Y,QAAQxG,GACblS,EAAK5V,QAAQ4I,IACX,MAAM,MAAEC,EAAK,GAAEd,GAAOa,EACtB2lB,GAAW1lB,GAASA,EAChBd,IAAIwmB,GAAWxmB,GAAMc,GA6+wBnC,SAA2Bwc,GACzB,MAAMzjB,EAAU4sB,GAAqBnJ,GACrCA,EAAWoJ,QACX7sB,EAAQ5B,QAAQgD,GAAOqiB,EAAWqJ,IAAI1rB,IA/+wB9B2rB,CAAkBtJ,MAEbzP,GAsBbgZ,GAAW,OACXC,GAAWC,GAAqB,CAAC,MAAM,GAAO,GAC9CC,GAAW,OACXC,GAAWF,GAAqB,CAAC,MAAM,GAAO,GAC9CG,GAAW,OACXC,GAAWJ,GAAqB,CAAC,MAAM,GAAO,GAC9CK,GAAW,OACXC,GAAWN,GAAqB,CAAC,MAAM,GAAO,GAE9CO,GAAWlH,GAAuB,eAAe,GAEjDmH,GAAWnH,GAAuB,aAAa,GAE/CoH,GAAWpH,GAAuB,aAAa,GAE/CqH,GAAWrH,GAAuB,WAAW,GAE7CsH,GAAWtH,GAAuB,QAAQ,GAyE1CuH,GAAWvH,GAAuB,SAAS,GAE3CwH,GAAWxH,GAAuB,aAAa,GAE/CyH,GAAWzH,GAAuB,aAAa,GAE/C0H,GAAW1H,GAAuB,WAAW,GAE7C2H,GAAW3H,GAAuB,OAAO,GAazC4H,GAAW5H,GAAuB,aAAa,GAY/C6H,GAAW7H,GAAuB,OAAO,GA0GzC8H,GAAW9H,GAAuB,KAAK,GAavC+H,GAAW,SAASC,GAAM,OAAOA,EAAG,GAAK,IAAMA,EAAG,IAKlDC,GAAWjI,GAAuB,MAAM,GAExCkI,GAAWlI,GAAuB,KAAK,GAEvCmI,GAAWnI,GAAuB,MAAM,GAExCoI,GAAWpI,GAAuB,MAAM,GAExCqI,GAAWrI,GAAuB,KAAK,GAEvCsI,GAAWtI,GAAuB,MAAM,GA0BxCuI,GAAWvI,GAAuB,KAAK,GAEvCwI,GAAWxI,GAAuB,KAAK,GAKvCyI,GAAWzI,GAAuB,KAAK,GAEvC0I,GAAW1I,GAAuB,KAAK,GAEvC2I,GAAW3I,GAAuB,KAAK,GAiEvC4I,GAAW5I,GAAuB,KAAM,GACxC6I,GAAW,QACXC,GAAWnC,GAAqB,CAAC,MAAO,GAAM,GAC9CoC,GAAW,SAASC,GAAS,OAAOA,EAAM1xB,KAAK,KAC/C2xB,GAAW,QACXC,GAAWvC,GAAqB,CAAC,MAAM,GAAM,GAE7CwC,GAAWnJ,GAAuB,KAAK,GACvCoJ,GAAW,QACXC,GAAW1C,GAAqB,CAAC,MAAM,GAAM,GAI7C2C,GAAW,SAASlxB,EAAOgmB,GAAS,OAAOhmB,EAAQgmB,EAAM9mB,KAAK,KAC9DiyB,GAAW,aACXC,GAAW7C,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,MAAM,GAAO,GACtE8C,GAAW,kBACXC,GAAW/C,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,IAAK,MAAM,GAAO,GACvFgD,GAAW,mBACXC,GAAWjD,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,IAAK,IAAK,MAAM,GAAO,GAE5FkD,GAAW7J,GAAuB,KAAK,GA+FvC8J,GAAW9J,GAAuB,aAAa,GAY/C+J,GAAW/J,GAAuB,WAAW,GAE7CgK,GAAWhK,GAAuB,OAAO,GAEzCiK,GAAWjK,GAAuB,QAAQ,GAE1CkK,GAAWlK,GAAuB,UAAU,GAE5CmK,GAAWnK,GAAuB,OAAO,GAEzCoK,GAAWpK,GAAuB,OAAO,GAEzCqK,GAAWrK,GAAuB,SAAS,GAE3CsK,GAAWtK,GAAuB,QAAQ,GAE1CuK,GAAWvK,GAAuB,UAAU,GAE5CwK,GAAWxK,GAAuB,WAAW,GAE7CyK,GAAWzK,GAAuB,WAAW,GAE7C0K,GAAW1K,GAAuB,gBAAgB,GAElD2K,GAAW3K,GAAuB,cAAc,GAEhD4K,GAAW5K,GAAuB,gBAAgB,GAElD6K,GAAW7K,GAAuB,UAAU,GAE5C8K,GAAW9K,GAAuB,SAAS,GAE3C+K,GAAW/K,GAAuB,WAAW,GAE7CgL,GAAWhL,GAAuB,UAAU,GAE5CiL,GAAWjL,GAAuB,QAAQ,GAE1CkL,GAAWlL,GAAuB,YAAY,GAE9CmL,GAAWnL,GAAuB,iBAAiB,GAEnDoL,GAAWpL,GAAuB,mBAAmB,GAErDqL,GAAWrL,GAAuB,QAAQ,GAE1CsL,GAAWtL,GAAuB,QAAQ,GAwB1CuL,GAAWvL,GAAuB,cAAc,GAmEhDwL,GAAWxL,GAAuB,KAAK,GAavCyL,GAAW,SAAS/2B,EAAMg3B,GACpB,MAAO,CACLh3B,KAAMA,EAAK+B,cACXjD,MAAOk4B,EAAG,GAAGp0B,KAAK,MAG1Bq0B,GAAW,qBACXC,GAAWjF,GAAqB,CAAC,IAAM,KAAM,CAAC,KAAM,KAAS,MAAS,GAAM,GAC5EkF,GAAW,UACXC,GAAWnF,GAAqB,CAAC,IAAK,OAAO,GAAM,GAEnDoF,GAAW/L,GAAuB,OAAO,GAGzCgM,GAAWhM,GAAuB,OAAQ,GAG1CiM,GAAWjM,GAAuB,QAAQ,GAG1CkM,GAAWlM,GAAuB,OAAO,GAGzCmM,GAAWnM,GAAuB,OAAO,GAGzCoM,GAAWpM,GAAuB,OAAO,GAGzCqM,GAAWrM,GAAuB,OAAO,GAGzCsM,GAAWtM,GAAuB,OAAO,GAGzCuM,GAAWvM,GAAuB,OAAO,GAGzCwM,GAAWxM,GAAuB,OAAO,GAKzCyM,GAAWzM,GAAuB,MAAM,GAGxC0M,GAAW1M,GAAuB,MAAM,GAGxC2M,GAAW3M,GAAuB,MAAQ,GAG1C4M,GAAW5M,GAAuB,MAAM,GAExC6M,GAAW,UACXC,GAAWnG,GAAqB,CAAC,KAAM,OAAO,GAAO,GAuCrDoG,GAAW,SACXC,GAAWrG,GAAqB,CAAC,CAAC,IAAK,OAAO,GAAO,GACrDsG,GAAW,eACXC,GAAWvG,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,OAAO,GAAO,GAC7EwG,GAAW,QACXC,GAAWzG,GAAqB,CAAC,IAAK,MAAM,GAAO,GACnD0G,GAAW,SACXC,GAAW3G,GAAqB,CAAC,IAAK,MAAM,GAAO,GAGnD4G,GAAWvN,GAAuB,QAAQ,GAE1CwN,GAAWxN,GAAuB,YAAY,GAE9CyN,GAAWzN,GAAuB,QAAQ,GAE1C0N,GAAW1N,GAAuB,MAAM,GAExC2N,GAAW3N,GAAuB,SAAS,GAE3C4N,GAAW5N,GAAuB,QAAQ,GAG1C6N,GAAW7N,GAAuB,OAAO,GAEzC8N,GAAW9N,GAAuB,UAAU,GAI5C+N,IAFW/N,GAAuB,aAAa,GAEpCA,GAAuB,UAAU,IAI5CgO,IAFWhO,GAAuB,WAAW,GAElCA,GAAuB,aAAa,IAG/CiO,GAAWjO,GAAuB,QAAQ,GAE1CkO,GAAWlO,GAAuB,QAAQ,GAG1CmO,GAAWnO,GAAuB,UAAU,GAE5CoO,GAAWpO,GAAuB,SAAS,GAG3CqO,GAAWrO,GAAuB,UAAU,GAI5CsO,GAAWtO,GAAuB,MAAM,GAExCuO,GAAWvO,GAAuB,QAAQ,GAE1CwO,GAAWxO,GAAuB,SAAS,GAE3CyO,GAAWzO,GAAuB,QAAQ,GAE1C0O,GAAW1O,GAAuB,SAAS,GAE3C2O,GAAW3O,GAAuB,SAAS,GAE3C4O,GAAW5O,GAAuB,QAAQ,GAE1C6O,GAAW7O,GAAuB,SAAS,GAE3C8O,GAAW9O,GAAuB,QAAQ,GAE1C+O,GAAW/O,GAAuB,SAAS,GAE3CgP,GAAWhP,GAAuB,SAAS,GAG3CiP,GAAWjP,GAAuB,UAAU,GAE5CkP,GAAWlP,GAAuB,SAAS,GAE3CmP,GAAWnP,GAAuB,SAAS,GAE3CoP,GAAWpP,GAAuB,SAAS,GAE3CqP,GAAWrP,GAAuB,MAAM,GAExCsP,GAAWtP,GAAuB,SAAS,GAE3CuP,GAAWvP,GAAuB,UAAU,GAE5CwP,GAAWxP,GAAuB,WAAW,GAE7CyP,GAAWzP,GAAuB,UAAU,GAE5C0P,GAAW1P,GAAuB,WAAW,GAG7C2P,GAAW3P,GAAuB,gBAAgB,GAGlD4P,GAAW5P,GAAuB,SAAS,GAE3C6P,GAAW7P,GAAuB,UAAU,GAG5C8P,GAAW9P,GAAuB,eAAe,GAGjD+P,GAAW/P,GAAuB,OAAO,GAGzCgQ,GAAWhQ,GAAuB,QAAQ,GAG1CiQ,GAAWjQ,GAAuB,OAAO,GAGzCkQ,GAAWlQ,GAAuB,YAAY,GAG9CmQ,GAAWnQ,GAAuB,WAAW,GAG7CoQ,GAAWpQ,GAAuB,MAAM,GAGxCqQ,GAAWrQ,GAAuB,MAAM,GAGxCsQ,GAAWtQ,GAAuB,QAAQ,GAG1CuQ,GAAWvQ,GAAuB,UAAU,GAI5CwQ,GAAWxQ,GAAuB,OAAO,GAGzCyQ,GAAWzQ,GAAuB,MAAM,GAGxC0Q,GAAW1Q,GAAuB,SAAS,GAG3C2Q,GAAW3Q,GAAuB,OAAO,GAGzC4Q,GAAW5Q,GAAuB,OAAO,GAGzC6Q,GAAW7Q,GAAuB,OAAO,GAGzC8Q,GAAW9Q,GAAuB,OAAO,GAGzC+Q,GAAW/Q,GAAuB,WAAW,GAG7CgR,GAAWhR,GAAuB,QAAQ,GAG1CiR,GAAWjR,GAAuB,QAAQ,GAE1CkR,GAAWlR,GAAuB,QAAQ,GAE1CmR,GAAWnR,GAAuB,QAAQ,GAE1CoR,GAAWpR,GAAuB,QAAQ,GAE1CqR,GAAWrR,GAAuB,OAAO,GAEzCsR,GAAWtR,GAAuB,QAAQ,GAG1CuR,GAAWvR,GAAuB,aAAa,GAG/CwR,GAAWxR,GAAuB,SAAS,GAG3CyR,GAAWzR,GAAuB,SAAS,GAG3C0R,GAAW1R,GAAuB,QAAQ,GAM1C2R,IAHW3R,GAAuB,QAAQ,GAG/BA,GAAuB,aAAa,IAM/C4R,IAHW5R,GAAuB,WAAW,GAGlCA,GAAuB,WAAW,IAG7C6R,GAAW7R,GAAuB,WAAW,GAG7C8R,GAAW9R,GAAuB,UAAU,GAG5C+R,GAAW/R,GAAuB,YAAY,GAG9CgS,GAAWhS,GAAuB,SAAS,GAM3CiS,IAHWjS,GAAuB,YAAY,GAGnCA,GAAuB,WAAW,IAS7CkS,IANWlS,GAAuB,QAAQ,GAG/BA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,IAG5CmS,GAAWnS,GAAuB,UAAU,GAqB5CoS,IAlBWpS,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,GAGnCA,GAAuB,QAAQ,GAG/BA,GAAuB,cAAc,GAGrCA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,IAO7CqS,IAJWrS,GAAuB,UAAU,GAIjCA,GAAuB,YAAY,IAK9CsS,GAAWtS,GAAuB,aAAa,GAG/CuS,GAAWvS,GAAuB,YAAY,GAM9CwS,IAHWxS,GAAuB,QAAQ,GAG/BA,GAAuB,gBAAgB,IAMlDyS,IAHWzS,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,IAU9C0S,GAAW1S,GAAuB,gBAAgB,GAGlD2S,GAAW3S,GAAuB,qBAAqB,GAGvD4S,GAAW5S,GAAuB,gBAAgB,GAGlD6S,GAAW7S,GAAuB,UAAU,GAG5C8S,GAAW9S,GAAuB,WAAW,GAI7C+S,GAAW/S,GAAuB,SAAS,GAG3CgT,GAAWhT,GAAuB,WAAW,GAG7CiT,GAAWjT,GAAuB,gBAAgB,GAGlDkT,GAAWlT,GAAuB,OAAO,GAGzCmT,GAAWnT,GAAuB,UAAU,GAG5CoT,GAAWpT,GAAuB,SAAS,GAI3CqT,GAAWrT,GAAuB,YAAY,GAI9CsT,GAAWtT,GAAuB,WAAW,GAG7CuT,GAAWvT,GAAuB,cAAc,GAGhDwT,GAAWxT,GAAuB,cAAc,GAGhDyT,GAAWzT,GAAuB,KAAK,GAEvC0T,GAAW1T,GAAuB,KAAK,GAEvC2T,GAAW3T,GAAuB,KAAK,GAEvC4T,GAAW5T,GAAuB,KAAK,GAEvC6T,GAAW7T,GAAuB,MAAM,GAExC8T,GAAW9T,GAAuB,MAAM,GAExC+T,GAAW/T,GAAuB,MAAM,GAExCgU,GAAWhU,GAAuB,MAAM,GAExCiU,GAAWjU,GAAuB,MAAM,GAExCkU,GAAWlU,GAAuB,KAAK,GACvCmU,GA4EK,CAAEz/B,KAAM,OA3Eb0/B,GAAW,aACXC,GAAW1N,GAAqB,CAAC,IAAK,KAAM,KAAM,OAAO,GAAO,GAWhE2N,GAAW,SAAS7gC,GAAK,MAAO,CAAE8E,SAAU9E,IAG5C8gC,GAAWvU,GAAuB,OAAO,GACzCwU,GAAWxU,GAAuB,OAAO,GACzCyU,GAAW,SAAShhC,EAAGvB,GACnB,MAAO,CACLqG,SAAU9E,EACVkF,WAAYzG,EACZ0G,cAAc,IAIpB87B,GAAuB,EAEvBC,GAAuB,CAAC,CAAEC,KAAM,EAAG50B,OAAQ,IAC3C60B,GAAuB,EACvBC,GAAuB,GACvBC,GAAuB,EAI3B,GAAI,cAAe/uB,EAAS,CAC1B,KAAMA,EAAQgvB,aAAazV,GACzB,MAAM,IAAI9pB,MAAM,mCAAqCuQ,EAAQgvB,UAAY,MAG3EvV,EAAwBF,EAAuBvZ,EAAQgvB,WA2BzD,SAAShV,GAAuB9B,EAAM+W,GACpC,MAAO,CAAEvgC,KAAM,UAAWwpB,KAAMA,EAAM+W,WAAYA,GAGpD,SAAStO,GAAqBvI,EAAOE,EAAU2W,GAC7C,MAAO,CAAEvgC,KAAM,QAAS0pB,MAAOA,EAAOE,SAAUA,EAAU2W,WAAYA,GAexE,SAASC,GAAsBC,GAC7B,IAAwC9gC,EAApC+gC,EAAUT,GAAoBQ,GAElC,GAAIC,EACF,OAAOA,EAGP,IADA/gC,EAAI8gC,EAAM,GACFR,GAAoBtgC,IAC1BA,IASF,IALA+gC,EAAU,CACRR,MAFFQ,EAAUT,GAAoBtgC,IAEZugC,KAChB50B,OAAQo1B,EAAQp1B,QAGX3L,EAAI8gC,GACmB,KAAxB/V,EAAMR,WAAWvqB,IACnB+gC,EAAQR,OACRQ,EAAQp1B,OAAS,GAEjBo1B,EAAQp1B,SAGV3L,IAIF,OADAsgC,GAAoBQ,GAAOC,EACpBA,EAIX,SAASC,GAAoBC,EAAUC,GACrC,IAAIC,EAAkBN,GAAsBI,GACxCG,EAAkBP,GAAsBK,GAE5C,MAAO,CACLn9B,MAAO,CACL2K,OAAQuyB,EACRV,KAAQY,EAAgBZ,KACxB50B,OAAQw1B,EAAgBx1B,QAE1B3H,IAAK,CACH0K,OAAQwyB,EACRX,KAAQa,EAAcb,KACtB50B,OAAQy1B,EAAcz1B,SAK5B,SAAS01B,GAASpY,GACZoX,GAAcG,KAEdH,GAAcG,KAChBA,GAAiBH,GACjBI,GAAsB,IAGxBA,GAAoB/9B,KAAKumB,IAO3B,SAASqY,GAAyBrY,EAAUC,EAAOlI,GACjD,OAAO,IAAI+H,EACTA,EAAgBU,aAAaR,EAAUC,GACvCD,EACAC,EACAlI,GAIJ,SAASmK,KACP,IAAIoW,EAAQC,EAsBZ,OApBAD,EAAKlB,GACAoB,OACMxW,IACTuW,EAoBJ,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKM,QACM/W,EAAY,CA6BrB,GA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKI,QACMhX,IACT6W,EAAKL,QACMxW,IACT8W,EAAKC,QACM/W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKI,QACMhX,IACT6W,EAAKL,QACMxW,IACT8W,EAAKC,QACM/W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,QAITuW,EAAKvW,EAEHuW,IAAOvW,GACMsW,EACfG,EAhgFO,SAASpW,EAAMlS,GAClB,MAAM8oB,EAAM,CAAC5W,GAAQA,EAAKnoB,KAAOmoB,GACjC,IAAK,IAAIxtB,EAAI,EAAGA,EAAIsb,EAAKjV,OAAQrG,IAC3Bsb,EAAKtb,GAAG,IAA4B,IAAtBsb,EAAKtb,GAAG,GAAGqG,QAC7B+9B,EAAIx/B,KAAK0W,EAAKtb,GAAG,IAAMsb,EAAKtb,GAAG,GAAGqF,KAAOiW,EAAKtb,GAAG,IAEnD,MAAO,CACL8qB,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK++B,GAu/ENC,CAAOT,EAAIF,GAChBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EArGAa,MACMnX,IACTuW,EAAKQ,MAEHR,IAAOvW,GACMsW,EAEfA,EADYC,IAGZnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAuFT,SAASS,KACP,IAAIT,EAOJ,OALAA,EA0iOF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,GAE5BP,EA0DF,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKW,QACMpX,GACJwW,OACMxW,IACT0W,EAAKW,QACMrX,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKU,QACMtX,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACMsW,EArqRLthC,EAsqRIyhC,EAtqRD/iC,EAsqRKgjC,EAtqRFxjC,EAsqRM0jC,EAAtBH,EArqRC,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,IACAlD,EAAEkD,IACLoV,SAAU5Z,EACV6Z,OAAQra,EACRma,aAAcrY,EAAEqY,eA+pRdipB,EAAKG,IAMPrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA9rRM,IAAShrB,EAAGtB,EAAGR,EAisR5B,OAAOojC,EA5GFiB,MACMvX,IACTsW,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBmB,EApmRS,IAqmRTnB,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAAShQ,KAEpCmQ,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKa,QACMxX,IACT4W,EAAKJ,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EAhnRC,IAinRDzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS/P,KAEpCwQ,IAAO7W,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKzW,KAeboV,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EA5oRW,IA4oRGA,EA3oRH,GACL7jB,oBAAoB,IA4oR5B0jB,EAAKG,GAGP,OAAOH,EApmOFmB,MACMzX,IACTsW,EAMJ,WACE,IAAIA,GAEJA,EAAKc,QACMpX,IACTsW,EAwBJ,WACE,IAAIA,EAAIG,EAAQC,EAAgBI,EAAQY,EAASC,EAAUC,EAAUC,EAErEvB,EAAKlB,IACLqB,EAAKqB,QACM9X,GACJwW,OACMxW,IACT0W,EAAKqB,QACM/X,GACJwW,OACMxW,GACJgY,OACMhY,GACJwW,OACMxW,IACT8W,EAAKmB,QACMjY,GACJwW,OACMxW,IACT0X,EAAKQ,QACMlY,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAMQ,QACMnY,IACV2X,EAAM,MAEJA,IAAQ3X,GACJwW,OACMxW,IACV4X,EAAMP,QACMrX,IACV4X,EAAM,MAEJA,IAAQ5X,GACJwW,OACMxW,IACV6X,EAAMP,QACMtX,IACV6X,EAAM,MAEJA,IAAQ7X,GACKsW,EAxlFtBpjC,EAylFuB4jC,EAzlFpBvvB,EAylFwBmwB,EAzlFrBU,EAylFyBT,EAzlFtB3hB,EAylF2B4hB,EAzlFvBS,EAylF4BR,GAzlF5C1jC,EAylFsBuiC,IAxlF3BviC,EAAEoE,QAAQ4I,IACf,MAAM,GAAEE,EAAE,GAAEf,EAAE,MAAEc,EAAK,KAAEpJ,GAASmJ,EAC1B3L,EAASwC,EAAO,SAAW,SACjC2lB,GAAUsJ,IAAI,GAAGzxB,MAAW6L,MAAOD,OAElCmG,GAAGA,EAAEhP,QAAQsH,IACdA,EAAKuB,OAASuc,GAAUsJ,IAAI,WAAWpnB,EAAKwB,OAAOxB,EAAKuB,WAEvDlO,GACDA,EAAEqF,QAAQgD,GAAOqiB,GAAWqJ,IAAI,WAAW1rB,EAAI6F,UAAU7F,EAAImF,WA+kFzC+1B,EA7kFf,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,SACNgM,MAAOjN,EACPqY,IAAKtZ,EACLwJ,MAAO07B,EACP97B,QAAS0Z,EACT1M,MAAO+uB,IAqkFW/B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,GArpFI,IAAS7rB,EAAGjB,EAAGqU,EAAG6wB,EAAGpiB,EAAIqiB,EAwpFpC,OAAO/B,EAtIAgC,MACMtY,IACTsW,EAmON,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAiBa,EAAoBE,EAAUU,EAE/EjC,EAAKlB,IACLqB,EAAK+B,QACMxY,GACJwW,OACMxW,IACT0W,EAAK+B,QACMzY,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK8B,QACM1Y,GACJwW,OACMxW,IACT8W,EAAK6B,QACM3Y,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACHwW,OACMxW,IACV2X,EAghatB,WACE,IAAIrB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoC,QACM7Y,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK+B,QACM7Y,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK+B,QACM7Y,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA7lamByC,MACM/Y,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACV6X,EAAMoB,QACMjZ,GACJwW,OACMxW,IACVuY,EAAMW,QACMlZ,IACVuY,EAAM,MAEJA,IAAQvY,GACKsW,EACfG,EAhvFvB,SAAS0C,EAAIhlC,EAAGY,EAAGzB,EAAG8lC,EAAGC,GAK5B,GAJIllC,IACFwpB,GAAUsJ,IAAI,WAAW9yB,EAAEkN,OAAOlN,EAAEiN,SACpCjN,EAAEmM,GAAK,MAELhN,EAAG,CACL,IAAI8N,EAAQjN,GAAKA,EAAEiN,OAAS,KACzBpL,MAAMC,QAAQmjC,IACfA,EAAE7gC,QAAQ,CAAC+gC,EAAKC,KACd,GAAGD,EAAIplC,MAAMgF,QAAU5F,EAAE4F,OACvB,MAAM,IAAI/C,MAAM,yDAAwDojC,EAAI,MAIlFjmC,EAAEiF,QAAQjF,GAAKsqB,GAAWqJ,IAAI,WAAW7lB,MAAU9N,MAErD,MAAO,CACLqqB,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM+jC,EACN/3B,MAAO,CAACjN,GACRgG,QAAS7G,EACTwO,OAAQs3B,EACRvgC,UAAW9D,EACXomB,oBAAqBke,IAutFMG,CAAO/C,EAAIG,EAAIE,EAAIa,EAAKE,EAAKU,GAClCjC,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAuCzBoV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA1VEmD,MACMzZ,IACTsW,EA2VR,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EAAUC,EAE3DtB,EAAKlB,IACLqB,EAAK+B,QACMxY,GACJwW,OACMxW,IACT0W,EAAKgD,QACM1Z,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK6B,QACMzY,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAK4B,QACM1Y,GACJwW,OACMxW,IACT0X,EAAKiB,QACM3Y,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAMsB,QACMjZ,GACJwW,OACMxW,IACV4X,EAAMsB,QACMlZ,IACV4X,EAAM,MAEJA,IAAQ5X,GACKsW,EACfG,EAx0Ff,SAAS0C,EAAIQ,EAAIC,EAAIzlC,EAAGY,EAAGqkC,EAAGC,GAC7BllC,IACFwpB,GAAUsJ,IAAI,WAAW9yB,EAAEkN,OAAOlN,EAAEiN,SACpCwc,GAAWqJ,IAAI,WAAW9yB,EAAEiN,eAC5BjN,EAAEmM,GAAK,MAET,MAAMtJ,EAAS,CAAC2iC,EAAIC,GAAIthC,OAAO8gC,GAAKA,GAAGljC,IAAIkjC,GAAKA,EAAE,IAAMA,EAAE,GAAGjiC,eAAea,KAAK,KACjF,MAAO,CACL2lB,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM+jC,EACN/3B,MAAO,CAACjN,GACRgG,QAAS,KACT2H,OAAQs3B,EACRvgC,UAAW9D,EACXiC,SACAmkB,oBAAqBke,IAuzFFQ,CAAOpD,EAAIC,EAAIE,EAAIE,EAAIY,EAAIC,EAAKC,GACrCtB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA7bIwD,MACM9Z,IACTsW,EA8bV,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAiBa,EAAUC,EAE3DtB,EAAKlB,IACLqB,EAAK+B,QACMxY,GACJwW,OACMxW,IACT0W,EAAK+B,QACMzY,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK8B,QACM1Y,GACJwW,OACMxW,IACT8W,EAAK6B,QACM3Y,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,GACJgY,OACMhY,GACHwW,OACMxW,IACV2X,EAAMM,QACMjY,GACJwW,OACMxW,IACV4X,EAAMsB,QACMlZ,IACV4X,EAAM,MAEJA,IAAQ5X,GACKsW,EAp5FrB6C,EAq5FkB1C,EAr5FX1hC,EAq5FmB+hC,EAr5FhB5jC,EAq5FoBykC,EAr5FjB0B,EAq5FsBzB,GAr5F/BzjC,EAq5FkByiC,KAn5FhCjZ,GAAUsJ,IAAI,WAAW9yB,EAAEkN,OAAOlN,EAAEiN,SACpCwc,GAAWqJ,IAAI,WAAW9yB,EAAEiN,eAC5BjN,EAAEmM,GAAK,MAi5FSm2B,EA/4FX,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM+jC,EACN/3B,MAAO,CAACjN,GACRgG,QAAS,KACTtB,UAAW9D,EACXyX,IAAKtZ,EACLioB,oBAAqBke,IAu4FP/C,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAz8FI,IAASmZ,EAAIhlC,EAAGY,EAAG7B,EAAGmmC,EA48FjC,OAAO/C,EA7hBMyD,MACM/Z,IACTsW,EAiIZ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EAEjDrB,EAAKlB,IACLqB,EAAKuD,QACMha,GACJwW,OACMxW,IACT0W,EAAKqB,QACM/X,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKsB,QACMlY,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKqB,QACMnY,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKL,QACMrX,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAML,QACMtX,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EACfG,EA5qFX,SAAStiC,EAAGoT,EAAG6wB,EAAGpiB,EAAI9iB,GAQzB,GAPGiB,GAAGA,EAAEoE,QAAQ0hC,GAAMtc,GAAUsJ,IAAI,WAAWgT,EAAG54B,OAAO44B,EAAG74B,UAC1DmG,GAAGA,EAAEhP,QAAQ4I,IACb,MAAM,GAAEE,EAAE,GAAEf,EAAE,MAAEc,EAAK,KAAEpJ,GAASmJ,EAC1B3L,EAASwC,EAAO,SAAW,SAC7BoJ,GAAOuc,GAAUsJ,IAAI,GAAGzxB,MAAW6L,MAAOD,KACzCpJ,GAAM4lB,GAAWqJ,IAAI,WAAW7lB,aAE7B,OAANjN,GAA2B,IAAboT,EAAErO,OAAc,CAChC,MAAMiI,EAAYoG,EAAE,GACpBpT,EAAI,CAAC,CACHkN,GAAIF,EAAUE,GACdD,MAAOD,EAAUC,MACjBd,GAAIa,EAAUb,GACdmJ,UAAU,IAGd,MAAO,CACLkU,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,SACNgM,MAAOjN,EACPiV,KAAM7B,EACN7K,MAAO07B,EACP97B,QAAS0Z,EACT1M,MAAOpW,IAkpFQgnC,CAAOxD,EAAIE,EAAIE,EAAIY,EAAIC,GAC5BrB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA1NQ6D,MACMna,IACTsW,EA4hBd,WACE,IAAIA,GAEJA,EAwoCF,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EAy5JF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA1qQQ,YA2qQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7Q,KAEpCkR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA37JFgE,MACMta,GACJwW,OACMxW,IACT0W,EAAKgC,QACM1Y,GACJwW,OACMxW,GACMsW,EApgIF1jC,EAqgIA6jC,EArgIGtiC,EAqgICuiC,EApgIjB/Y,GAAUsJ,IAAI,GAAGr0B,MAAMuB,EAAEkN,OAAOlN,EAAEiN,SAogIlCq1B,EAngIO,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAEuE,cACRiK,MAAOjN,IA+/HXmiC,EAAKG,IAcXrB,GAAckB,EACdA,EAAKtW,GArhIK,IAASptB,EAAGuB,EAwhIxB,OAAOmiC,EAxqCFiE,MACMva,IACTsW,EAyqCJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,IACLqB,EA25JF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA7sQQ,WA8sQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5Q,KAEpCiR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA77JFkE,MACMxa,GACJwW,OACMxW,IACT0W,EAAK+D,QACMza,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,IACT8W,EAAK6D,QACM3a,GACJwW,OACMxW,IACT0X,EAAKkD,QACM5a,GACHwW,OACMxW,GACKsW,EAxiId1jC,EAyiIY6jC,EAziITp1B,EAyiIaq1B,EAziITpvB,EAyiIasvB,EAziIVt2B,EAyiIcw2B,EAziIVv1B,EAyiIcm2B,EAA7BjB,EAviIL,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAEuE,cACRjC,SAAUmM,EACV7K,KAAM8Q,EACNhH,GAAIA,GAAMA,EAAG,GAAGnJ,cAChBoK,WAgiIQ+0B,EAAKG,IAsCvBrB,GAAckB,EACdA,EAAKtW,GAjlIK,IAASptB,EAAGyO,EAAIiG,EAAGhH,EAAIiB,EAolInC,OAAO+0B,EA7uCAuE,MACM7a,IACTsW,EA8uCN,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAgBc,EAASC,EAEjDrB,EAAKlB,IACLqB,EAAKqE,QACM9a,GACJwW,OACMxW,IACT0W,EAAKqE,QACM/a,GACJwW,OACMxW,IACT4W,EAAKmB,QACM/X,GACMsW,EAvlIJ1jC,EAwlIE6jC,EAxlIC1iC,EAwlIG2iC,GAxlIAviC,EAwlIIyiC,IAvlIjBziC,EAAEoE,QAAQ0hC,GAAMtc,GAAUsJ,IAAI,GAAGr0B,MAAMqnC,EAAG54B,OAAO44B,EAAG74B,UAulIxDq1B,EAtlIK,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAEuE,cACR5B,QAASxB,EAAEoD,cACX3D,KAAMW,IAilIRmiC,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,GA5mIK,IAASptB,EAAGmB,EAAGI,EA8mIvBmiC,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKqE,QACM9a,GACJwW,OACMxW,IACT0W,EAAKsE,QACMhb,GACJwW,OACMxW,IACT4W,EAAKqE,QACMjb,GACJwW,OACMxW,GACJkb,OACMlb,GACJwW,OACMxW,IACT0X,EAAKgB,QACM1Y,GACHwW,OACMxW,IACV2X,EAquBxB,WACE,IAAIrB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,IACLqB,EAAK0E,QACMnb,IACTyW,EAAK2E,MAEP,GAAI3E,IAAOzW,EAAY,CAoBrB,IAnBAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKuE,QACMnb,IACT4W,EAAKwE,MAEHxE,IAAO5W,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAGVxB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKuE,QACMnb,IACT4W,EAAKwE,MAEHxE,IAAO5W,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAGVxB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKrV,EAAQqV,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAnyBqB+E,MACMrb,IACV2X,EAAM,MAEJA,IAAQ3X,GACJwW,OACMxW,GACKsW,EACfG,EAhoId,SAAS7jC,EAAGmB,EAAGlB,EAAGsB,EAAGknB,GACzB,MAAO,CACLsC,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAEuE,cACR5B,QAASxB,EAAEoD,cACX3D,KAAMX,EACNuO,MAAOjN,EACPuS,QAAS2U,IAunIUigB,CAAQ7E,EAAIC,EAAIE,EAAIc,EAAIC,GAC7BrB,EAAKG,IAMPrB,GAAckB,EACdA,EAAKtW,KAuCzBoV,GAAckB,EACdA,EAAKtW,IAIT,OAAOsW,EAr2CEiF,MACMvb,IACTsW,EAs2CR,WACE,IAAIA,GAEJA,EAmxBF,WACE,IAAIA,EAAIG,EAAQC,EAAgBI,EAAQY,EAASC,EAAUC,EAAK4D,EAAK3D,EAAUU,EAAUkD,EAAUC,EAInG,GAFApF,EAAKlB,IACLqB,EAAKkF,QACM3b,EAET,GADKwW,OACMxW,EAKT,IAJA0W,EAAKkF,QACM5b,IACT0W,EAAK,MAEHA,IAAO1W,EAET,GADKwW,OACMxW,EAET,GADK+a,OACM/a,EAET,GADKwW,OACMxW,EAKT,IAJA8W,EAAK+E,QACM7b,IACT8W,EAAK,MAEHA,IAAO9W,EAET,GADKwW,OACMxW,EAET,IADA0X,EAAKK,QACM/X,EAET,GADMwW,OACMxW,EAEV,IADA2X,EAqwBtB,WACE,IAAIrB,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAIxC,GAFApB,EAAKlB,IACLqB,EAAKmC,QACM5Y,EAET,GADKwW,OACMxW,EAET,IADA0W,EAAKqF,QACM/b,EAAY,CA6BrB,IA5BA2W,EAAK,GACLC,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKqE,QACM/b,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAEA4W,IAAO5W,GACZ2W,EAAGl/B,KAAKm/B,GACRA,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKqE,QACM/b,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAGL2W,IAAO3W,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKmC,QACMhZ,GACMsW,EACfG,EAAKlW,EAAQmW,EAAIC,GACjBL,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA12BmB0F,MACMhc,EAEV,GADMwW,OACMxW,EAAY,CAGtB,IAFA4X,EAAM,GACN4D,EAAMS,KACCT,IAAQxb,GACb4X,EAAIngC,KAAK+jC,GACTA,EAAMS,KAEJrE,IAAQ5X,IACVwb,EAAMhF,QACMxW,IACV6X,EAukC9B,WACE,IAAIvB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKyF,QACMlc,EAAY,CAgCrB,IA/BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoF,QACMlc,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoF,QACMlc,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAnzLSjW,GAmzLKiW,EAAIF,GAClBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA1pC2B6F,MACMnc,IACV6X,EAAM,MAEJA,IAAQ7X,GACJwW,OACMxW,IACVuY,EAAMmB,QACM1Z,IACVuY,EAAM6D,MAEJ7D,IAAQvY,IACVuY,EAAM,MAEJA,IAAQvY,GACJwW,OACMxW,IACVyb,EAAMd,QACM3a,IACVyb,EAAM,MAEJA,IAAQzb,GACJwW,OACMxW,IACV0b,EAAMtE,QACMpX,IACV0b,EAAM,MAEJA,IAAQ1b,GACKsW,EAr1JpC1jC,EAs1JkC6jC,EAt1J/B4F,EAs1JmC3F,EAt1J/BrgB,EAs1JmCygB,EAt1J3BxjC,EAs1JmCqkC,EAt1JhC2E,EAs1JqC1E,EAt1JhC2E,EAs1JqC1E,EAt1JjC2E,EAs1JsCjE,EAt1JlCj4B,EAs1JuCm7B,EAt1JnCgB,EAs1JwCf,GAt1J/DvnC,EAs1JkCujC,IAr1JrDvjC,EAAEoE,QAAQ0hC,GAAMtc,GAAUsJ,IAAI,WAAWgT,EAAG54B,OAAO44B,EAAG74B,UAq1J1Bq1B,EAp1J3B,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAE,GAAGuE,cACX5B,QAAS,QACTwf,UAAWsnB,GAAMA,EAAG,GAAGllC,cACvBoY,cAAc8G,EACdjV,MAAOjN,EACPghB,eAAgBqnB,GAAMA,EAAG,GAAGrlC,cAC5BmJ,GAAIA,GAAMA,EAAG,GAAGnJ,cAChBke,WAAYonB,GAAMA,EAAGvkC,IACrBiX,mBAAoB7b,EACtBoiB,WAAa4mB,EACXrnB,cAAesnB,IAu0JejG,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EA16JK,IAASptB,EAAGypC,EAAIhmB,EAAKliB,EAAGb,EAAGgpC,EAAKC,EAAIC,EAAIl8B,EAAIm8B,EA46JpDnG,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKkF,QACM3b,GACJwW,OACMxW,IACT0W,EAAKkF,QACM5b,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACJ+a,OACM/a,GACJwW,OACMxW,IACT8W,EAAK+E,QACM7b,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKK,QACM/X,GACHwW,OACMxW,IACV2X,EA6gCxB,SAAS+E,IACP,IAAIpG,EAAYI,GAEhBJ,EA6lCF,WACE,IAAIA,EAAYI,EAEhBJ,EAAKlB,GACAuH,OACM3c,GACJwW,OACMxW,IACT0W,EAAKqB,QACM/X,GACMsW,EAEfA,EA/wNO,CACLlhC,KAAM,OACNgM,MA4wNYs1B,KAWlBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvnCFsG,MACM5c,IACTsW,EAAKlB,GACAwD,OACM5Y,GACJwW,OACMxW,IACT0W,EAAKgG,OACM1c,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,GA/0LLhvB,EAg1LIovB,GA/0LhB3/B,aAAc,EAg1LZu/B,EA/0LGhvB,IAi2LX8tB,GAAckB,EACdA,EAAKtW,IAp2LI,IAAS1Y,EAw2LtB,OAAOgvB,EAtjCqBoG,MACM1c,GACKsW,EACfG,EAv7JZ,SAAS7jC,EAAGypC,EAAIhmB,EAAKliB,EAAG0oC,GAE5B,OADG1oC,GAAGA,EAAEoE,QAAQ0hC,GAAMtc,GAAUsJ,IAAI,WAAWgT,EAAG54B,OAAO44B,EAAG74B,UACrD,CACLuc,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAE,GAAGuE,cACX5B,QAAS,QACTwf,UAAWsnB,GAAMA,EAAG,GAAGllC,cACvBoY,cAAc8G,EACdjV,MAAOjN,EACP2gB,KAAM+nB,IA46JWC,CAAQrG,EAAIC,EAAII,EAAIY,EAAIC,GAC7BrB,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAIT,OAAOsW,EAjgCFyG,MACM/c,IACTsW,EAkgCJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,IACLqB,EAAKkF,QACM3b,GACJwW,OACMxW,IACT0W,EAAK+D,QACMza,IACT0W,EAm+HR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAj9QQ,WAk9QTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnQ,KAEpCwQ,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EArgII0G,IAEHtG,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiF,QACM7b,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKmG,QACMjd,GACJwW,OACMxW,IACT0X,EAy+BlB,WACE,IAAIpB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAIxB,GAFAN,EAAKlB,IACLqB,EAAKyG,QACMld,EAAY,CAiBrB,IAhBAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsG,QACMld,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsG,QACMld,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKrV,EAAQqV,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA9hCc6G,MACMnd,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EA1/JZ1jC,EA2/JU6jC,EA3/JJpgB,EA2/JYugB,EA3/JPziC,EA2/JW2iC,EA3/JRxjC,EA2/JYokC,EAA7BjB,EA1/JH,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAE,GAAGuE,cACX5B,QAAS,WACTga,cAAc8G,EACdnhB,SAAUf,EACVgb,mBAAoB7b,IAm/JdgjC,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA/hKK,IAASptB,EAAMyjB,EAAKliB,EAAGb,EAkiKnC,OAAOgjC,EAzkCA8G,IAGP,OAAO9G,EA92CI+G,MACMrd,IACTsW,EA+2CV,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAytlBF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA1/pBQ,aA2/pBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnD,KAEpCwD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7gqB6B,aAghqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5vlBFgH,MACMtd,GACJwW,OACMxW,IACT0W,EAAKqE,QACM/a,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKmB,QACM/X,GACMsW,EAtsIJ1jC,EAusIE6jC,EAvsIC8G,EAusIG7G,GAvsICviC,EAusIGyiC,IAtsIjBziC,EAAEoE,QAAQ0hC,GAAMtc,GAAUsJ,IAAI,GAAGr0B,MAAMqnC,EAAG54B,OAAO44B,EAAG74B,UAssIxDq1B,EArsIK,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAMxC,EAAEuE,cACR5B,QAASgoC,GAAMA,EAAGpmC,eAAiB,QACnC3D,KAAMW,IAgsIRmiC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA3tIK,IAASptB,EAAG2qC,EAAIppC,EA8tI5B,OAAOmiC,EAx5CMkH,MACMxd,IACTsW,EAy5CZ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAAKgH,QACMzd,GACJwW,OACMxW,GACJ+a,OACM/a,GACJwW,OACMxW,IACT4W,EAg2NV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKiH,QACM1d,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4G,QACM1d,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4G,QACM1d,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA76NMqH,MACM3d,GACMsW,GAnuIJniC,EAouIEyiC,GAnuIbr+B,QAAQqlC,GAAMA,EAAGrlC,QAAQslC,GAAMA,EAAGz8B,OAASuc,GAAUsJ,IAAI,WAAW4W,EAAGx8B,OAAOw8B,EAAGz8B,WAmuIjFq1B,EAluIK,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,SACNgM,MAAOjN,IA8tITmiC,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,GAxvIK,IAAS7rB,EA2vIrB,OAAOmiC,EA/7CQwH,MACM9d,IACTsW,EAg8Cd,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EAquiBF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlsnBQ,SAmsnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1E,KAEpC+E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EArtnB6B,SAwtnB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxwiBFyH,MACM/d,GACJwW,OACMxW,IACT0W,EAAKsH,QACMhe,GACMsW,EA7vIAhvB,EA8vIFovB,EAAbD,EA7vIO,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACNoB,KAAM8Q,IAyvIVgvB,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,GA1wIK,IAAS1Y,EA6wIrB,OAAOgvB,EA19CU2H,MACMje,IACTsW,EA29ChB,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EA29dF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA3ljBQ,QA4ljBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7H,KAEpCkI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA7/dF4H,MACMle,GACJwW,OACMxW,IACT0W,EAAKkE,QACM5a,GACMsW,EAhxIA/iC,EAixIFmjC,EAhxIX/Y,GAAUsJ,IAAI,QAAQ1zB,WAgxIxBkjC,EA/wIS,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,MACNiM,GAAI9N,IA2wIV+iC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,GA7xIK,IAASzsB,EAgyIrB,OAAO+iC,EAr/CY6H,MACMne,IACTsW,EA66ElB,WACE,IAAIA,EAAIG,EAAgBG,EAAQE,EAEhCR,EAAKlB,IACLqB,EAo8HF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp/QQ,UAq/QTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlQ,KAEpCuQ,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAt+HF8H,MACMpe,GACJwW,OACMxW,GACJ+a,OACM/a,GACJwW,OACMxW,IACT4W,EAAKmB,QACM/X,GACJwW,OACMxW,IACT8W,EAi+Bd,WACE,IAAIR,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK4H,QACMre,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKuH,QACMre,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKuH,QACMre,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA9iCUgI,MACMte,GACMsW,EA1iKLhvB,EA2iKOwvB,GA3iKV3iC,EA2iKMyiC,IA1iKVziC,EAAE+E,OAAS,GAAG/E,EAAEoE,QAAQ6I,GAASuc,GAAUsJ,IAAI,UAAU7lB,EAAMC,OAAOD,EAAMA,UA0iK/Eq1B,EAziKC,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,QACNgM,MAAOjN,EACPqC,KAAM8Q,IAoiKJgvB,EAAKG,IA0BjBrB,GAAckB,EACdA,EAAKtW,GAvkKK,IAAS7rB,EAAGmT,EA0kKxB,OAAOgvB,EA/9EciI,MACMve,IACTsW,EAo/CpB,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKuB,QACMhY,GACJwW,OACMxW,IACT0W,EAgomBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GArhrBQ,WAshrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7C,KAEpCkD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxirB6B,WA2irB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAnqmBEkI,MACMxe,IACT0W,EAoqmBR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxjrBQ,YAyjrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5C,KAEpCiD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA3krB6B,YA8krB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvsmBImI,MACMze,IACT0W,EAwsmBV,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GApiuBQ,UAqiuBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStS,KAEpC2S,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAhnrB6B,UAmnrB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3umBMoI,MACM1e,IACT0W,EAkxmBZ,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnqrBQ,YAoqrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1C,KAEpC+C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAtrrB6B,YAyrrB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EArzmBQqI,MACM3e,IACT0W,EAszmBd,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAtsrBQ,iBAusrBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzC,KAEpC8C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAztrB6B,iBA4trB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAz1mBUsI,IAKTlI,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiI,QACM7e,GACMsW,EArzIJiH,EAszIE7G,GAtzIE9jC,EAszIEgkC,GArzInBrhC,QAAUgoC,EAqzIR9G,EApzIG,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,MACNoB,KAAM5D,IAgzIN0jC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA10IK,IAASud,EAAI3qC,EA60IzB,OAAO0jC,EAziDgBwI,MACM9e,IACTsW,EA0iDtB,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EA0veF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAl2mBO,SAm2mBRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStU,IAEpC2U,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5xeFyI,MACM/e,GACJwW,OACMxW,GACJgf,OACMhf,GACJwW,OACMxW,IACT4W,EAw6BV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKwI,QACMjf,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmI,QACMjf,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmI,QACMjf,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKnV,EAAQmV,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAr/BM4I,MACMlf,GACMsW,EAn1IJ6I,EAo1IEvI,EAAbH,EAn1IG,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACNG,QAAS,SACToJ,OAAQwgC,IA80IR7I,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,GAx2IK,IAASmf,EA22IrB,OAAO7I,EAhlDkB8I,MACMpf,IACTsW,EAilDxB,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EA4qeF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAx5jBQ,WAy5jBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvH,KAEpC4H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA9seF+I,MACMrf,GACJwW,OACMxW,GACJgf,OACMhf,GACMsW,EACfG,EA72IO,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,SACNG,QAAS,WAy2Ib+gC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3mDoBgJ,MACMtf,IACTsW,EA4mD1B,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAQY,EAASC,EAEjDrB,EAAKlB,IACLqB,EAAK8I,QACMvf,GACJwW,OACMxW,GA73ID,WA83IJF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASxV,IAEpC8V,IAAO1W,IAn4IH,WAo4IFF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASvV,KAGtC6V,IAAO1W,IACT2W,EAAKH,QACMxW,GA54IL,SA64IAF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAStV,IAEpC8V,IAAO5W,GACMsW,EAn5IJniC,EAo5IEuiC,EAAbD,EAn5IG,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACN0C,OAAQ,OACRvC,QAASpB,EAAEgD,gBA84IXm/B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAx6IK,IAAS7rB,EA06IjBmiC,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8I,QACMvf,GACJwW,OACMxW,GAp6IH,WAq6IFF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASrV,IAEpC2V,IAAO1W,IACT2W,EAAKH,QACMxW,GA56IP,WA66IEF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASpV,IAEpC4V,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK0I,QACMxf,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKQ,QACMlY,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAML,QACMtX,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EAx8IlBmJ,EAy8IgB3I,EAz8IX1tB,EAy8IesuB,EAz8ITpuB,EAy8IaquB,EAArBlB,EAx8IX,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACN0C,OAAQ,SACRvC,QAAS,SACTmqC,GAAID,EACJr2B,OACAE,UAg8IcgtB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8I,QACMvf,GACJwW,OACMxW,GACT0W,EAAKtB,GA/+ID,cAg/IAtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bw/B,EAAK7W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAASnV,IAEpC0V,IAAO3W,IACT4W,EAAKJ,QACMxW,GAv/IT,QAw/IIF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B0/B,EAAK/W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAASlV,IAEpC2V,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAOToV,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,IA5gJP,cA6gJEF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASjV,KAGtCuV,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAAK+I,QACM3f,IACT4W,EAAKuB,MAEHvB,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EACfG,EA/hJF,SAASmJ,EAAGt4B,GAClB,IAAI/R,EAAUS,MAAMC,QAAQ2pC,IAAMA,GAAK,CAACA,GACxC,MAAO,CACLjiB,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACN0C,OAAQvC,EAAQ,IAAMA,EAAQ,GAAG4B,cACjC5B,QAASA,EAAQ,GAAG4B,cACpBX,KAAM8Q,IAshJGu4B,CAAQnJ,EAAIE,GACjBN,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAqtBR,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAK8I,QACMvf,GACJwW,OACMxW,GArpKD,WAspKJF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS7U,IAEpCmV,IAAO1W,GACJwW,OACMxW,IACT4W,EAu8BV,WACE,IAAIN,EAAIG,EAAQC,EAAQE,EAAIC,EAAIC,EAAIgF,EAEpCxF,EAAKlB,GAxgMQ,QAygMTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9T,IAEpCmU,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKkE,QACM5a,GACJwW,OACMxW,GACT4W,EAAKxB,IACLyB,EAAKiJ,QACM9f,IACT8W,EAAKN,QACMxW,IACT8b,EAAKlB,QACM5a,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,IAWlB1G,GAAcwB,EACdA,EAAK5W,GAEH4W,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EA6iCd,WACE,IAAIR,EAAYI,EAEhBJ,EAAKlB,GACA2K,OACM/f,GACJwW,OACMxW,IACT0W,EAqBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKmE,QACM5a,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8D,QACM5a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8D,QACM5a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKnV,EAAQmV,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAlGE0J,MACMhgB,GACMsW,EAEfA,EADcI,IAWlBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvkCU2J,MACMjgB,IACT8W,EAAK,MAEHA,IAAO9W,GACMsW,EArjMD4J,EAsjMQpJ,EAAtBL,EArjMD,CACLta,KAojMoBua,EAnjMpB5uB,MAHiBq4B,EAsjMOvJ,IAnjMbuJ,EAAE,GACb/jB,UAAW8jB,GAmjML5J,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAllMM,IAAYmgB,EAAGD,EAqlM5B,OAAO5J,EAzhCM8J,MACMpgB,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EAnqKJ/uB,EAoqKEqvB,EAAbH,EAnqKG,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACNG,QAAS,SACTwU,IAAKxC,IA8pKL+uB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAxrKK,IAASzY,EA2rKrB,OAAO+uB,EApwBI+J,MA1kJC,IAASZ,EAAKr2B,EAAME,EA+kJhC,OAAOgtB,EA11DsBgK,MACMtgB,IACTsW,EA21D5B,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EAAK8J,QACMvgB,IACTyW,EAm2IJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAz1QQ,aA01QTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxQ,KAEpC6Q,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAr4IAkK,IAEH/J,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKkE,QACM5a,GACMsW,EA9jJAniC,EA+jJFuiC,EAAbD,EA9jJO,CACL9Y,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAK,CACH9C,KAAM,OACNgM,MAAOjN,IA0jJXmiC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,GA3kJK,IAAS7rB,EA8kJrB,OAAOmiC,EAx3DwBmK,IAe/B,OAAOnK,EAxkBUoK,MACM1gB,IACTsW,EAykBhB,WACE,IAAIA,EAAIG,EAERH,EAAK,GACLG,EAAKkK,KACL,KAAOlK,IAAOzW,GACZsW,EAAG7+B,KAAKg/B,GACRA,EAAKkK,KAGP,OAAOrK,EAnlBYsK,IASnB,OAAOtK,EAhCAuK,IAGAvK,EA0mBT,SAASqK,KACP,IAAIrK,EAAYI,EAkChB,OAhCAJ,EAAKlB,GACUA,GA5/FS0L,GAAU,KAAW,OA+/FtC,EAEA9gB,KAEIA,GACJwW,OACMxW,IACT0W,EAAKmI,QACM7e,IACT0W,EAqER,WACE,IAAIJ,EAAYI,EAEhBJ,EAAKlB,GAi2LP,WACE,IAAIkB,EAznQS,WA2nQTxW,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bm/B,EAAKxW,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS/Q,KAGxC,OAAOiR,EA32LFyK,KACM/gB,GACJwW,OACMxW,IACT0W,EAAKsK,QACMhhB,GACMsW,EAEfA,EA5kGS,CAAElhC,KAAM,SAAUoB,KA2kGdkgC,KAWjBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA/FI2K,IAEHvK,IAAO1W,GACMsW,EAEfA,EA3gGS,CAAE9vB,KA0gGCkwB,EA1gGQwK,KAAMJ,MA6gG1B1L,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASuI,KACP,IAAIvI,EAAIG,EAAQC,EAAQE,EA2CxB,OAzCAN,EAAKlB,IACLqB,EAAK0K,QACMnhB,IACTyW,EAAK2K,MAEH3K,IAAOzW,GACJwW,OACMxW,IACT0W,EA42LN,WACE,IAAIJ,EA/lQS,OAimQTxW,EAAMsa,OAAOhF,GAAa,IAC5BkB,EAlmQW,KAmmQXlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAShR,KAGxC,OAAOkR,EAv3LE+K,MACMrhB,IACT0W,EAAK4K,MAEH5K,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKoK,QACMhhB,GACMsW,EAEfA,EADAG,EA9iGG,CACLrhC,KAAM,SACNkB,KA4iGcmgC,EA3iGdj/B,OA2iGkBk/B,EA1iGlBngC,MA0iGsBqgC,KAWxBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAgCT,SAAS0K,KACP,IAAI1K,EAaJ,OAXAA,EAAKkB,QACMxX,IACTsW,EA4KJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAEhCR,EAAKlB,IACLqB,EAAK0K,QACMnhB,GACJwW,OACMxW,IACT0W,EAAK6K,QACMvhB,GACJwW,OACMxW,IACT4W,EAAKuK,QACMnhB,GACJwW,OACMxW,IACT8W,EAAK0K,QACMxhB,GACMsW,EAEfA,EADAG,EA3xGC,CACLrhC,KAAM,OACNqsC,OAyxGiBhL,EAxxGjBiL,OAwxGyB9K,EAvxGzBvb,GAuxGqBqb,EAtxGrB5zB,GAsxG6Bg0B,KA2BrC1B,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA9NAqL,MACM3hB,IACTsW,EAAKsL,QACM5hB,IACTsW,EAmaR,WACE,IAAIA,EAAYI,EAEhBJ,EAAKlB,GACAyM,OACM7hB,GACJwW,OACMxW,IACT0W,EAAKoL,QACM9hB,GACJwW,OACMxW,GACJ+hB,OACM/hB,GACMsW,EAEfA,EAj/GG,CAAElhC,KAAM,QAASlB,MAg/GPwiC,KAmBrBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAzcI0L,IAKJ1L,EAGT,SAASsL,KACP,IAAItL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKwL,QACMjiB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsL,QACMliB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmL,QACMjiB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsL,QACMliB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmL,QACMjiB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKrW,EAAQqW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS2L,KACP,IAAI3L,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK0L,QACMniB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKwL,QACMpiB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKqL,QACMniB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKwL,QACMpiB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKqL,QACMniB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKrW,EAAQqW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAwDT,SAAS6L,KACP,IAAI7L,EAAYI,EAtzGKpvB,EAu2GrB,OA/CAgvB,EAAK+L,QACMriB,IACTsW,EAAK6K,QACMnhB,IACTsW,EAAK0H,QACMhe,IACTsW,EAAKgM,QACMtiB,IACTsW,EAAKlB,GACAwD,OACM5Y,GACJwW,OACMxW,IACT0W,EAAKkL,QACM5hB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,GA30GZhvB,EA40GUovB,GA30GrB3/B,aAAc,EA40GNu/B,EA30GHhvB,IA61GL8tB,GAAckB,EACdA,EAAKtW,IAORsW,EAGT,SAAS0H,KACP,IAAI1H,EAAIG,EAAgBG,EA6DxB,OA3DAN,EAAKlB,IACLqB,EAAK8L,QACMviB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKkL,QACM9hB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADAG,EA13GC,CACLrhC,KAAM,WACN5B,KAw3GiBijC,EAv3GjBx8B,KAAM,CACJ7E,KAAM,YACNlB,MAq3GmB0iC,MAWrBxB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8L,QACMviB,IACMsW,EACfG,EAp5GQ,SAASjjC,GACf,MAAO,CACH4B,KAAM,WACN5B,KAAMA,EACNyG,KAAM,MAg5GPuoC,CAAQ/L,IAEfH,EAAKG,GAGAH,EAGT,SAASwL,KACP,IAAIxL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK0L,QACMniB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKqL,QACMniB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKqL,QACMniB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKlW,EAAQkW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA4CT,SAAS2B,KACP,IAAI3B,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKgM,QACMziB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK2L,QACMziB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK2L,QACMziB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKlW,EAAQkW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASmM,KACP,IAAInM,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAQE,EAAiBa,EAvlH5B+K,EAsxHrB,OA7LApM,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKqE,QACM5a,IACT0W,EAAKF,QACMxW,IACT2W,EAAKgM,QACM3iB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,IACTuW,EAAKC,QACMxW,IACT0W,EAAKmC,QACM7Y,IACT2W,EAAKH,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBwB,EA5nHE,IA6nHFxB,OAEAwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS3V,IAEpCmW,IAAO5W,GACJwW,OACMxW,IACT8W,EAAK8L,QACM5iB,GACMsW,EAEfA,EADAG,EAroHC,CAAE/1B,OAqoHcg2B,EAroHHxiC,MAqoHO4iC,EAroHG11B,OADjBshC,EAsoHMjM,IAroHyBiM,EAAI,MAgpH9CtN,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKqE,QACM5a,IACT0W,EAAKF,QACMxW,IACT2W,EAAKgM,QACM3iB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,IACTuW,EAAKC,QACMxW,IACT0W,EAAKmC,QACM7Y,IACT2W,EAAKH,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBwB,EAxsHA,IAysHAxB,OAEAwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS3V,IAEpCmW,IAAO5W,GACJwW,OACMxW,IACT8W,EAAK+L,QACM7iB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACHwW,OACMxW,IACV2X,EAAMsD,QACMjb,GACJwW,OACMxW,GACJgZ,OACMhZ,GACKsW,EAEfA,EADAG,EA3tHhB,SAASiM,EAAKpvC,EAAG8lC,GACrB,MAAO,CAAE14B,OAAQpN,EAAGY,MAAOklC,EAAGh4B,MAAOshC,GAAOA,EAAI,GAAIntC,QAAS,UA0tHpCutC,CAAQrM,EAAIC,EAAIiB,KAmCrCvC,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAASkC,KACP,IAAIlC,EAAIG,EAmBR,OAjBAH,EAAKlB,IACLqB,EA0hKF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9jQQ,WA+jQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjR,KAEpCsR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5jKFyM,MACM/iB,IACMsW,EACfG,EA1xH8B,WA4xHhCH,EAAKG,KACMzW,IACTsW,EAAKlB,IACLqB,EAAK2F,QACMpc,IACMsW,EACfG,EAjyH4B,WAmyH9BH,EAAKG,GAGAH,EAGT,SAASqC,KACP,IAAIrC,EAAYI,EAAQE,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,EAIjD,GAFArB,EAAKlB,GACA6N,OACMjjB,EAET,GADKwW,OACMxW,EAET,IADA0W,EAAKkC,QACM5Y,EAET,GADKwW,OACMxW,EAET,IADA4W,EAAKqG,QACMjd,EAAY,CA6BrB,IA5BA6W,EAAK,GACLC,EAAK1B,IACL0G,EAAKtF,QACMxW,IACT0X,EAAKoB,QACM9Y,IACTgjB,EAAMxM,QACMxW,IACV2X,EAAMsF,QACMjd,EAEV8W,EADAgF,EAAK,CAACA,EAAIpE,EAAIsL,EAAKrL,IAezBvC,GAAc0B,EACdA,EAAK9W,GAEA8W,IAAO9W,GACZ6W,EAAGp/B,KAAKq/B,GACRA,EAAK1B,IACL0G,EAAKtF,QACMxW,IACT0X,EAAKoB,QACM9Y,IACTgjB,EAAMxM,QACMxW,IACV2X,EAAMsF,QACMjd,EAEV8W,EADAgF,EAAK,CAACA,EAAIpE,EAAIsL,EAAKrL,IAezBvC,GAAc0B,EACdA,EAAK9W,GAGL6W,IAAO7W,IACT8W,EAAKN,QACMxW,IACT8b,EAAK9C,QACMhZ,GACMsW,EAEfA,EAt3HD9V,GAq3HcoW,EAAIC,KAWrBzB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EA2BP,OAzBIsW,IAAOtW,IACTsW,EAAKlB,GACA6N,OACMjjB,GACJwW,OACMxW,IACT0W,EAAKwM,QACMljB,GACMsW,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAAS2C,KACP,IAAI3C,EAOJ,OALAA,EA47BF,WACE,IAAIA,EAAYI,EAEhBJ,EAAKlB,GACAyN,OACM7iB,GACJwW,OACMxW,IACT0W,EAkrBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKyM,QACMljB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoM,QACMljB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoM,QACMljB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA/vBE6M,MACMnjB,GACMsW,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAt9BF8M,MACMpjB,IACTsW,EAAK+M,MAGA/M,EAGT,SAAS4C,KACP,IAAI5C,EAAYI,EAAwBgB,EAmExC,OAjEApB,EAAKlB,GACA8F,OACMlb,GACJwW,OACMxW,GAh8HD,cAi8HJF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASzV,IAEpC+V,IAAO1W,GACJwW,OACMxW,GACJsjB,OACMtjB,GACJwW,OACMxW,GACJ8X,OACM9X,GACJwW,OACMxW,IACT0X,EAAKO,QACMjY,GACMsW,EAEfA,EAp9HL,CACL/gC,QAAS,0BACTiX,IAi9HuBkrB,KA2BzBtC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAgxBT,SAAS6K,KACP,IAAI7K,EAAIG,EAAIF,EAxkJSxhC,EAAGxB,EA2lJxB,OAjBA+iC,EAAKlB,IACLqB,EAo5IF,WACE,IAAIH,GAEJA,EA/BF,WACE,IAAIA,EAt4QS,OAw4QTxW,EAAMsa,OAAOhF,GAAa,IAC5BkB,EAz4QW,KA04QXlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAStQ,KAGxC,OAAOwQ,EAoBFiN,MACMvjB,IACTsW,EAAKwJ,QACM9f,IACTsW,EArBN,WACE,IAAIA,EAEkC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAr5QW,IAs5QXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASrQ,KAGxC,OAAOuQ,EAUEkN,IAIT,OAAOlN,EA/5IFmN,MACMzjB,IACTuW,EAAK6K,QACMphB,GACMsW,EA/kJEvhC,EAglJJ0hC,EAhlJOljC,EAglJHgjC,EACjBD,EADAG,EA9kJS,CACLrhC,KAAM,SACH7B,EACHyD,OAAQjC,KAklJdqgC,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS8K,KACP,IAAI9K,EAAIG,EAAIF,EAvlJS/iC,EAAMH,EAmnJ3B,OA1BAijC,EAAKlB,IACLqB,EAAKwG,QACMjd,IACTuW,EAksBJ,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAK,GACLF,EAAKnB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBsB,EA1rKU,IA2rKVtB,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5U,IAEpCkV,IAAO1W,IACT2W,EAAKsG,QACMjd,EAETuW,EADAG,EAAK,CAACA,EAAIC,IAOZvB,GAAcmB,EACdA,EAAKvW,GAEP,KAAOuW,IAAOvW,GACZyW,EAAGh/B,KAAK8+B,GACRA,EAAKnB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBsB,EAjtKQ,IAktKRtB,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5U,IAEpCkV,IAAO1W,IACT2W,EAAKsG,QACMjd,EAETuW,EADAG,EAAK,CAACA,EAAIC,IAOZvB,GAAcmB,EACdA,EAAKvW,GAGLyW,IAAOzW,IACMsW,EACfG,EAruKU,SAASvjC,GACf,MAAM8B,EAAI,GACV,IAAK,IAAInC,EAAI,EAAGA,EAAIK,EAAEgG,OAAQrG,IAC5BmC,EAAEyC,KAAKvE,EAAEL,GAAG,IAEd,OAAOmC,EAguKN0uC,CAAQjN,IAIf,OAFAH,EAAKG,EAxvBEkN,MACM3jB,GACMsW,EA9lJE9iC,EA+lJJijC,EA/lJUpjC,EA+lJNkjC,EA7lJfuK,GAAQrpC,KAAKjE,GA8lJf8iC,EADAG,EA5lJS,CACLrhC,KAAM,MACN5B,KAAMA,EACN0L,QAAS7L,EACT2D,OAAQ,QA+lJdo+B,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKmN,QACM5jB,IACMsW,EACfG,EAnmJS,CACLrhC,KAAM,MACN5B,KAimJSijC,EAjmJDviC,MACRgL,QAAS,GACTC,OAAQ,KACRnI,OAAQ,OAgmJds/B,EAAKG,GAGAH,EAGT,SAAS4M,KACP,IAAI5M,EAAYI,EAqChB,OAnCAJ,EAAKlB,GACAwD,OACM5Y,GACJwW,OACMxW,IACT0W,EAAKmN,QACM7jB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADaI,IAmBrBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAiGT,SAASuF,KACP,IAAIvF,EAAIG,EA2CR,OAzCAH,EAAKlB,GAtuJO,OAuuJRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/U,IAEpCoV,IAAOzW,GACJwW,OACMxW,GACJ8jB,OACM9jB,GACJwW,OACMxW,GACJ+jB,OACM/jB,GACMsW,EAEfA,EADAG,EArvJG,kBAwwJXrB,GAAckB,EACdA,EAAKtW,GAGAsW,EAgoBT,SAAS6E,KACP,IAAI7E,EAAIG,EAAQC,EAAQE,EA+ExB,OA7EAN,EAAKlB,GAxzKO,cAyzKRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3U,IAEpCgV,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GAv0KL,YAw0KAF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS1U,IAEpCkV,IAAO5W,IA70KP,YA80KEF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASzU,IAEpCiV,IAAO5W,IAn1KT,YAo1KIF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASxU,IAEpCgV,IAAO5W,IAz1KX,SA01KMF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASvU,OAK1C+U,IAAO5W,GACMsW,EAEfA,EADAG,EAn2KG,CACLrhC,KAAM,QACNG,QAAS,YACTma,SAAU,YACVlY,OA+1Kek/B,EA91Kfne,UA81KmBqe,KAGjBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS8E,KACP,IAAI9E,EAAIG,EAAQC,EAAQE,EA+ExB,OA7EAN,EAAKlB,GAx3KO,SAy3KRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStU,IAEpC2U,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GA15KL,YA25KAF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS1U,IAEpCkV,IAAO5W,IA/4KP,SAg5KEF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASrU,IAEpC6U,IAAO5W,IAr5KT,WAs5KIF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASpU,IAEpC4U,IAAO5W,IA35KX,cA45KMF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASnU,OAK1C2U,IAAO5W,GACMsW,EAEfA,EADAG,EAr6KG,CACLrhC,KAAM,QACNG,QAAS,OACTma,SAAU,OACVlY,OAi6Kek/B,EAh6KfjqB,KAg6KmBmqB,KAGjBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EA2GT,SAASyF,KACP,IAAIzF,EAUJ,OARAA,EAAK0N,QACMhkB,IACTsW,EA+mBJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,IACLqB,EAAKuE,QACMhb,IACTyW,EAAK6M,MAEH7M,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKmC,QACM7Y,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKqN,QACMjkB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKoN,QACMlkB,GACJwW,OACMxW,IACT0X,EAAKyM,QACMnkB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,GACKsW,EAtoMNniC,EAuoMayiC,EAvoMNwN,EAuoMc1M,EAA9BjB,EAtoML,CACLz1B,MAqoM4B01B,EApoM5Br9B,WAooMoCy9B,EAnoMpCvhC,QAmoMwBkhC,EAnoMZt/B,cACZoa,WAAYpd,EACZub,SAAU,QACV+B,cAAe2yB,GAioML9N,EAAKG,IAMPrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA/qMM,IAAgB7rB,EAAOiwC,EAkrMpC,OAAO9N,EA/rBA+N,MACMrkB,IACTsW,EAgsBN,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,IACLqB,EAkziBF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAv3rBQ,aAw3rBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrC,KAEpC0C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA14rB6B,aA64rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAr1iBFgO,MACMtkB,IACTyW,EAgtFJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAvhRQ,YAwhRTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjQ,KAEpCsQ,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAlvFAiO,IAEH9N,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKsE,QACMhb,IACT0W,EAAK4M,MAEH5M,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiC,QACM7Y,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKoN,QACMlkB,GACJwW,OACMxW,IACT0X,EAAKyM,QACMnkB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,GACKsW,EAltMbvhC,EAmtMY0hC,EAntME2N,EAmtMc1M,EAA9BjB,EAltML,CACLz1B,MAitMgC41B,EAhtMhCv9B,WAgtMoCy9B,EA/sMpCvhC,SAJeivC,EAmtMa9N,IA/sMb,GAAG3hC,EAAEoC,iBAAiBqtC,EAAGrtC,iBAAmBpC,EAAEoC,cAC7Dsa,cAAe2yB,EACf10B,SAAU,SA8sMA4mB,EAAKG,IAMPrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA3vMM,IAASjrB,EAAGyvC,EAAWJ,EA8vMpC,OAAO9N,EAnxBEmO,IAIFnO,EAGT,SAAS0N,KACP,IAAI1N,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EAAK+M,EAAK9M,EAAK4D,EAAK3D,EAAUU,EAAUkD,EAAUC,EAtiL7EpoC,EAAGC,EAAGmB,EAAGiwC,EAAI/xC,EAAGstC,EAAG0E,EAAIxY,EAAIyY,EAAI7vC,EAAG8vC,EA2vLxD,OAnNAxO,EAAKlB,IACLqB,EAAKwE,QACMjb,GACJwW,OACMxW,IACT0W,EAAKqO,QACM/kB,GACJwW,OACMxW,IACT4W,EAkwYV,WACE,IAAIN,EAAIG,EAERH,EAAKlB,IACLqB,EAi+BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA56iBQ,aA66iBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlI,KAEpCuI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAngCF0O,MACMhlB,IACMsW,EACfG,EA7khBW,CACLrhC,KAAM,WACNlB,MAAO,aA+khBf,OAFAoiC,EAAKG,EA3wYQwO,MACMjlB,IACT4W,EAAKsO,MAEHtO,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAyvBd,WACE,IAAIR,EAAYI,EAEhBJ,EAAKlB,GACA+P,OACMnlB,GACJwW,OACMxW,IACT0W,EAAK2L,QACMriB,IACT0W,EAAKgE,MAEHhE,IAAO1W,GACMsW,EAEfA,EAtwMO,CACLlhC,KAAM,UACNlB,MAmwMYwiC,KAGdtB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAtxBU8O,MACMplB,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,GAzkLZ,mBA0kLOF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCugC,EAAK5X,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfsC,EAAK1X,EACmB,IAApByV,IAAyBW,GAASlU,IAEpCwV,IAAO1X,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,GACV2X,EAAMvC,GArlLb,WAslLWtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/ButC,EAAM5kB,EAAMsa,OAAOhF,GAAa,GAChCA,IAAe,IAEfsP,EAAM1kB,EACkB,IAApByV,IAAyBW,GAASjU,IAEpCuiB,IAAQ1kB,IA3lLnB,YA4lLaF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/ButC,EAAM5kB,EAAMsa,OAAOhF,GAAa,GAChCA,IAAe,IAEfsP,EAAM1kB,EACkB,IAApByV,IAAyBW,GAAShU,KAGtCsiB,IAAQ1kB,IACV0kB,EAAM,MAEJA,IAAQ1kB,IACV4X,EAAMpB,QACMxW,GAvmLrB,QAwmLeF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/BqkC,EAAM1b,EAAMsa,OAAOhF,GAAa,GAChCA,IAAe,IAEfoG,EAAMxb,EACkB,IAApByV,IAAyBW,GAAS/T,IAEpCmZ,IAAQxb,EAEV2X,EADA+M,EAAM,CAACA,EAAK9M,EAAK4D,IAGjBpG,GAAcuC,EACdA,EAAM3X,KAOVoV,GAAcuC,EACdA,EAAM3X,GAEJ2X,IAAQ3X,IACV2X,EAAM,MAEJA,IAAQ3X,IACV0kB,EAAMlO,QACMxW,IACV4X,EAAMyN,QACMrlB,IACV4X,EAAM,MAEJA,IAAQ5X,IACVwb,EAAMhF,QACMxW,IACV6X,EAuvB9B,WACE,IAAIvB,EAAYI,EAAQE,EAExBN,EAAKlB,GAylaP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAvymBQ,YAwymBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxS,KAEpC6S,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAhmkB6B,YAmmkB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3naFgP,KACMtlB,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKqG,QACMjd,GACMsW,EAEfA,EAx0MG,CACLlhC,KAAM,UACNoC,OAq0MgBk/B,EAp0MhBxiC,MAo0MoB0iC,KAWtBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAhyB2BiP,MACMvlB,IACV6X,EAAM,MAEJA,IAAQ7X,GACJwW,OACMxW,IACVuY,EA4xBlC,WACE,IAAIjC,EAAIG,EAAQC,EAEhBJ,EAAKlB,GA91MQ,kBA+1MTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7T,IAEpCkU,IAAOzW,GACJwW,OACMxW,GAt2MA,UAu2MLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5T,IAEpCkU,IAAO1W,IA52MF,YA62MHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS3T,IAEpCiU,IAAO1W,IAn/ML,YAo/MAF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS1U,MAIxCgV,IAAO1W,GACMsW,EACfG,EA73MO,CACLrhC,KAAM,gBACNlB,MA23MgBwiC,EA33MPv/B,eA43MXm/B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAp1B+BkP,MACMxlB,IACVuY,EAAM,MAEJA,IAAQvY,GACJwW,OACMxW,IACVyb,EAg1BtC,WACE,IAAInF,EAAIG,EAAQC,EAEhBJ,EAAKlB,GA74MQ,YA84MTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1T,IAEpC+T,IAAOzW,GACJwW,OACMxW,GAr5MA,SAs5MLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASzT,IAEpC+T,IAAO1W,IA35MF,WA45MHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASxT,KAGtC8T,IAAO1W,GACMsW,EACfG,EAn6MO,CACLrhC,KAAM,UACNlB,MAi6MgBwiC,EAj6MPv/B,eAk6MXm/B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA/3BmCmP,MACMzlB,IACVyb,EAAM,MAEJA,IAAQzb,GACJwW,OACMxW,IACV0b,EAAMgK,QACM1lB,IACV0b,EAAM,MAEJA,IAAQ1b,GACKsW,EAnqLnChjC,EAoqLkCmjC,EApqL/BljC,EAoqLmCmjC,EApqLhChiC,EAoqLoCkiC,EApqLjC+N,EAoqLqC7N,EApqLjClkC,EAoqLqC8kC,EApqLlCwI,EAoqLsCvI,EApqLnCiN,EAoqLwChN,EApqLpCxL,EAoqLyCyL,EApqLrCgN,EAoqL0CtM,EApqLtCvjC,EAoqL2CymC,EApqLxCqJ,EAoqL6CpJ,EAnqL7F9d,GAAWqJ,IAAI,WAAW3zB,EAAE8N,UAAU9N,EAAEoN,UACpChM,IAAMA,EAAER,QAAOQ,EAAER,MAAQ,QAmqLKoiC,EADAG,EAjqL3B,CACL/1B,OAAQpN,EACR+F,WAAY9F,EACZoR,SAAUjQ,EACVuQ,YAAa0/B,EACbx/B,eAAgBvS,GAAKA,EAAEuE,cACvBkO,kBAAmB66B,GAAK,GAAGA,EAAE,GAAG/oC,iBAAiB+oC,EAAE,GAAG/oC,gBACtDyC,QAASgrC,EACT7sC,QAASq0B,EACT7mB,cAAes/B,EACf9/B,QAAQ/P,EACRwQ,qBAAsBs/B,EACtBp1B,SAAU,YAwpLsB0lB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGAsW,EA6QT,SAAS2I,KACP,IAAI3I,EAAIG,EAAQC,EAh/LMviC,EAAG0oC,EAygMzB,OAvBAvG,EAAKlB,IACLqB,EAAKkP,QACM3lB,GACJwW,OACMxW,IACT0W,EA4hCN,WACE,IAAIJ,EAAIG,EAAQC,EAEhBJ,EAAKlB,GA92NQ,SA+2NTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvS,KAEpC4S,IAAOzW,GACJwW,OACMxW,GAt3NA,UAu3NLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAStS,KAEpC4S,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAEfA,EADAG,EAh4NO,CACLrhC,KAAM,OACN0C,OA83NY4+B,GA93NC,WAi4NftB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GA14NM,iBA24NPtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrS,KAEpC0S,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,GAr5NF,UAs5NHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASpS,KAEpC0S,IAAO1W,GACMsW,EAEfA,EADAG,EA55NK,CACLrhC,KAAM,QACN4B,OA05Ncy/B,GA15ND,kBA65NbrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAIT,OAAOsW,EA5mCEsP,MACM5lB,GACMsW,EAz/LCniC,EA0/LFsiC,EA1/LKoG,EA0/LDnG,EAz/LlB/Y,GAAUsJ,IAAI,SAAS9yB,EAAEkN,OAAOlN,EAAEiN,SA0/LlCk1B,EADAG,EAx/LO,CACLr1B,MAAOjN,EACP+S,UAAW21B,KAigMjBzH,GAAckB,EACdA,EAAKtW,GAGAsW,EAwFT,SAAS2F,KACP,IAAI3F,EAaJ,OAXAA,EA+mCF,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAQY,EAExCpB,EAAKlB,IACLqB,EAAKoP,QACM7lB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,GACT0W,EAAKtB,GA3vOI,YA4vOLtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bw/B,EAAK7W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAShU,IAEpCuU,IAAO3W,IACT4W,EAAKJ,QACMxW,GAnwOJ,QAowODF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B0/B,EAAK/W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS/T,IAEpCwU,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAOToV,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAAKqN,QACMjkB,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoN,QACMlkB,GACJwW,OACMxW,IACT0X,EAAKyM,QACMnkB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAnlOPvhC,EAolOU2hC,EAplOPviC,EAolOWyiC,EAplORkP,EAolOYhP,EAplORsN,EAolOY1M,EAA9BjB,EAnlOL,CACH/gB,YAFY8uB,EAolOU/N,IAllOJ+N,EAAG9uB,WACrBrc,WAAYysC,EACZx0B,gBAAiB,GAAGvc,EAAE,GAAGoC,iBAAiBpC,EAAE,GAAGoC,gBAC/C5B,QAASivC,GAAMA,EAAGjvC,QAClBgc,WAAYpd,EACZub,SAAU,aACV+B,cAAe2yB,GA6kOP9N,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAxnOM,IAASwkB,EAAIzvC,EAAGZ,EAAG2xC,EAAI1B,EA2nOpC,OAAO9N,EAttCFyP,MACM/lB,IACTsW,EAutCJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EAAUC,EAE3DtB,EAAKlB,IACLqB,EAAKoP,QACM7lB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAytgBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnkvBQ,WAokvBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjU,IAEpCsU,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/6rB6B,WAk7rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5vgBE0P,MACMhmB,GACJwW,OACMxW,IACT4W,EAAKoE,QACMhb,IACT4W,EAAK0M,MAEH1M,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAK+B,QACM7Y,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKuM,QACMjkB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAMuM,QACMlkB,GACJwW,OACMxW,IACV4X,EAAMuM,QACMnkB,IACV4X,EAAM,MAEJA,IAAQ5X,GACKsW,EAnqOf4J,EAoqOkBxJ,EApqOf3hC,EAoqOmB6hC,EApqOhB/jC,EAoqOoBikC,EApqOjB3iC,EAoqOqBujC,EApqOlBoO,EAoqOsBnO,EApqOlByM,EAoqOuBxM,EAAvCnB,EAnqOb,CACH/gB,YAFY8uB,EAoqOkB/N,IAlqOZ+N,EAAG9uB,WACrBrc,WAAYysC,EACZx0B,gBAAiBvc,GAAK,GAAGmrC,EAAE/oC,iBAAiBpC,EAAEoC,iBAAmB+oC,EAAE/oC,cACnE5B,QAASivC,GAAMA,EAAGjvC,QAClBgc,WAAYpd,EACZ6M,MAAOnO,EACP6c,SAAU,aACV+B,cAAe2yB,GA4pOC9N,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAxtOM,IAASwkB,EAAItE,EAAGnrC,EAAGlC,EAAGsB,EAAG2xC,EAAI1B,EA2tO1C,OAAO9N,EA/zCA2P,MACMjmB,IACTsW,EAg0CN,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,IACLqB,EAAKoP,QACM7lB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,GA5tOA,gBA6tOLF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASnS,KAEpCyS,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiC,QACM7Y,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKoN,QACMlkB,GACJwW,OACMxW,IACT0X,EAAKgO,QACM1lB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EArvOPvhC,EAsvOU2hC,EAtvOP7jC,EAsvOW+jC,EAtvORkP,EAsvOYhP,EAtvORsN,EAsvOY1M,EAA9BjB,EArvOL,CACH/gB,YAFY8uB,EAsvOU/N,IApvOJ+N,EAAG9uB,WACrBrc,WAAYysC,EACZx0B,gBAAiBvc,EACjBQ,QAASivC,GAAMA,EAAGjvC,QAClByL,MAAOnO,EACP6c,SAAU,aACVlK,qBAAsB4+B,GA+uOd9N,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA1xOM,IAASwkB,EAAIzvC,EAAGlC,EAAGizC,EAAI1B,EA6xOpC,OAAO9N,EA74CE4P,MACMlmB,IACTsW,EA84CR,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,EAEjDrB,EAAKlB,IACLqB,EAAKoP,QACM7lB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,GA/xOA,UAgyOLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASlS,KAEpCwS,IAAO1W,GACJwW,OACMxW,GACT4W,EAAKxB,GAxyOA,QAyyODtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B0/B,EAAK/W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAASjS,KAEpC0S,IAAO7W,IACT8W,EAAKN,QACMxW,GAhhPR,QAihPGF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2kC,EAAKhc,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS9T,IAEpCwZ,IAAO9b,IACT0X,EAAKlB,QACMxW,GA1zOZ,gBA2zOOF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChC6rC,EAAMljB,EAAMsa,OAAOhF,GAAa,IAChCA,IAAe,KAEf4N,EAAMhjB,EACkB,IAApByV,IAAyBW,GAAShS,KAEpC4e,IAAQhjB,IACV2X,EAAMnB,QACMxW,EAEV4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,IAO7BvC,GAAcwB,EACdA,EAAK5W,KAOToV,GAAcwB,EACdA,EAAK5W,KAOToV,GAAcwB,EACdA,EAAK5W,GAEH4W,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAK+B,QACM5Y,IACT8W,EAAKN,QACMxW,IACT8b,EAAKpB,QACM1a,IACT0X,EAAKlB,QACMxW,IACTgjB,EAAMhK,QACMhZ,GACKsW,EA32ObkO,EA42OY/N,EA52OL0P,EA42OavP,EA52ORtjC,EA42OYwoC,EAA1BrF,EA32OP,CACHnlB,gBA02O4BolB,EA12OTv/B,cACnB5B,QAASivC,GAAMA,EAAGjvC,QAClBmgB,WAAY8uB,GAAMA,EAAG9uB,WACrBnE,WAAY40B,GAAO,CAAE5wC,QAAS,uBAC9B8D,WAAY,CAAC/F,GACboc,SAAU,cAs2OA4mB,EAAKG,IAsBfrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAp5OM,IAASwkB,EAAO2B,EAAK7yC,EAu5OlC,OAAOgjC,EAthDI8P,IAKJ9P,EA4MT,SAAS+O,KACP,IAAI/O,EAAIG,EAAQC,EAAQE,EAnxMFgJ,EAAG5qC,EAAG1B,EA2zM5B,OAtCAgjC,EAAKlB,IACLqB,EAAK4P,QACMrmB,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK0P,QACMtmB,GACMsW,EAnyMAthC,EAoyMG0hC,EApyMApjC,EAoyMIsjC,EACtBN,EADAG,EAnyMG,CACLrhC,MAFcwqC,EAoyMEnJ,GAlyMRt/B,cACR5B,QAASqqC,EAAEzoC,cACXK,OAAQxC,EACRd,MAAOZ,KA0yMT8hC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EA4JT,SAASoP,KACP,IAAIpP,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EA36MhBtkC,EAAGkzC,EAAIC,EA8hNxC,OAjHAlQ,EAAKlB,IACLqB,EA+oiBF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GArgsBQ,eAsgsBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlC,KAEpCuC,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxhsB6B,eA2hsB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAlriBFmQ,MACMzmB,GACJwW,OACMxW,IACT0W,EAAKqB,QACM/X,GACJwW,OACMxW,IACT4W,EAAKsN,QACMlkB,GACJwW,OACMxW,GA/7MR,eAg8MGF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChC2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAASvT,IAEpCiU,IAAO9W,IAr8MV,kBAs8MKF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChC2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAAStT,IAEpCgU,IAAO9W,IA38MZ,iBA48MOF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChC2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAASrT,MAIxC+T,IAAO9W,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKgP,QACM1mB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAAM+O,QACM1mB,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EAr+MJjjC,EAs+MeyjC,EAt+MZyP,EAs+MgB7O,EAt+MZ8O,EAs+MgB7O,EAClCrB,EADAG,EAp+MT,CACHp9B,WAm+MkCu9B,EAl+MlCx1B,MAk+M8Bs1B,EAj+M9BnhC,QAi+M0BkhC,EAj+Mdt/B,cACZ+M,MAAO7Q,GAAKA,EAAE8D,cACdiN,UAAW,CAACmiC,EAAIC,GAAIluC,OAAO8gC,GAAKA,MAk+MpBhE,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKiQ,QACM1mB,IACMsW,EACfG,EA9gNS,CACLryB,UAAW,CA6gNDqyB,KAEhBH,EAAKG,GAGAH,EAGT,SAAS4F,KACP,IAAI5F,EAAIG,EAAQC,EAAQE,EAAIC,EAAIC,EAAIgF,EAzgNV9mC,EAAGokC,EAyyN7B,OA9RA9C,EAAKlB,GA3pNQ,mBA4pNTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlU,IAEpCuU,IAAOzW,IA7hNE,mBA8hNPF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpT,IAEpCyT,IAAOzW,IAniNA,mBAoiNLF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnT,IAEpCwT,IAAOzW,IAziNF,aA0iNHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlT,IAEpCuT,IAAOzW,IA/iNJ,aAgjNDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjT,IAEpCsT,IAAOzW,IArjNN,uBAsjNCF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShT,SAO9CqT,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKgN,QACM5jB,GACMsW,EA5kNCthC,EA6kNE0hC,EA7kNC0C,EA6kNGxC,EACtBN,EADAG,EA5kNG,CACLlhC,QA2kNgBkhC,EA3kNJt/B,cACZK,OAAQxC,EACRd,MAAOklC,EAAEllC,SAolNXkhC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAK4G,QACMld,IACTsW,EAAKlB,IACLqB,EAAK4P,QACMrmB,IAjmNF,eAkmNHF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/S,KAGtCoT,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK0P,QACMtmB,GACMsW,EAEfA,EADAG,EArnND,SAAS8G,EAAIvoC,EAAG1B,GACvB,MAAO,CACLiC,QAASgoC,EAAGpmC,cACZK,OAAQxC,EACRd,MAAO,IAAIZ,EAAEY,UAinNFyyC,CAASlQ,EAAIC,EAAIE,KAW1BxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GAroNE,gBAsoNHtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9S,KAEpCmT,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACT4W,EAAKxB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnByB,EAvpNH,IAwpNGzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCsT,IAAO7W,GA3pNZ,SA4pNOF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAAS5S,KAEpCsT,IAAO9W,IAjqNd,QAkqNSF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAAS3S,KAEpCqT,IAAO9W,IA91NjB,SA+1NYF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAASrU,MAIxC+U,IAAO9W,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnB0G,EAzrNP,IA0rNO1G,OAEA0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCuY,IAAO9b,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,IAGd1G,GAAcwB,EACdA,EAAK5W,KAGPoV,GAAcwB,EACdA,EAAK5W,KAGPoV,GAAcwB,EACdA,EAAK5W,GAEH4W,IAAO5W,GACMsW,EAEfA,EADAG,EA1sNH,SAAS8G,EAAIvoC,EAAGokC,GACvB,MAAO,CACL7jC,QAASgoC,EAAGpmC,cACZK,OAAQxC,EACRd,MAAOklC,EAAEphC,KAAK,IAAIrC,eAssNLixC,CAASnQ,EAAIC,EAAIE,KAGtBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GA1tNA,WA2tNDtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1S,KAEpC+S,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKqG,QACMjd,GACMsW,EAEfA,EADAG,EA7uNL,SAAS8G,EAAIvoC,EAAG1B,GACvB,MAAO,CACLiC,QAASgoC,EAAGpmC,cACZK,OAAQxC,EACRd,MAAOZ,EAAEqC,eAyuNMkxC,CAASpQ,EAAIC,EAAIE,KAW1BxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,MAORsW,EAgCT,SAAS4G,KACP,IAAI5G,EAAIG,EAAQC,EAAQE,EAAQE,EAxxNVyG,EAAIppC,EAAGa,EAAGokC,EAi2NhC,OAvEA9C,EAAKlB,IACLqB,EAAK0O,QACMnlB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAkjCN,WACE,IAAIJ,EAAIG,EAAQC,EAEhBJ,EAAKlB,GAttQO,cAutQRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnV,IAEpCwV,IAAOzW,GACJwW,OACMxW,GA9tQD,QA+tQJF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASlV,IAEpCwV,IAAO1W,GACMsW,EAEfA,EADAG,EAruPO,kBAwuPPrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxlCEwQ,MACM9mB,IAvyNF,YAwyNHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASzS,KAEpC+S,IAAO1W,IA7yNJ,YA8yNDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASxS,OAIxC8S,IAAO1W,GACJwW,OACMxW,IACT4W,EAAK0K,QACMthB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKmG,QACMjd,GACMsW,EAj0NHniC,EAk0NMuiC,EAl0NH1hC,EAk0NO4hC,EAl0NJwC,EAk0NQtC,EAC1BR,EADAG,EAj0ND,CACLlhC,SAFcgoC,EAk0NM9G,IAh0NL,GAAG8G,EAAG,GAAGpmC,iBAAiBhD,EAAEgD,iBAAmBhD,EAAEgD,cAChEK,OAAQxC,EACRd,MAAOklC,KAy0NLhE,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS+H,KACP,IAAI/H,EAUJ,OARAA,EAshCF,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAi0eF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAzurBQ,QA0urBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxC,KAEpC6C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA5vrB6B,QA+vrB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAp2eFyQ,MACM/mB,GACJwW,OACMxW,IACT0W,EAAKsQ,QACMhnB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKoN,QACMhkB,GACMsW,EAtwPHkO,EAuwPE9N,EAvwPEuQ,EAuwPErQ,EAAlBH,EAtwPK,CACLjhC,OAAQ,SACLyxC,EACH1xC,QAASivC,EACT90B,SAAU,SACVta,KAAM,SAkwPNkhC,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GA3xPM,IAASwkB,EAAIyC,EA8xP1B,OAAO3Q,EA/jCF4Q,MACMlnB,IACTsW,EAgkCJ,WACE,IAAIA,EAAYI,EAAQE,EAExBN,EAAKlB,GACA0F,OACM9a,GACJwW,OACMxW,IACT0W,EAAKsQ,QACMhnB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKqE,QACMjb,GACMsW,EAEfA,EA1yPK,CACL9gC,OAAQ,OACRkL,OAuyPkBk2B,EAtyPlBrhC,QAsyPcmhC,EAryPdhnB,SAAU,SACVta,KAAM,WA+yPVggC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAzmCA6Q,MACMnnB,IACTsW,EA0mCN,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKgH,QACMzd,GACJwW,OACMxW,IACT0W,EAAK0Q,QACMpnB,IACT0W,EAAKiE,MAEHjE,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKgE,QACM5a,GACMsW,EA/0PC+Q,EAg1PEzQ,EAAlBH,EA/0PG,CACLjhC,OAAQ,SACRJ,KAAM,QACNsa,SAAU,QACVna,SALcgoC,EAg1PE7G,IA30PD6G,EAAG,GAAGpmC,cACrBiK,MAAOimC,GA20PL/Q,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAp2PM,IAASud,EAAI8J,EAu2P1B,OAAO/Q,EAtpCEgR,IAIFhR,EAmnBT,SAAS2N,KACP,IAAI3N,EAAYI,EAwChB,OAtCAJ,EAAKlB,GACA2K,OACM/f,GACJwW,OACMxW,GAv5OA,UAw5OLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS/R,KAEpCqS,IAAO1W,IA75OF,SA85OHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS9R,MAGtCoS,IAAO1W,GACMsW,EAEfA,EAt6OO,CACL/gC,QAAS,QACTH,KAm6OYshC,EAn6OJv/B,iBAs6OVi+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS4N,KACP,IAAI5N,EAAYI,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAIxC,GAFApB,EAAKlB,GACAwD,OACM5Y,EAET,GADKwW,OACMxW,EAET,IADA0W,EAAKmC,QACM7Y,EAAY,CA6BrB,IA5BA2W,EAAK,GACLC,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKmB,QACM7Y,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAEA4W,IAAO5W,GACZ2W,EAAGl/B,KAAKm/B,GACRA,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKmB,QACM7Y,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAGL2W,IAAO3W,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKmC,QACMhZ,GACMsW,EAEfA,EADK/V,EAAQmW,EAAIC,KAWrBvB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS6N,KACP,IAAI7N,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAIxB,GAFAN,EAAKlB,IACLqB,EAAK8Q,QACMvnB,EAAY,CAiBrB,IAhBAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK2Q,QACMvnB,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK2Q,QACMvnB,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EApkPS,SAASpW,EAAMlS,GACtB,MAAM5W,EAAS,CAAC8oB,GAChB,IAAK,IAAIxtB,EAAI,EAAGA,EAAIsb,EAAKjV,OAAQrG,IAC/B0E,EAAOE,KAAK0W,EAAKtb,GAAG,IAEtB,OAAO0E,EA+jPJiwC,CAAS/Q,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASiR,KACP,IAAIjR,EAAIG,EAAQC,EAAQE,EA5kPCtvB,EAAGmgC,EAksP5B,OApHAnR,EAAKlB,IACLqB,EA6mCF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA51RQ,mBA61RTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnT,IAEpCwT,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA/oCFoR,MACM1nB,GACJwW,OACMxW,IACT0W,EAAK4K,QACMthB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKgN,QACM5jB,GACMsW,EA5lPAhvB,EA6lPGovB,EA7lPA+Q,EA6lPI7Q,EACtBN,EADAG,EA5lPG,CACLrhC,KA2lPgBqhC,EA3lPRt/B,cACRK,OAAQ8P,EACR9Q,KAAMixC,KAomPRrS,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAK2N,QACMjkB,IACTsW,EAAKlB,GA/mPI,SAgnPLtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7R,KAEpCkS,IAAOzW,GACJwW,OACMxW,GAvnPJ,WAwnPDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5R,KAEpCkS,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKqG,QACMjd,GACMsW,EAEfA,EADAG,EAloPD,CACLrhC,KAAM,cACNoB,KAgoPoBogC,KAWlBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GAppPE,YAqpPHtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3R,KAEpCgS,IAAOzW,IA1pPJ,cA2pPDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1R,MAGtC+R,IAAOzW,IACMsW,EACfG,EAnqPK,SAASmJ,GAChB,MAAO,CACLxqC,KAAMwqC,EAAEzoC,cACRX,KAAMopC,EAAEzoC,eAgqPHwwC,CAASlR,KAEhBH,EAAKG,KACMzW,IACTsW,EAAK+O,QAMN/O,EAGT,SAASoQ,KACP,IAAIpQ,EAAYI,EAAQE,EA3qPEgR,EAmtP1B,OAtCAtR,EAAKlB,GACA8F,OACMlb,GACJwW,OACMxW,IACT0W,EAAKsD,QACMha,IACT0W,EAAKoB,MAEHpB,IAAO1W,GACJwW,OACMxW,IACT4W,EA6OV,WACE,IAAIN,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAAKoR,QACM7nB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKiN,QACM7jB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADAG,EAh5PD,CACLrhC,KAAM,WACN5B,KA84PoBijC,EA74PpBx8B,KA64PwB28B,KAWtBxB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GAz6PM,aA06PPtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzR,KAEpC8R,IAAOzW,IA/6PA,YAg7PLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxR,KAEpC6R,IAAOzW,IAr7PF,aAs7PHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvR,KAEpC4R,IAAOzW,IA37PJ,cA47PDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStR,KAEpC2R,IAAOzW,IAj8PN,gBAk8PCF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrR,KAEpC0R,IAAOzW,IACTyW,EAAKoR,UAMXpR,IAAOzW,IACMsW,EACfG,EA/8PS,CACLrhC,KAAM,SACNlB,MA68PUuiC,EA78PAt/B,gBA+8PhBm/B,EAAKG,GAGP,OAAOH,EAxVMwR,MACM9nB,GACMsW,EA3rPCsR,EA4rPEhR,EAClBN,EA3rPG,CACLlhC,KAAM,MAyrPUshC,EAzrPD,GAAGv/B,cAClBjD,MAAO0zC,KAmsPTxS,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAmLT,SAASuP,KACP,IAAIvP,EAAIG,EAAQC,EAl2PUpjC,EA83P1B,OA1BAgjC,EAAKlB,IACLqB,EAo8eF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAl+rBQ,eAm+rBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnC,KAEpCwC,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAr/rB6B,eAw/rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAv+eFyR,MACM/nB,GACJwW,OACMxW,IACT0W,EAAKkE,QACM5a,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EA92PKhjC,EA+2PFojC,EAClBJ,EADAG,EA92PO,CACLlhC,QA62PYkhC,EA72PAt/B,cACZue,WAAYpiB,KA+2Pd8hC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAiHT,SAASwB,KACP,IAAIxB,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAr9PQ,WAs9PTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpR,KAEpCyR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASqF,KACP,IAAIrF,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAx/PQ,WAy/PTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnR,KAEpCwR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS0D,KACP,IAAI1D,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA3hQQ,WA4hQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlR,KAEpCuR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAsDT,SAASgL,KACP,IAAIhL,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAh3RU,IAi3RVlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS3V,IAGjC6V,EAiBT,SAAS8F,KACP,IAAI9F,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAvoQQ,YAwoQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9Q,KAEpCmR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA6ET,SAASmE,KACP,IAAInE,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAhvQQ,aAivQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3Q,KAEpCgR,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASmH,KACP,IAAInH,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAnxQQ,WAoxQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1Q,KAEpC+Q,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASiJ,KACP,IAAIjJ,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAtzQQ,SAuzQTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzQ,KAEpC8Q,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAASwJ,KACP,IAAIxJ,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA73QW,IA83QXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASvQ,KAGjCyQ,EA6CT,SAASsF,KACP,IAAItF,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA96QQ,cA+6QTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpQ,KAEpCyQ,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAyQT,SAAS0R,KACP,IAAI1R,EAAIG,EAAQC,EAzrRS1hC,EA+vRzB,OApEAshC,EAAKlB,IACLqB,EA2tVF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA36kBQ,UA46kBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3G,KAEpCgH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA7vVF2R,MACMjoB,GACJwW,OACMxW,IACT0W,EAAKwR,QACMloB,IACT0W,EAAKyR,MAEHzR,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAEfA,EADAG,GAzsRmBzhC,EAysRD0hC,GAxsRP,SAAS1hC,EAAEmC,cAAkB,UA2sRxCi+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GArtRM,cAstRPtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9P,KAEpCmQ,IAAOzW,IA3tRA,WA4tRLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7P,MAGtCkQ,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKyR,QACMnoB,GACMsW,EAEfA,EADAG,EAxuRK,SAASyJ,EAAGlrC,GACnB,MAAO,GAAGkrC,EAAE/oC,iBAAiBnC,EAAEmC,gBAuuRxBixC,CAAS3R,EAAIC,KAWtBtB,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAASc,KACP,IAAId,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EAAK+R,QACMroB,IACTsW,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBmB,EAhyRS,IAiyRTnB,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAAShQ,KAEpCmQ,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAK0R,QACMroB,IACT4W,EAAKJ,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EA5yRC,IA6yRDzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS/P,KAEpCwQ,IAAO7W,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKzW,KAeboV,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EA5yRW,IA4yRGA,EA3yRH,GACLppB,cAAc,IA4yRtBipB,EAAKG,GAGAH,EAGT,SAAS+R,KACP,IAAI/R,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKe,QACMxX,EAAY,CAgCrB,IA/BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKoR,QACMhoB,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKU,QACMxX,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKoR,QACMhoB,IACT4W,EAAK,MAEHA,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKU,QACMxX,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKU,QACMrX,IACT2W,EAAK,MAEHA,IAAO3W,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKS,QACMtX,IACT6W,EAAK,MAEHA,IAAO7W,GACMsW,EAEfA,EADAG,EAr4RC,SAASpW,EAAMlS,EAAMm6B,EAAIp1C,GAC9B,IAAI+jC,EAAM5W,EACV,IAAK,IAAIxtB,EAAI,EAAGA,EAAIsb,EAAKjV,OAAQrG,IAC/BokC,EAAIj3B,MAAQmO,EAAKtb,GAAG,GACpBokC,EAAIvpB,OAASS,EAAKtb,GAAG,GACrBokC,EAAMA,EAAIj3B,MAEZ,MAAO,CACL2d,UAAW3nB,MAAMoT,KAAKuU,IACtBC,WAAYmJ,GAAqBnJ,IACjC1lB,IAAKmoB,GA23REkoB,CAAS9R,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASkB,KACP,IAAIlB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EAAK+M,QACMrjB,IACTsW,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBmB,EAj9RS,IAk9RTnB,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAAShQ,KAEpCmQ,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKa,QACMxX,IACT4W,EAAKJ,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EA79RC,IA89RDzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS/P,KAEpCwQ,IAAO7W,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKzW,KAeboV,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EA18RW,IA08RGA,EAz8RH,GACL7jB,oBAAoB,IA08R5B0jB,EAAKG,GAGAH,EA+FT,SAASkS,KACP,IAAIlS,EAAIG,EAAwBK,EA1iSVtjC,EA0mStB,OA9DA8iC,EAAKlB,IACLqB,EAAK6P,QACMtmB,IACTyW,EAAKwG,MAEHxG,IAAOzW,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT8W,EAAKM,QACMpX,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAjkSP,iBADJ9iC,EAmkSUijC,KAlkSIjjC,EAAO,CAAE4B,KAAM,UAAWlB,MAAOV,IAmkSnD8iC,EADAG,EAjkSL,CAAEjjC,OAAMgT,KAikSeswB,KAmClC1B,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS+M,KACP,IAAI/M,EAAQC,EAAgBM,EAAQiF,EAAQkH,EAAU0B,EAAUlJ,EAAUiN,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EA1mShHj1B,EAAKk1B,EAAIz1C,EAAGD,EAAGiU,EAAG0hC,EAAI7Q,EAAG8Q,EAAG/I,EAAGgJ,EAAGz1C,EAAGR,EAAGk2C,EAg0S9D,OApNA9S,EAAKlB,GACAoB,OACMxW,IACTuW,EAtKJ,WACE,IAAID,EAAYI,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAIxC,GAFApB,EAAKlB,GACAiU,OACMrpB,EAET,GADKwW,OACMxW,EAET,IADA0W,EAAK8R,QACMxoB,EAAY,CA6BrB,IA5BA2W,EAAK,GACLC,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAK8Q,QACMxoB,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAEA4W,IAAO5W,GACZ2W,EAAGl/B,KAAKm/B,GACRA,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAK8Q,QACMxoB,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,IAexBtC,GAAcwB,EACdA,EAAK5W,GAGL2W,IAAO3W,GACMsW,EAEfA,EADK/V,EAAQmW,EAAIC,KAGjBvB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA6EAgT,MACMtpB,IACTuW,EAAK,MAEHA,IAAOvW,GACJwW,OACMxW,GAm6SjB,WACE,IAAIsW,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9njBQ,WA+njBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5H,KAEpCiI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAp8SIiT,KACMvpB,GACJwpB,OACMxpB,IACT6W,EAkSZ,WACE,IAAIP,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EAAKkE,QACM3a,GACJwW,OACMxW,IACT0W,EAAK+S,QACMzpB,IACT0W,EAyjUR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxhlBQ,UAyhlBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1G,KAEpC+G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA3ilB6B,UA8ilB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5lUIoT,IAEHhT,IAAO1W,GACMsW,EA14SIsJ,EA24SDlJ,EAAlBD,EA14SO,GA04SOA,EA14SF,GAAGt/B,iBAAiByoC,EAAEzoC,gBA24SlCm/B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAv5SM,IAAY4f,EA05SzB,OAAOtJ,EA/TQqT,MACM3pB,IACT6W,EAAK,MAEHA,IAAO7W,GACJwW,OACMxW,IACT8b,EAAKoM,QACMloB,IACT8b,EAAKqM,MAEHrM,IAAO9b,IACT8b,EAAK,MAEHA,IAAO9b,GACJwW,OACMxW,IACTgjB,EAAM4G,QACM5pB,GACJwW,OACMxW,IACV0kB,EAAMxM,QACMlY,IACV0kB,EAAM,MAEJA,IAAQ1kB,GACJwW,OACMxW,IACVwb,EA6K5B,WACE,IAAIlF,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAExCpB,EAAKlB,GArwTQ,QAswTTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9T,IAEpCmU,IAAOzW,GACJwW,OACMxW,GA7zSA,gBA8zSLF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5P,KAEpCkQ,IAAO1W,GACJwW,OACMxW,GAr0SJ,OAs0SDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/By/B,EAAK9W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS3P,KAEpCmQ,IAAO5W,GACJwW,OACMxW,GA70SR,OA80SGF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAAS1P,KAEpCoQ,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKgD,QACM1a,GACMsW,EAEfA,EADAG,EAx1SL,CACLlhC,QAAS,wBACTiB,KAs1SwBkhC,KAWlBtC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAnQyBuT,MACM7pB,IACVwb,EAAM,MAEJA,IAAQxb,GACJwW,OACMxW,IACVyoB,EAAMtQ,QACMnY,IACVyoB,EAAM,MAEJA,IAAQzoB,GACJwW,OACMxW,IACV0oB,EA+xEpC,WACE,IAAIpS,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAktQF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAzslBQ,UA0slBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStG,KAEpC2G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EApvQFwT,MACM9pB,GACJwW,OACMxW,GACJ+pB,OACM/pB,GACJwW,OACMxW,IACT4W,EAAKiN,QACM7jB,GACMsW,EACfG,EAAcG,EA7uWY1iC,MA8uW1BoiC,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAr0EiC0T,MACMhqB,IACV0oB,EAAM,MAEJA,IAAQ1oB,GACJwW,OACMxW,IACV2oB,EAi0ExC,WACE,IAAIrS,EAAYI,EAEhBJ,EAAKlB,GACA6U,OACMjqB,GACJwW,OACMxW,IACT0W,EAAKwT,QACMlqB,GACMsW,EAEfA,EADcI,IAWlBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA31EqC6T,MACMnqB,IACV2oB,EAAM,MAEJA,IAAQ3oB,GACJwW,OACMxW,IACV4oB,EAu1E5C,WACE,IAAItS,EAAYI,EAEhBJ,EAAKlB,GAiyQP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAr1lBQ,YAs1lBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlG,KAEpCuG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAl0QF8T,KACMpqB,GACJwW,OACMxW,IACT0W,EAAKgE,QACM1a,GACMsW,EAEfA,EADcI,IAWlBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAj3EyC+T,MACMrqB,IACV4oB,EAAM,MAEJA,IAAQ5oB,GACJwW,OACMxW,IACV6oB,EAAMxR,QACMrX,IACV6oB,EAAM,MAEJA,IAAQ7oB,GACJwW,OACMxW,IACV8oB,EAAMxR,QACMtX,IACV8oB,EAAM,MAEJA,IAAQ9oB,GACJwW,OACMxW,IACV+oB,EA+1ExD,WACE,IAAIzS,EAAYI,EAEhBJ,EAAKlB,GAyyQP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAx3lBQ,WAy3lBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjG,KAEpCsG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA10QFgU,KACMtqB,GACJwW,OACMxW,IACT0W,EAqBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK8T,QACMvqB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKyT,QACMvqB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKyT,QACMvqB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAlGEkU,MACMxqB,GACMsW,EAEfA,EA10WO,CACL/gC,QAAS,SACTH,KAAM,SACNoB,KAs0WYkgC,KAWlBtB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAz3EqDmU,MACMzqB,IACV+oB,EAAM,MAEJA,IAAQ/oB,GACKsW,EA5sSjDxiB,EA6sSgDyiB,EA7sS3CyS,EA6sS+CnS,EA7sS3CtjC,EA6sS+CuoC,EA7sS5CxoC,EA6sSgD0vC,EA7sS7Cz7B,EA6sSkDm9B,EA7sS/CuE,EA6sSoDzN,EA7sShDpD,EA6sSqDqQ,EA7sSlDS,EA6sSuDR,EA7sSpDvI,EA6sSyDwI,EA7sStDQ,EA6sS2DP,EA7sSxDl1C,EA6sS6Dm1C,EA7sS1D31C,EA6sS+D41C,EA7sS5DM,EA6sSiEL,EA5sSpH/yC,MAAMC,QAAQsR,IAAIA,EAAEhP,QAAQsH,GAAQA,EAAKuB,OAASuc,GAAUsJ,IAAI,WAAWpnB,EAAKwB,OAAOxB,EAAKuB,UA6sS/Ck1B,EA5sSzC,CACHlhC,KAAM,SACN+c,cAAe62B,EACf3sC,SAAU9I,EACV4G,QAAS7G,EACT8V,KAAM7B,EACN+K,mBAAoB22B,EACpBvsC,MAAO07B,EACPsS,KAAM52B,EACNpB,QAASw2B,EACTl7B,OAAQmyB,EACRttB,QAASs2B,EACT7sC,QAAS5I,EACT4V,MAAOpW,EACP8f,OAAOo2B,KAgsSqChU,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA4HT,SAASqU,KACP,IAAIrU,EAAIG,EAAQC,EA4BhB,OA1BAJ,EAAKlB,IACLqB,EAqmHF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKiE,QACM1a,EAAY,CAmCrB,IAlCAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgU,QACM5qB,IACT4W,EAAKiU,QACM7qB,IACT4W,EAAKkU,MAGLlU,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgU,QACM5qB,IACT4W,EAAKiU,QACM7qB,IACT4W,EAAKkU,MAGLlU,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAvwZS,SAASpW,EAAMlS,GACtB,MAAMjW,EAAMmoB,EAAKnoB,IACjB,GAAIA,GAAoB,WAAbA,EAAI9C,SACPirB,EAAKzN,oBAAsByN,EAAKtpB,aAAespB,EAAKnoB,IAAInB,aAAespB,EAAKnoB,IAAI0a,qBAA8C,IAAvB1a,EAAIiC,QAAQjB,QAA+C,MAA/BhB,EAAIiC,QAAQ,GAAG3D,KAAKkK,QAAgB,MAAM,IAAIvK,MAAM,+CAE/L,IAAKgY,GAAwB,IAAhBA,EAAKjV,OAAc,OAAOmnB,EACvC,MAAM/iB,EAAM6Q,EAAKjV,OACjB,IAAI3B,EAAS4W,EAAK7Q,EAAM,GAAG,GAC3B,IAAK,IAAIzK,EAAIyK,EAAM,EAAGzK,GAAK,EAAGA,IAAK,CACjC,MAAMyD,EAAa,IAANzD,EAAUwtB,EAAOlS,EAAKtb,EAAI,GAAG,GAC1C0E,EAASnB,GAAiB+X,EAAKtb,GAAG,GAAIyD,EAAMiB,GAE9C,OAAOA,EA2vZJwzC,CAAStU,EAAIF,GAClBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA9rHF0U,MACMhrB,GACJwW,OACMxW,IACT0W,EAAKuU,QACMjrB,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAEfA,EADAG,EAv6SS,CAAEjgC,KAu6SGigC,EAv6SMn2B,GAu6SFo2B,KAGlBtB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASsT,KACP,IAAItT,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAx7SV8I,EAAGtsC,EAmgTzB,GAzEAgjC,EAAKlB,IACLqB,EAAKyU,QACMlrB,IACTuW,EAAKC,QACMxW,GArgTA,WAsgTLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS7P,KAEpCmQ,IAAO1W,IApkTF,YAqkTHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS9Q,MAGtCoR,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAAKgC,QACM5Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKqU,QACMnrB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EA59SXsJ,EA69SUlJ,EA79SPpjC,EA69SWwjC,EA59S9BlZ,GAAWqJ,IAAI,sBA69SHqP,EADAG,EA39SL,CACLv7B,UAAW5H,EACXyD,aAAa,EACbsP,KAAM,IACNjR,KAAMwqC,EAAEzoC,iBAk/SVi+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,EAAY,CAgCrB,GA/BAsW,EAAKlB,IACLqB,EAAKyR,QACMloB,IACTyW,EAAKrB,IACLmB,EAAK2U,QACMlrB,GACT0W,EAAKtB,GACLK,KACAkB,EAAK0D,KACL5E,KACIkB,IAAO3W,EACT0W,OAAK,GAELtB,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EAETyW,EADAF,EAAK,CAACA,EAAIG,IAGVtB,GAAcqB,EACdA,EAAKzW,KAGPoV,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACTyW,EAAKyU,OAGLzU,IAAOzW,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKsU,QACMprB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKsU,QACMprB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKmC,QACM9Y,IACT2W,EAAK,MAEHA,IAAO3W,GACMsW,EAEfA,EADAG,EA9lTG,SAASpW,EAAMlS,GACpByP,GAAWqJ,IAAI,sBACf,MAAMokB,EAAO,CACX70C,KAAM,CACJpB,KAAM,aACNgM,MAAO,KACPV,OAAQ,KAEVJ,GAAI,MAEN,OAAI6N,GAAQA,EAAKjV,OAAS,EAAUsnB,GAAW6qB,EAAMl9B,GAC9C,CAACk9B,GAmlTDC,CAAS7U,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK0U,QACMnrB,IACTuW,EAAKC,QACMxW,IACT0W,EAAKoC,QACM9Y,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAKX,OAAOsW,EAGT,SAAS6U,KACP,IAAI7U,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK2U,QACMprB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKsU,QACMprB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKsU,QACMprB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKlW,EAAQkW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASiV,KACP,IAAIjV,EAAIG,EAAgBG,EAAgBc,EA8FxC,OA5FApB,EAAKlB,IACLqB,EAAKiE,QACM1a,GACJwW,OACMxW,GACJ6hB,OACM7hB,GACJwW,OACMxW,IACT4W,EAAK4U,QACMxrB,IACT4W,EA2lUZ,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA35lBQ,YA45lBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShG,KAEpCqG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA96lB6B,YAi7lB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA9nUQmV,MACMzrB,IACT4W,EAgvUd,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAvimBQ,gBAwimBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5F,KAEpCiG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA1jmB6B,gBA6jmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAnxUUoV,MACM1rB,IACT4W,EA6nUhB,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA97lBQ,iBA+7lBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/F,KAEpCoG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAj9lB6B,iBAo9lB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAhqUYqV,IAIP/U,IAAO5W,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT0X,EAAKkM,QACM5jB,GACHwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,GACJ+hB,OACM/hB,GACKsW,EAEfA,EADAG,EAvvTb,CACLjgC,KAsvTgCigC,EArvThChzB,OAAQ,IAqvT4BmzB,KAAIc,EArvTrBxjC,aAwxTjBkhC,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS8U,KACP,IAAI9U,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAnxTVxjC,EAAGgN,EA+3TzB,OA1GAg2B,EAAKlB,IACLqB,EAAKyU,QACMlrB,IACMsW,EAjzTT1Y,GAAWqJ,IAAI,sBAkzTrBwP,EAjzTa,CACLjgC,KAAM,CACJpB,KAAM,aACNgM,MAAO,KACPV,OAAQ,KAEVJ,GAAI,QA6yTdg2B,EAAKG,KACMzW,IACTsW,EAAKlB,IACLqB,EAAKmV,QACM5rB,GACJwW,OACMxW,IACT0W,EAAKiM,QACM3iB,GACT2W,EAAKvB,IACLwB,EAAK2U,QACMvrB,IACT4W,EAAKgV,MAEHhV,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK6L,QACM3iB,EAET2W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAWlB1B,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT2W,EAAK,MAEHA,IAAO3W,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKqU,QACMlrB,GACMsW,EAEfA,EADAG,EAp1TD,SAASiM,EAAKmJ,GACnBjuB,GAAWqJ,IAAI,WAAWyb,WAC1B,IAAIhiC,EAAS,IACb,MAAMorC,EAAMD,GAAOA,EAAI,GAGvB,MAFmB,iBAARC,IAAkBprC,EAAYorC,EAAH,MAClCA,GAAOA,EAAIt1C,MAAQs1C,EAAIroC,SAAQ/C,EAAS,IAAKorC,EAAKh0C,OAAQ,OACvD,CACLtB,KAAM,CACJpB,KAAM,aACNgM,MAAOshC,EACPhiC,UAEFJ,GAAI,MAw0TKyrC,CAAStV,EAAIE,KAWtBvB,GAAckB,EACdA,EAAKtW,KAWXoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8U,QACMvrB,GACJwW,OACMxW,IACT0W,EAAKuU,QACMjrB,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EA12THhjC,EA22TEmjC,EA32TCn2B,EA22TGo2B,EA12TtB9Y,GAAWqJ,IAAI,iBAAiB3zB,GA22T5BgjC,EADAG,EAz2TG,CACHjgC,KAAM,CACJpB,KAAM,aACNgM,MAAO,KACPV,OAAQpN,GAEVgN,GAAIA,KAs2TJ80B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKqU,QAKJrU,EAGT,SAAS2U,KACP,IAAI3U,EAAIG,EAAQC,EAoDhB,OAlDAJ,EAAKlB,IACLqB,EAAKkE,QACM3a,GACJwW,OACMxW,IACT0W,EAm6JN,WACE,IAAIJ,EAAIG,EAERH,EAAKlB,IACLqB,EAAKwG,QACMjd,GACMoV,IAr4cJ,SAAS5hC,GACd,IAAwC,IAApCw4C,GAAYx4C,EAAKmC,eAAyB,MAAM,IAAIQ,MAAM,UAAWqC,KAAKE,UAAUlF,GAAM,gDAC9F,OAAO,EAo4cRy4C,CAASxV,GAEPzW,OAEA,KAEIA,GACMsW,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKyV,QACMlsB,IACMsW,EACfG,EAAcA,GAEhBH,EAAKG,GAGP,OAAOH,EAt8JE6V,MACMnsB,GACMsW,EAEfA,EADAG,EAAcC,IAWlBtB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKkE,QACM3a,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKkE,QACM5a,GACMsW,EAEfA,EADAG,EAAcC,IAWlBtB,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAAS8V,KACP,IAAI9V,EAAIG,EAAgBG,EAAgBc,EAASC,EAwFjD,OAtFArB,EAAKlB,GAj7TQ,WAk7TTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzP,KAEpC8P,IAAOzW,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAKuT,QACMjrB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,IACV2X,EAkNtB,WACE,IAAIrB,EAAoBM,EAExBN,EAAKlB,GACAiU,OACMrpB,GACJwW,OACMxW,GACJwrB,OACMxrB,GACJwW,OACMxW,IACT4W,EAAKqU,QACMjrB,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EAEfA,EA7pUG,CACL/gC,QAAS,iBACT+K,GA0pUgBs2B,KAGdxB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3PmB+V,MACMrsB,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EAEfA,EADAG,EAr9TT,CACLrhC,KAAM,SACNoB,KAm9T4BogC,EAl9T5B7/B,aAAa,EACbuJ,GAi9TgCo3B,EAh9ThCl3B,YAg9ToCm3B,KAGtBvC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS4B,KACP,IAAI5B,EAAYI,EAAQE,EAhgUF1jC,EAAGmoB,EAwiUzB,OAtCAib,EAAKlB,GACAkX,OACMtsB,GACJwW,OACMxW,IACT0W,EAAKqB,QACM/X,GACJwW,OACMxW,IACT4W,EAgCV,WACE,IAAIN,EAAoBM,EAAQE,EAAQY,EAASC,EAAoBE,EAErEvB,EAAKlB,GAwoZP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAhorBQ,UAiorBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3C,KAEpCgD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAnprB6B,UAsprB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA1qZFiW,KACMvsB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EA2oKV,WACE,IAAIN,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,EAIjD,GAFArB,EAAKlB,IACLqB,EAAK+V,QACMxsB,EAET,GADKwW,OACMxW,EAKT,IAJA0W,EAAKuU,QACMjrB,IACT0W,EAAK,MAEHA,IAAO1W,EAAY,CA4CrB,IA3CA2W,EAAK,GACLC,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAK8U,QACMxsB,IACTgjB,EAAMxM,QACMxW,IACV2X,EAAMsT,QACMjrB,IACV2X,EAAM,MAEJA,IAAQ3X,EAEV4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,IAG3BvC,GAAcwB,EACdA,EAAK5W,KAmBfoV,GAAcwB,EACdA,EAAK5W,GAEA4W,IAAO5W,GACZ2W,EAAGl/B,KAAKm/B,GACRA,EAAKxB,IACLyB,EAAKL,QACMxW,IACT8W,EAAKgC,QACM9Y,IACT8b,EAAKtF,QACMxW,IACT0X,EAAK8U,QACMxsB,IACTgjB,EAAMxM,QACMxW,IACV2X,EAAMsT,QACMjrB,IACV2X,EAAM,MAEJA,IAAQ3X,EAEV4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,IAG3BvC,GAAcwB,EACdA,EAAK5W,KAmBfoV,GAAcwB,EACdA,EAAK5W,GAGL2W,IAAO3W,GACMsW,EACfG,EAp3dK,SAASpW,EAAM/f,EAAI6N,GACxB,MAAMs+B,EAAK,CAAEr3C,KAAM,aAEnB,OADAq3C,EAAGv4C,MAAQssB,GAAWH,EAAMlS,GACrBs+B,EAi3dFC,CAASjW,EAAIC,EAAIC,GACtBL,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EArwKMqW,MACM3sB,GACJwW,OACMxW,GA9mVR,QA+mVGF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B2/B,EAAKhX,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEf0B,EAAK9W,EACmB,IAApByV,IAAyBW,GAAS9T,IAEpCwU,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKuD,QACMjb,GACHwW,OACMxW,IACV2X,EAAM6H,QACMxf,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACV6X,EAAMoT,QACMjrB,IACV6X,EAAM,MAEJA,IAAQ7X,GACKsW,EAllUvB1jC,EAmlUsBgkC,EAnlUnBtjC,EAmlUuBokC,EAnlUjBp3B,EAmlU0Bu3B,GAnlU7BhlC,EAmlUwB8kC,GAllU5CthC,SAAW,IAmlUWigC,EAllUjB,CACL,KAAQ,QACR,KAAQ1jC,EACR8N,OAAQpN,EACRqN,QAAS9N,EACTyN,QA+kUsB80B,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,GA/oUM,IAASptB,EAAGU,EAAGT,EAAGyN,EAkpU/B,OAAOg2B,EA3IMsW,MACM5sB,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EAhhUAjb,EAihUGub,GAjhUN1jC,EAihUEwjC,GAhhUZ,KAAIxjC,EAAE,GAAGmD,SAAWglB,GAihUtBib,EAhhUGpjC,IAkhUHkiC,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGAsW,EA6OT,SAASoH,KACP,IAAIpH,EAAIG,EAAgBG,EAqCxB,OAnCAN,EAAKlB,IACLqB,EAAKiC,QACM1Y,GACJwW,OACMxW,GACJonB,OACMpnB,GACJwW,OACMxW,IACT4W,EAAK8B,QACM1Y,GACMsW,EAEfA,EADAG,EA/wUK,CA+wUSA,EAAIG,KAmB1BxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyB,KACP,IAAIzB,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAKkP,QACM3lB,EAAY,CAGrB,IAFAuW,EAAK,GACLG,EAAKmW,KACEnW,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKmW,KAEHtW,IAAOvW,GACMsW,EAEfA,EADAG,EAAK7P,GAAS6P,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASuW,KACP,IAAIvW,EAAQC,EAAQI,EAiDpB,OA/CAL,EAAKlB,GACAoB,OACMxW,IACTuW,EAAKuC,QACM9Y,GACJwW,OACMxW,IACT2W,EAAKgP,QACM3lB,GACMsW,EAEfA,EADcK,IAepBvB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACAoB,OACMxW,IACTuW,EAkBN,WACE,IAAID,EAAIG,EAAQC,EAAQE,EAAgBc,EAAIsL,EAAKrL,EAAK+M,EAAK9M,EAAK4D,EAAK3D,EAIrE,GAFAvB,EAAKlB,IACLqB,EAAK8K,QACMvhB,EAET,GADKwW,OACMxW,EAET,IADA0W,EAAKiP,QACM3lB,EAET,GADKwW,OACMxW,EAET,IADA4W,EAAKmJ,QACM/f,EAET,GADKwW,OACMxW,EAET,GADK4Y,OACM5Y,EAET,GADKwW,OACMxW,EAET,IADA0X,EAAKuF,QACMjd,EAAY,CA6BrB,IA5BAgjB,EAAM,GACNrL,EAAMvC,IACNsP,EAAMlO,QACMxW,IACV4X,EAAMkB,QACM9Y,IACVwb,EAAMhF,QACMxW,IACV6X,EAAMoF,QACMjd,EAEV2X,EADA+M,EAAM,CAACA,EAAK9M,EAAK4D,EAAK3D,IAe5BzC,GAAcuC,EACdA,EAAM3X,GAED2X,IAAQ3X,GACbgjB,EAAIvrC,KAAKkgC,GACTA,EAAMvC,IACNsP,EAAMlO,QACMxW,IACV4X,EAAMkB,QACM9Y,IACVwb,EAAMhF,QACMxW,IACV6X,EAAMoF,QACMjd,EAEV2X,EADA+M,EAAM,CAACA,EAAK9M,EAAK4D,EAAK3D,IAe5BzC,GAAcuC,EACdA,EAAM3X,GAGNgjB,IAAQhjB,IACV2X,EAAMnB,QACMxW,IACV0kB,EAAM1L,QACMhZ,GACKsW,EAl8UjBjb,EAm8UgBob,EAn8UTpW,EAm8UiBqX,EAn8UXvpB,EAm8Ue60B,GAn8UxB7uC,EAm8UgBuiC,GAl8UhC1+B,KAAOqjB,EACTlnB,EAAE4O,MAAQyd,GAAWH,EAAMlS,GAk8UXmoB,EADAG,EAh8UTtiC,IA28UKihC,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAn/UM,IAAS3E,EAAIlnB,EAAGksB,EAAMlS,EAq/U/BmoB,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8K,QACMvhB,GACJwW,OACMxW,IACT0W,EAAKiP,QACM3lB,GACJwW,OACMxW,IACT4W,EAAK4K,QACMxhB,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EACfG,EAhgVC,SAASpb,EAAIlnB,EAAGqC,GAGrB,OAFArC,EAAE6D,KAAOqjB,EACTlnB,EAAE2O,GAAOtM,EACFrC,EA6/UE24C,CAASrW,EAAIC,EAAIE,GACtBN,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8K,QACMvhB,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAKQ,QACMpX,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAKuT,QACMjrB,IACT0X,EAAK,MAEHA,IAAO1X,IACTgjB,EAAMxM,QACMxW,IACV2X,EAAM6J,QACMxhB,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EACfG,EAhjVb,SAASpb,EAAI7U,EAAM0H,EAAO1X,GAEjC,OADAgQ,EAAKzP,aAAc,EACZ,CACLP,KAAMgQ,EACNlG,GAAI4N,EACJlW,KAAMqjB,EACNvY,GAAItM,GA0iVmBu2C,CAAStW,EAAIG,EAAIc,EAAIC,GAC1BrB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,KAKX,OAAOsW,EAhRE0W,MACMhtB,GACMsW,EAEfA,EADcC,IAOhBnB,GAAckB,EACdA,EAAKtW,IAIFsW,EAkWT,SAAS2W,KACP,IAAI3W,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,EAwHjD,OAtHArB,EAAKlB,GAprVQ,gBAqrVTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxO,KAEpC6O,IAAOzW,IACTuW,EAAKC,QACMxW,GA5rVA,cA6rVLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASvO,KAEpC6O,IAAO1W,IAlsVF,cAmsVHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAStO,MAGtC4O,IAAO1W,IACT2W,EAAKH,QACMxW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBwB,EAl8VG,IAm8VHxB,OAEAwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAShQ,KAEpCwQ,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKoW,QACMltB,IACT8b,EAAKtF,QACMxW,GAztVZ,YA0tVOF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/BugC,EAAK5X,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsC,EAAK1X,EACmB,IAApByV,IAAyBW,GAASrO,KAEpC2P,IAAO1X,IA/tVd,SAguVSF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/BugC,EAAK5X,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsC,EAAK1X,EACmB,IAApByV,IAAyBW,GAASpO,MAGtC0P,IAAO1X,IACTgjB,EAAMxM,QACMxW,GAC4B,KAAlCF,EAAMR,WAAW8V,KACnBuC,EAj+VT,IAk+VSvC,OAEAuC,EAAM3X,EACkB,IAApByV,IAAyBW,GAAS/P,KAEpCsR,IAAQ3X,EAEVsW,EADAG,EAAK,CAACA,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EAAKrL,IAG/CvC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASqP,KACP,IAAIrP,EAAIG,EAAIF,EAAIG,EAAIC,EAAQE,EAAIC,EAAQY,EApyVlBvjC,EAAW+Z,EA65VjC,OAvHAooB,EAAK8V,QACMpsB,IACTsW,EAAKlB,IACLqB,EAAKiC,QACM1Y,IACTuW,EAlON,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,EA0F5C,OAxFA1M,EAAKlB,GACDjO,GAASlhB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BqB,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShP,KAEpCqP,IAAOzW,GACLsH,GAASrhB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BmB,EAAKzW,EAAMqtB,OAAO/X,IAClBA,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAAS7O,KAEpCgP,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKsG,QACMjd,IACT4W,EAAKJ,QACMxW,GACLwH,GAASvhB,KAAK6Z,EAAMqtB,OAAO/X,MAC7ByB,EAAK/W,EAAMqtB,OAAO/X,IAClBA,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS3O,KAEpCoP,IAAO7W,IACT8W,EAAKN,QACMxW,IACT8b,EAAKmB,QACMjd,IACT0X,EAAKlB,QACMxW,GACL0H,GAASzhB,KAAK6Z,EAAMqtB,OAAO/X,MAC7B4N,EAAMljB,EAAMqtB,OAAO/X,IACnBA,OAEA4N,EAAMhjB,EACkB,IAApByV,IAAyBW,GAASzO,KAEpCqb,IAAQhjB,EAEVsW,EADAG,EAAK,CAACA,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAAIsL,IAG1C5N,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAuIE8W,MACMptB,IACTuW,EAAK,MAEHA,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAKsW,QACMjtB,IACT2W,EAAK,MAEHA,IAAO3W,GACJwW,OACMxW,IACT6W,EAAKoU,QACMjrB,IACT6W,EAAK,MAEHA,IAAO7W,GACMsW,EA9zVIpoB,EA+zVO2oB,EAC1BP,EADAG,EA9zVS,SADDtiC,EA+zVMsiC,GA9zVdrhC,MACJjB,EAAEmM,GAAK4N,EACA/Z,GAEF,IACFA,EACHmM,GAAI4N,KA2zVAknB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKmC,QACM5Y,IACTuW,EAAKC,QACMxW,IACT0W,EAAKU,QACMpX,IACT2W,EAAKH,QACMxW,GACJgZ,OACMhZ,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmW,QACMjtB,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKuT,QACMjrB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAEfA,EADAG,EA12VT,SAASjwB,EAAM6mC,EAAIn/B,GAExB,OADA1H,EAAKzP,aAAc,EACZ,CACLP,KAAMgQ,EACNlG,GAAI4N,GAs2Vao/B,CAAS5W,EAAII,EAAIY,KAGtBtC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,KAKJsW,EAGT,SAASiL,KACP,IAAIjL,EAAIG,EAAQC,EAyKhB,OAvKAJ,EAAKlB,IACLqB,EAw+PF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnpkBQ,SAopkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnH,KAEpCwH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA1gQFiX,MACMvtB,GACJwW,OACMxW,IACT0W,EAAK8W,QACMxtB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACJytB,OACMztB,GACMsW,EAEfA,EADAG,EAj6VuB,cA46V3BrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAu+PJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAtrkBQ,UAurkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlH,KAEpCuH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAzgQAoX,MACM1tB,GACJwW,OACMxW,IACT0W,EAAK8W,QACMxtB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACJytB,OACMztB,GACMsW,EAEfA,EADAG,EAt8VqB,eAi9VzBrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAs+PN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAztkBQ,SA0tkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjH,KAEpCsH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxgQEqX,MACM3tB,GACJwW,OACMxW,IACT0W,EAAK8W,QACMxtB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACJytB,OACMztB,GACMsW,EAEfA,EADAG,EA3+VmB,cAs/VvBrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EA0gQR,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/xkBQ,UAgykBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/G,KAEpCoH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5iQIsX,MACM5tB,GACJwW,OACMxW,IACT0W,EAAK+W,QACMztB,GACMsW,EAEfA,EADAG,EAAcA,EAzgWa,GAAG9gC,cAAR,UAohW1By/B,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EA88PV,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA5vkBQ,UA6vkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShH,KAEpCqH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAh/PMuX,MACM7tB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK+W,QACMztB,GACMsW,EAEfA,EADAG,EAliWD,SAASmJ,GAAK,OAAOA,EAAOA,EAAE,GAAGjqC,cAAR,QAA+B,OAkiWlDm4C,CAASrX,KAWlBrB,GAAckB,EACdA,EAAKtW,OAORsW,EAGT,SAASoC,KACP,IAAIpC,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EA4HhC,OA1HAR,EAAKlB,IACLqB,EAAKsX,QACM/tB,GACTuW,EAAKnB,IACLsB,EAAKF,QACMxW,IACT2W,EAAKgM,QACM3iB,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKkX,QACM/tB,EAETuW,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACT0W,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK+L,QACM3iB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKiX,QACM/tB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,GACMsW,EAEfA,EADAG,EAtnWO,SAASp1B,EAAIE,EAAQ4M,GAC1B,MAAM7F,EAAM,CAAEjH,GAAI,KAAMD,MAAOC,GAO/B,OANa,OAAT8M,IACF7F,EAAIjH,GAAKA,EACTiH,EAAI0lC,QAAU3sC,EACdiH,EAAI/G,OAASA,EAAO,GACpB+G,EAAIlH,MAAQ+M,EAAK,IAEZ7F,EA8mWJ2lC,CAASxX,EAAIF,EAAIG,KAGtBtB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKsX,QACM/tB,GACTuW,EAAKnB,IACLsB,EAAKF,QACMxW,IACT2W,EAAKgM,QACM3iB,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKkX,QACM/tB,EAETuW,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,IACTuW,EAAK,MAEHA,IAAOvW,GACMsW,EAEfA,EADAG,EA9pWO,SAASoH,EAAI1vB,GAClB,MAAM7F,EAAM,CAAEjH,GAAI,KAAMD,MAAOy8B,GAK/B,OAJa,OAAT1vB,IACF7F,EAAIjH,GAAKw8B,EACTv1B,EAAIlH,MAAQ+M,EAAK,IAEZ7F,EAwpWJ4lC,CAASzX,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAASkL,KACP,IAAIlL,EAAYI,EAyBhB,OAvBAJ,EAAKlB,GACA8F,OACMlb,GACJwW,OACMxW,IACT0W,EAAKwT,QACMlqB,GACMsW,EAEfA,EADcI,IAWlBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS6B,KACP,IAAI7B,EAAYI,EAyBhB,OAvBAJ,EAAKlB,GAsqQP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAjolBQ,UAkolBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvG,KAEpC4G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvsQF6X,KACMnuB,GACJwW,OACMxW,IACT0W,EAAKwT,QACMlqB,GACMsW,EAEfA,EADcI,IAWlBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAmNT,SAASiU,KACP,IAAIjU,EAAIG,EAAgBG,EAqCxB,OAnCAN,EAAKlB,IACLqB,EAAKwG,QACMjd,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,IACT4W,EAAKwX,QACMpuB,GACMsW,EAEfA,EADAG,EAn7WG,CACLjjC,KAk7WgBijC,EAj7WhBjjB,wBAi7WoBojB,KAmB1BxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS8X,KACP,IAAI9X,EAAIG,EAAQC,EAiDhB,OA/CAJ,EAAKlB,IACLqB,EAAKwG,QACMjd,IACMsW,EACfG,EAAcA,IAEhBH,EAAKG,KACMzW,IACTsW,EAAKlB,IACLqB,EAAKmC,QACM5Y,GACJwW,OACMxW,IACT0W,EAqCR,WACE,IAAIJ,EAAIG,EAAQC,EAAQE,EAAQE,EAEhCR,EAAKlB,IACLqB,EAAKmE,QACM5a,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK2X,QACMruB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKS,QACMrX,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAwCd,WACE,IAAIR,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAYa,EAAIsL,EAAU0B,EAEtDpO,EAAKlB,GAljXQ,UAmjXTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnO,KAEpCwO,IAAOzW,GACJwW,OACMxW,IACT0W,EAAK4X,QACMtuB,GA5jXF,cA6jXHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bw/B,EAAK7W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAASlO,KAEpCyO,IAAO3W,IACT4W,EAAKJ,QACMxW,GApkXN,cAqkXCF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B0/B,EAAK/W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAASjO,KAEpC0O,IAAO7W,GACJwW,OACMxW,GACJ4qB,OACM5qB,IACT0X,EAAKlB,QACMxW,GAhlXd,YAilXSF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/B6rC,EAAMljB,EAAMsa,OAAOhF,GAAa,GAChCA,IAAe,IAEf4N,EAAMhjB,EACkB,IAApByV,IAAyBW,GAAShO,KAEpC4a,IAAQhjB,GACJwW,OACMxW,GAxlXnB,QAylXaF,EAAMsa,OAAOhF,GAAa,IAC5BsP,EA1lXX,MA2lXWtP,IAAe,IAEfsP,EAAM1kB,EACkB,IAApByV,IAAyBW,GAAS/N,KAEpCqc,IAAQ1kB,GACKsW,EAEfA,EADAG,EA/lXX,sDAkmXWrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAWXoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8X,QACMvuB,GACJwW,OACMxW,IACT0W,EAAK8X,QACMxuB,IACT0W,EAAK+X,MAEH/X,IAAO1W,GACMsW,EACfG,EAzpXK,QAypXaC,EAzpXHxiC,MA0pXfoiC,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8X,QACMvuB,GACJwW,OACMxW,IACT0W,EAAK4X,QACMtuB,IACT2W,EAAKH,QACMxW,IACT4W,EAAK6X,QACMzuB,IACT6W,EAAKL,QACMxW,GACJ4qB,OACM5qB,GACJwW,OACMxW,IACT0X,EAAK8W,QACMxuB,GACMsW,EAzrXZ/uB,EA0rXemwB,EAAlBjB,EAxrXT,gBAwrXuBG,EAxrXL1iC,aAAaqT,EAAErT,QAyrXxBoiC,EAAKG,IAkCrBrB,GAAckB,EACdA,EAAKtW,KA9tXE,IAAYzY,EAmuXzB,OAAO+uB,EA7OUoY,MACM1uB,IACT8W,EAAK,MAEHA,IAAO9W,GACMsW,EAEfA,EADAG,EAphXD,CACLjjC,KAmhXoBijC,EAlhXpB7c,YAkhXwB8c,EAjhXxBp6B,QAihX4Bs6B,EAhhX5B9c,oBAghXgCgd,KAG1B1B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAnGIqY,MACM3uB,IACT0W,EAAK,MAEHA,IAAO1W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADAG,EAh+WC,CACL9c,qBA+9WkB+c,EA99WlB3/B,aAAa,KAy+Wbq+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAIFsW,EA4QT,SAASkY,KACP,IAAIlY,EAAIG,EAAQC,EAjuXM1hC,EAAG1B,EA4wXzB,OAzCAgjC,EAAKlB,IACLqB,EAAKmY,QACM5uB,GACJwW,OACMxW,GAzuXA,cA0uXLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS9N,KAEpCoO,IAAO1W,IAlwXF,cAmwXHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASjO,MAGtCuO,IAAO1W,GACMsW,EAzvXIhjC,EA0vXDojC,GA1vXF1hC,EA0vXFyhC,GAxvXZviC,OAAS,IAAIZ,EAAEqC,cAyvXjB2gC,EADAG,EAvvXOzhC,IA0vXPogC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKuY,MAGAvY,EAGT,SAASmY,KACP,IAAInY,EAAIG,EAAQC,EA3wXM1hC,EA6yXtB,OAhCAshC,EAAKlB,IACLqB,EAAKmY,QACM5uB,GACJwW,OACMxW,GAzyXA,cA0yXLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASjO,KAEpCuO,IAAO1W,GACMsW,GA1xXCthC,EA2xXFyhC,GAzxXZviC,OAAS,aA0xXXoiC,EADAG,EAxxXOzhC,IA2xXPogC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKuY,MAGAvY,EAGT,SAASuY,KACP,IAAIvY,EAAIG,EAAQC,EAqChB,OAnCAJ,EAAKlB,GAz0XQ,YA00XTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShO,KAEpCqO,IAAOzW,GACJwW,OACMxW,GAxzXA,QAyzXLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS7N,KAEpCmO,IAAO1W,GACMsW,EAEfA,EADAG,EA9zXO,CAAErhC,KAAM,sBAAuBlB,MAAO,iBAi0X7CkhC,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASsY,KACP,IAAItY,EAAIG,EAmBR,OAjBAH,EAAKlB,GAt3XQ,cAu3XTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlO,KAEpCuO,IAAOzW,IACMsW,EACfG,EAz1XW,CAAErhC,KAAM,sBAAuBlB,MAy1X5BuiC,EAz1XqC9gC,iBA21XrD2gC,EAAKG,KACMzW,IACTsW,EAAKsN,MAGAtN,EAGT,SAAS+X,KACP,IAAI/X,EAAoBM,EAqCxB,OAnCAN,EAAKlB,GACA6N,OACMjjB,GACJwW,OACMxW,GACJ+pB,OACM/pB,GACJwW,OACMxW,IACT4W,EAAKgT,QACM5pB,GACMsW,EAEfA,EADcM,IAmBtBxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASe,KACP,IAAIf,EAAoBM,EAqCxB,OAnCAN,EAAKlB,GAwiPP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/wlBQ,UAgxlBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpG,KAEpCyG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAzkPFwY,KACM9uB,GACJwW,OACMxW,GACJ+pB,OACM/pB,GACJwW,OACMxW,IACT4W,EA6BV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKsY,QACM/uB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKiY,QACM/uB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKiY,QACM/uB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA1GM0Y,MACMhvB,GACMsW,EAEfA,EADaM,IAmBrBxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAmFT,SAASyY,KACP,IAAIzY,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAwE5B,OAtEAP,EAAKlB,IACLqB,EAAKiE,QACM1a,GACJwW,OACMxW,GACT0W,EAAKtB,GAhmZI,YAimZLtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bw/B,EAAK7W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAASxS,KAEpC+S,IAAO3W,IACT4W,EAAKJ,QACMxW,IACT6W,EAAKyP,QACMtmB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAWlBzB,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,IACT0W,EAAK,MAEHA,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAAK2J,QACMvgB,IACT4W,EAwtPZ,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA1kmBQ,QA2kmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3F,KAEpCgG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7lmB6B,QAgmmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3vPQ2Y,IAEHrY,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EAEfA,EADAG,EAnjYQ,CAAEjgC,KAmjYIigC,EAnjYKrhC,KAmjYGwhC,KAGtBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS4Y,KACP,IAAI5Y,EAOJ,OALAA,EAAKsN,QACM5jB,IACTsW,EAAKgM,MAGAhM,EAGT,SAASgB,KACP,IAAIhB,EAAYI,EAAQE,EAAIC,EAAIC,EAAIgF,EA+DpC,OA7DAxF,EAAKlB,GAwjPP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAj+lBQ,UAk+lBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9F,KAEpCmG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAzlPF6Y,KACMnvB,GACJwW,OACMxW,IACT0W,EAAKwY,QACMlvB,GACJwW,OACMxW,GACT4W,EAAKxB,IACLyB,EAAKiC,QACM9Y,IACT6W,EAAK2U,MAEH3U,IAAO7W,IACT8W,EAAKN,QACMxW,IACT8b,EAAKoT,QACMlvB,EAET4W,EADAC,EAAK,CAACA,EAAIC,EAAIgF,IAWlB1G,GAAcwB,EACdA,EAAK5W,GAEH4W,IAAO5W,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EAEfA,EA/nYG,SAAS8Y,EAAIjhC,GAClB,MAAM/Q,EAAM,CAACgyC,GAEb,OADIjhC,GAAM/Q,EAAI3F,KAAK0W,EAAK,IACjB,CACLL,UAAWK,GAAQA,EAAK,IAAMA,EAAK,GAAGhX,eAAiB,GACvDjD,MAAOkJ,GAynYFiyC,CAAS3Y,EAAIE,KAGlBxB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASuN,KACP,IAAIvN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKiE,QACM1a,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAltYS,SAASpW,EAAMlS,GACpB,MAAMs+B,EAAK,CAAEr3C,KAAM,aAEnB,OADAq3C,EAAGv4C,MAAQssB,GAAWH,EAAMlS,GACrBs+B,EA+sYN6C,CAAS7Y,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASiZ,KACP,IAAIjZ,EAgBJ,OAdAA,EAAKkZ,QACMxvB,IACTsW,EAAKmZ,QACMzvB,IACTsW,EA2rBN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKiZ,QACM1vB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAK6S,QACMxpB,IACT4W,EAAKiU,QACM7qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4Y,QACM1vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAK6S,QACMxpB,IACT4W,EAAKiU,QACM7qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4Y,QACM1vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKrW,EAAQqW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAxwBEqZ,MACM3vB,IACTsW,EAqcR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAIxB,GAFAN,EAAKlB,IACLqB,EAAKyL,QACMliB,EAAY,CAiBrB,GAhBAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgZ,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgZ,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,QAITuW,EAAKvW,EAEHuW,IAAOvW,GACMsW,EACfG,EA7qZSoZ,GA6qZKpZ,EAAIF,EA7qZgB,GAAG,IA8qZrCD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA9fIwZ,MACM9vB,IACTsW,EAAKyZ,MAMNzZ,EAGT,SAASoE,KACP,IAAIpE,EAOJ,OALAA,EAAKiZ,QACMvvB,IACTsW,EAAKc,MAGAd,EAmFT,SAAS0Z,KACP,IAAI1Z,EAAYI,EAqChB,OAnCAJ,EAAKlB,GACAwD,OACM5Y,GACJwW,OACMxW,IACT0W,EAAKkT,QACM5pB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADcI,IAmBtBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyZ,KACP,IAAIzZ,EAAIG,EAAQC,EAAIC,EAAIC,EAAQE,EAuJhC,OArJAR,EAAKlB,IACLqB,EAAKoL,QACM7hB,GACJwW,OACMxW,IACT0W,EAAKkT,QACM5pB,IACT0W,EAAK,MAEHA,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAAKmL,QACM/hB,GACMsW,EAEfA,EADAG,EAp4YG,CACLp7B,WAm4YgBq7B,EAl4YhBthC,KAAM,QACNG,QAAS,GACTwB,aAAa,KA24Yfq+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKwZ,QACMjwB,IACTyW,EAAKyZ,MAEHzZ,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,GACJ6hB,OACM7hB,IACT0W,EAAKF,QACMxW,IACT2W,EA6gJV,WACE,IAAIL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK4L,QACMriB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKuL,QACMriB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKuL,QACMriB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EACfG,EAAKlW,EAAQkW,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA1lJM6Z,MACMnwB,IACT4W,EAAKJ,QACMxW,GACJ+hB,OACM/hB,GACMsW,EAEfA,EADAG,EAx6YD,SAASzhC,EAAG1B,GACnB,MAAO,CACL+F,WAAYrE,EACZqG,WAAY/H,EAAE4C,IAAIhD,IAAK,CAAGsD,KAAMtD,EAAGoN,GAAI,QACvClL,KAAM,QACNG,QAASP,GAAK,QACd+B,aAAa,GAk6YFq5C,CAAS3Z,EAAIE,KAuB5BvB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKwZ,QACMjwB,IACTyW,EAAKyZ,MAEHzZ,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKmL,QACM7hB,IACT0W,EAAKkC,MAEHlC,IAAO1W,IACT2W,EAAKH,QACMxW,IACT4W,EAnOd,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKuZ,QACMhwB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKkZ,QACMhwB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAKkZ,QACMhwB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKlW,EAAQkW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAsJU+Z,MACMrwB,IACT4W,EAAK8D,MAEH9D,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKiL,QACM/hB,IACT8W,EAAKkC,MAEHlC,IAAO9W,GACMsW,EAEfA,EADAG,EAz9YL,SAASzhC,EAAG1B,GACnB,MAAO,CACL+F,WAAYrE,EACZkG,UAAW5H,EACX8B,KAAM,QACNG,QAASP,GAAK,QACd+B,aAAa,GAm9YEu5C,CAAS7Z,EAAIG,KAGlBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,KAKJsW,EAGT,SAASkZ,KACP,IAAIlZ,EAAIG,EAAgBG,EAr/YF5hC,EAyiZtB,OAlDAshC,EAAKlB,IACLqB,EAAK8Z,QACMvwB,IACTyW,EAAKgT,MAEHhT,IAAOzW,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKgT,QACM5pB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADAG,EAzgZD,CACLp9B,WAFcrE,EA0gZMyhC,EAvgZpBv7B,UAugZwB07B,EAtgZxBxhC,KAAM,SACNG,QAASP,GAAK,SACd+B,aAAa,KA+hZnBq+B,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASmZ,KACP,IAAInZ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKmZ,QACM5vB,EAAY,CA6BrB,GA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkU,QACM9qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8Y,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkU,QACM9qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8Y,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,QAITuW,EAAKvW,EAEHuW,IAAOvW,IACT0W,EAAKF,QACMxW,IACT2W,EAAK6Z,QACMxwB,IACT2W,EAAK,MAEHA,IAAO3W,GACMsW,EAEfA,EADAG,EAhnZK,SAASpW,EAAMlS,EAAMsiC,GAC5B,MAAMC,EAAYpwB,GAAsBD,EAAMlS,GAC9C,OAAW,OAAPsiC,EAAoBC,EACH,eAAZD,EAAGr7C,KAA8BkrB,GAAsBowB,EAAWD,EAAGtiC,MAClE/X,GAAiBq6C,EAAGp1B,GAAIq1B,EAAWD,EAAGl6C,OA4mZ3Co6C,CAASla,EAAIF,EAAII,KAGtBvB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA2JT,SAAS4T,KACP,IAAI5T,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKiE,QACM1a,EAAY,CAmCrB,IAlCAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgU,QACM5qB,IACT4W,EAAKiU,QACM7qB,IACT4W,EAAKkC,MAGLlC,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKgU,QACM5qB,IACT4W,EAAKiU,QACM7qB,IACT4W,EAAKkC,MAGLlC,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAK4D,QACM1a,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAr1ZS,SAASpW,EAAMlS,GACtB,MAAM7Q,EAAM6Q,EAAKjV,OACjB,IAAI3B,EAAS8oB,EACTvS,EAAY,GAChB,IAAK,IAAIjb,EAAI,EAAGA,EAAIyK,IAAOzK,EACN,MAAfsb,EAAKtb,GAAG,IACVib,EAAY,IACP9X,MAAMC,QAAQsB,KAASA,EAAS,CAACA,IACtCA,EAAOE,KAAK0W,EAAKtb,GAAG,KAEpB0E,EAASnB,GAAiB+X,EAAKtb,GAAG,GAAI0E,EAAQ4W,EAAKtb,GAAG,IAG1D,GAAkB,MAAdib,EAAmB,CACrB,MAAM2+B,EAAK,CAAEr3C,KAAM,aAEnB,OADAq3C,EAAGv4C,MAAQqD,EACJk1C,EAET,OAAOl1C,EAm0ZJq5C,CAASna,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAmFT,SAASoZ,KACP,IAAIpZ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoa,QACM7wB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAK6S,QACMxpB,IACT4W,EAAKgU,QACM5qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK+Z,QACM7wB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAK6S,QACMxpB,IACT4W,EAAKgU,QACM5qB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK+Z,QACM7wB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKrW,EAAQqW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASua,KACP,IAAIva,EAAIG,EAAIF,EAAIG,EAAIC,EAqEpB,OAnEAL,EAAKwa,QACM9wB,IACTsW,EA0GJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKuN,QACM9jB,IACT0W,EAAKF,QACMxW,IACT2W,EAAKoN,QACM/jB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EAAKhO,GAASgO,KAEhBH,EAAKG,KACMzW,IACTsW,EAAKyN,MAGP,OAAOzN,EAnFFya,MACM/wB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKQ,QACMpX,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAtmaPjb,EAumaMob,GAvmaFjwB,EAumaMowB,GAtmarB7/B,aAAc,EAsmaX0/B,EArmaDoZ,GAAgBx0B,EAAI7U,GAsmanB8vB,EAAKG,IA0BjBrB,GAAckB,EACdA,EAAKtW,GAnoaM,IAAS3E,EAAI7U,EAsoa1B,OAAO8vB,EA5JA0a,MACMhxB,IACTsW,EAAKlB,IACLqB,EAAKqN,QACM9jB,IACTyW,EAAKrB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBmB,EA3/ZK,IA4/ZLnB,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAAS5N,KAEpC+N,IAAOvW,GACT0W,EAAKtB,GACLK,KACsC,KAAlC3V,EAAMR,WAAW8V,KACnBuB,EAhvcE,IAivcFvB,OAEAuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAS3V,IAExCgV,KACIkB,IAAO3W,EACT0W,OAAK,GAELtB,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EAETyW,EADAF,EAAK,CAACA,EAAIG,IAGVtB,GAAcqB,EACdA,EAAKzW,KAGPoV,GAAcqB,EACdA,EAAKzW,IAGLyW,IAAOzW,IACTuW,EAAKC,QACMxW,IACT0W,EAAKma,QACM7wB,GACMsW,EAEfA,EADAG,EAjiaKoZ,GAAgB,MAiiaPnZ,KAWlBtB,GAAckB,EACdA,EAAKtW,IAKJsW,EAGT,SAASwa,KACP,IAAIxa,EAAIG,EAAQC,EApjaMpgC,EAAMm6C,EAsla5B,OAhCAna,EAAKlB,IACLqB,EAAKmM,QACM5iB,GACJwW,OACMxW,IACT0W,EAAK8Z,QACMxwB,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAhkaChgC,EAikaFmgC,EACdH,EADAG,EAhkaa,QADSga,EAikaJ/Z,GAhkaQpgC,EACH,eAAZm6C,EAAGr7C,KAA8BkrB,GAAsBhqB,EAAMm6C,EAAGtiC,MAC7D/X,GAAiBq6C,EAAGp1B,GAAI/kB,EAAMm6C,EAAGl6C,SAika/C6+B,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKgQ,QACMtmB,IACTsW,EAAK2E,MAIF3E,EA6FT,SAASka,KACP,IAAIla,EAgBJ,OAdAA,EAiBF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKlB,GACLqB,EAAK,GACLF,EAAKnB,IACLsB,EAAKF,QACMxW,IACT2W,EAAKsa,QACMjxB,IACT4W,EAAKJ,QACMxW,IACT6W,EAAK4Y,QACMzvB,IACT6W,EAAK+L,MAEH/L,IAAO7W,EAETuW,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAGlBzB,GAAcmB,EACdA,EAAKvW,KAWXoV,GAAcmB,EACdA,EAAKvW,GAEP,GAAIuW,IAAOvW,EACT,KAAOuW,IAAOvW,GACZyW,EAAGh/B,KAAK8+B,GACRA,EAAKnB,IACLsB,EAAKF,QACMxW,IACT2W,EAAKsa,QACMjxB,IACT4W,EAAKJ,QACMxW,IACT6W,EAAK4Y,QACMzvB,IACT6W,EAAK+L,MAEH/L,IAAO7W,EAETuW,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAGlBzB,GAAcmB,EACdA,EAAKvW,KAWXoV,GAAcmB,EACdA,EAAKvW,QAITyW,EAAKzW,EAEHyW,IAAOzW,IACMsW,EACfG,EAtwaa,CAAErhC,KAAM,aAAc+Y,KAswarBsoB,IAIhB,OAFAH,EAAKG,EA7FAya,MACMlxB,IACTsW,EAAKkJ,QACMxf,IACTsW,EA2ON,WACE,IAAIA,EAAIG,EAAQC,EAAgBI,EAEhCR,EAAKlB,IACLqB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKuN,QACM9jB,IACT0W,EAAKF,QACMxW,IACT2W,EAAK2X,QACMtuB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EAAKhO,GAASgO,KAEhBH,EAAKG,KACMzW,IACTsW,EAAKgY,MAGP,OAAOhY,EAnFF6a,MACMnxB,GACJwW,OACMxW,IACT0W,EAAKkM,QACM5iB,GACJwW,OACMxW,GACJ4qB,OACM5qB,GACJwW,OACMxW,IACT8W,EAAK8L,QACM5iB,GACMsW,EAEfA,EADAG,EAx5aC,CACLpb,GAu5akBob,EAt5alBlgC,MAAO,CACLnB,KAAM,YACNlB,MAAO,CAo5aawiC,EAAII,OA2BlC1B,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA7RE8a,MACMpxB,IACTsW,EAgKR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,IACLqB,EAAK4a,QACMrxB,IACTuW,EAAKC,QACMxW,IACT0W,EAAKkM,QACM5iB,GACMsW,EAEfA,EADAG,EA70aS,CAAEpb,GAAI,KAAM9kB,MA60aPmgC,KAWlBtB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAK8a,QACMrxB,IACT0W,EAAKF,QACMxW,IACT2W,EAAKmN,QACM9jB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACTuW,EAAKC,QACMxW,IACT0W,EAAKkM,QACM5iB,GACMsW,EACfG,EAt3aK,SAASlgC,GACd,MAAO,CAAE8kB,GAAI,SAAU9kB,MAAOA,GAq3azB+6C,CAAS5a,GACdJ,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,IAIT,OAAOsW,EAtOIib,MACMvxB,IACTsW,EAAKqJ,MAMNrJ,EAoFT,SAAS2a,KACP,IAAI3a,EAgEJ,MA50aa,OA8waTxW,EAAMsa,OAAOhF,GAAa,IAC5BkB,EA/waW,KAgxaXlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASzN,KAEpC2N,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EArxaS,IAsxaTlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASxN,KAEpC0N,IAAOtW,IAzxaA,OA0xaLF,EAAMsa,OAAOhF,GAAa,IAC5BkB,EA3xaO,KA4xaPlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASvN,KAEpCyN,IAAOtW,IA/xaF,OAgyaHF,EAAMsa,OAAOhF,GAAa,IAC5BkB,EAjyaK,KAkyaLlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAStN,KAEpCwN,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EAvyaG,IAwyaHlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASrN,KAEpCuN,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EApjdA,IAqjdAlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS3V,IAEpC6V,IAAOtW,IAnzaR,OAozaGF,EAAMsa,OAAOhF,GAAa,IAC5BkB,EArzaD,KAszaClB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASpN,WAS7CsN,EA2MT,SAASkb,KACP,IAAIlb,EAAIG,EAAIF,EAAIG,EAAIC,EAiCpB,OA/BAL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKuN,QACM9jB,IACT0W,EAAKF,QACMxW,IACT2W,EAAK8a,QACMzxB,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EAAKhO,GAASgO,KAEhBH,EAAKG,KACMzW,IACTsW,EAAKmb,MAGAnb,EAGT,SAASqJ,KACP,IAAIrJ,EAAIG,EAAQC,EA4BhB,OA1BAJ,EAAKlB,IACLqB,EA9EF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAiCpB,OA/BAL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKuN,QACM9jB,IACT0W,EAAKF,QACMxW,IACT2W,EAAKgG,QACM3c,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACMsW,EACfG,EAAKhO,GAASgO,KAEhBH,EAAKG,KACMzW,IACTsW,EAAKqG,MAGArG,EA4CFob,MACM1xB,GACJwW,OACMxW,IACT0W,EAAK2L,QACMriB,IACT0W,EAAKoa,MAEHpa,IAAO1W,GACMsW,EAEfA,EADAG,EA9ibS,CAAEpb,GA8ibGob,EA9ibKlgC,MA8ibDmgC,KAGlBtB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASkJ,KACP,IAAIlJ,EAAIG,EAAQC,EAAQE,EA4ExB,OA1EAN,EAAKlB,IACLqB,EAAK+a,QACMxxB,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAKiN,QACM7jB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EADAG,EAhlbC,CAAEpb,GAglbWob,EAhlbHlgC,MAglbOqgC,KA2B9BxB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK+a,QACMxxB,GACJwW,OACMxW,IACT0W,EAAK4P,QACMtmB,IACT0W,EAAK0V,MAEH1V,IAAO1W,GACMsW,EAEfA,EADAG,EAxnbK,SAASpb,EAAI/T,GAClB,MAAO,CAAE+T,GAAIA,EAAI9kB,MAAO+Q,GAunbnBqqC,CAASlb,EAAIC,KAGlBtB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAASsM,KACP,IAAItM,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKmb,QACM5xB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsL,QACMliB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8a,QACM5xB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKsL,QACMliB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8a,QACM5xB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKrW,EAAQqW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS4L,KACP,IAAI5L,EAmBJ,OAjBsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA5tbW,IA6tbXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASnN,KAEpCqN,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EAlubS,IAmubTlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASlN,MAInCoN,EAGT,SAASsb,KACP,IAAItb,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKmZ,QACM5vB,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKwL,QACMpiB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8Y,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKwL,QACMpiB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8Y,QACM5vB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EA5ybWnW,GA4ybGmW,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS8L,KACP,IAAI9L,EA4BJ,OA1BsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA5zbW,IA6zbXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASjN,KAEpCmN,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EAl0bS,IAm0bTlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAShN,KAEpCkN,IAAOtW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBkB,EAx0bO,IAy0bPlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS/M,OAKrCiN,EAGT,SAASsZ,KACP,IAAItZ,EAAYI,EAn1bMmb,EAs5btB,OAjEAvb,EAAKyZ,QACM/vB,IACTsW,EAAKkZ,QACMxvB,IACTsW,EAyhFN,WACE,IAAIA,EAAIG,EAAgBG,EAAgBc,EAASC,EAAUC,EAAoBW,EAE/EjC,EAAKlB,IACLqB,EAAKqb,QACM9xB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,IACT0X,EAAKqN,QACM/kB,GACHwW,OACMxW,IACV2X,EAAMqB,QACMhZ,GACKsW,EA7ngBZhvB,EA8ngBesvB,EA9ngBZziC,EA8ngBgBujC,EAAtBjB,EA7ngBT,CACLrhC,KAAM,OACNG,QA2ngB4BkhC,EA3ngBjBt/B,cACXX,KAAM8Q,EACN9P,OAAQ,KACRyS,OAAQ9V,GAyngBMmiC,EAAKG,IA0CzBrB,GAAckB,EACdA,EAAKtW,GA1qgBM,IAAY1Y,EAAGnT,EA4qgBxBmiC,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKqb,QACM9xB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,IACT0X,EAAKqa,QACM/xB,GACHwW,OACMxW,IACV2X,EAAMiB,QACM5Y,GACJwW,OACMxW,IACV4X,EAAMoa,QACMhyB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACVuY,EAAMS,QACMhZ,GACKsW,EACfG,EAxsgBvB,SAASnjC,EAAGgU,EAAG2qC,GACtB,MAAO,CACL78C,KAAM,OACNG,QAASjC,EAAE6D,cACXX,KAAM8Q,EACN9P,OAAQ,KACRyS,OAAQ,CACNhR,SAAU,WAAag5C,EAAY,MAisgBJC,CAASzb,EAAIG,EAAIgB,GACtBtB,EAAKG,IAkErCrB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKqb,QACM9xB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,IACT0X,EAAKqa,QACM/xB,GACHwW,OACMxW,IACV2X,EAAMiB,QACM5Y,GACJwW,OACMxW,IACV4X,EAAMoa,QACMhyB,GACJwW,OACMxW,GACJ8Y,OACM9Y,GACJwW,OACMxW,IACVuY,EAAMyZ,QACMhyB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,GACJgZ,OACMhZ,GACKsW,EACfG,EAhzgBjC,SAASnjC,EAAGgU,EAAG2qC,EAAW94C,GAC/B,MAAO,CACL/D,KAAM,OACNG,QAASjC,EAAE6D,cACXX,KAAM8Q,EACN9P,OAAQ,KACRyS,OAAQ,CACNhR,SAAU,WAAag5C,EAAY,KAAO94C,EAAQ,MAyygBXg5C,CAAS1b,EAAIG,EAAIgB,EAAKW,GAC3BjC,EAAKG,IAkF7CrB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKqb,QACM9xB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJ2a,OACM3a,GACJwW,OACMxW,IACT0X,EA2ExB,WACE,IAAIpB,GAEJA,EAimIF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlvoBQ,WAmvoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5D,KAEpCiE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EArwoB6B,WAwwoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EApoIF8b,MACMpyB,IACTsW,EAqoIJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GArxoBQ,aAsxoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3D,KAEpCgE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxyoB6B,aA2yoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxqIA+b,IAGP,OAAO/b,EAnFoBgc,MACMtyB,GACHwW,OACMxW,IACV2X,EAAM4a,QACMvyB,IACV2X,EAAM,MAEJA,IAAQ3X,GACJwW,OACMxW,IACV4X,EAAMoB,QACMhZ,GACKsW,EACfG,EA35gBnB,SAASnjC,EAAGgU,EAAGtS,EAAGb,GACzB,MAAO,CACLiB,KAAM,OACNG,QAASjC,EAAE6D,cACXX,KAAM8Q,EACN9P,OAAQ,KACRyS,OAAQ,CACNhR,SAAUjE,GAAKb,EAAI,IAAMA,EAAG,MAo5gBDq+C,CAAS/b,EAAIG,EAAIc,EAAIC,GAC1BrB,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,KAuCzBoV,GAAckB,EACdA,EAAKtW,MAMb,OAAOsW,EA16FEmc,MACMzyB,IACTsW,EAAK+L,QACMriB,IACTsW,EAAKkW,QACMxsB,IACTsW,EAqpDZ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAgBc,GAExCpB,EAwnBF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBc,EAASC,EAEjDrB,EAAKlB,IACLqB,EAAKic,QACM1yB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK+b,QACM3yB,GACJwW,OACMxW,GACJssB,OACMtsB,GACJwW,OACMxW,IACT0X,EAAKkb,QACM5yB,IACT0X,EAAKmb,QACM7yB,IACT0X,EAAKob,QACM9yB,IACT0X,EAAKqb,MAIPrb,IAAO1X,GACHwW,OACMxW,IACV2X,EAAM+C,QACM1a,GACJwW,OACMxW,GACJgZ,OACMhZ,GACKsW,EAp6ff/uB,EAq6fkBqvB,EAr6ffziC,EAq6fmBujC,EAr6fhB1iC,EAq6foB2iC,EAA1BlB,EAp6fb,CACHrhC,KAm6f8BqhC,EAn6frBt/B,cACT8C,KAAM,CACJT,MAAO+N,EACPmH,UAAWva,EACXwa,OAAQ3Z,IAg6fMshC,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,GAz9fM,IAAazY,EAAGpT,EAAGa,EA29f5BshC,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKic,QACM1yB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK+b,QACM3yB,GACJwW,OACMxW,GACJssB,OACMtsB,GACJwW,OACMxW,IACT0X,EAAKgD,QACM1a,GACHwW,OACMxW,IACV2X,EAAMqB,QACMhZ,GACKsW,EACfG,EA1+fX,SAAS8G,EAAIh2B,EAAGvS,GACvB,MAAO,CACHI,KAAMmoC,EAAGpmC,cACT8C,KAAM,CACJT,MAAO+N,EACPoH,OAAQ3Z,IAq+fSg+C,CAASvc,EAAIG,EAAIc,GACtBpB,EAAKG,IA0CzBrB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GAhhgBI,eAihgBLtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnK,KAEpCwK,IAAOzW,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJ8Y,OACM9Y,GACJwW,OACMxW,IACT0X,EAAKib,QACM3yB,GACHwW,OACMxW,IACV2X,EAAMqB,QACMhZ,GACKsW,EACfG,EA5igBb,SAASnvB,EAAGC,GACnB,MAAO,CACHnS,KAAM,WACN5B,KAAM,aACNyG,KAAM,CAAE7E,KAAM,YAAalB,MAAO,CAACoT,EAAG,CAAElS,KAAM,SAAUlB,MAAOqT,KAC/DxL,KAAM,MAuigBek3C,CAASrc,EAAIc,GAClBpB,EAAKG,IA0CzBrB,GAAckB,EACdA,EAAKtW,KAKX,OAAOsW,EA72BF4c,MACMlzB,IACTsW,EA0TJ,WACE,IAAIA,EAAIG,EAAgBG,EAAQE,EAAiBa,EAEjDrB,EAAKlB,GAnofQ,cAoofTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5L,KAEpCiM,IAAOzW,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKsT,QACMlqB,GACJwW,OACMxW,IACT8W,EAlEd,WACE,IAAIR,EAAYI,EAAQE,EAExBN,EAAKlB,GACA6U,OACMjqB,GACJwW,OACMxW,IACT0W,EAAKyc,QACMnzB,IACT0W,EAAK0c,MAEH1c,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKsT,QACMlqB,GACMsW,EAEfA,EA5mfG,CACLt/B,OA0mfgB0/B,EAzmfhBlgC,KAymfoBogC,KAWtBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAyBU+c,MACMrzB,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACHwW,OACMxW,IACV2X,EAAM2b,QACMtzB,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EAEfA,EADAG,EApqfT,CACHrhC,KAAM,YACN6E,KAAM,CACJzD,KAiqfwBogC,EAhqfxB5oB,OAgqf4B8oB,GA9pf9B/6B,KA8pfkC47B,KAGtBvC,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAhZAid,MACMvzB,IACTsW,EAAKlB,IACLqB,EAgQN,WACE,IAAIH,GAEJA,EAAKkd,QACMxzB,IACTsW,EAi8MJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAl/qBQ,iBAm/qBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9C,KAEpCmD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EArgrB6B,iBAwgrB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAp+MAmd,IAGP,OAAOnd,EAxQEod,MACM1zB,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAKiN,QACM7jB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAK4b,QACMtzB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAEfA,EADAG,EAt4eP,CACLrhC,KAAM,WACN5B,KAo4e0BijC,EAn4e1Bx8B,KAm4e8B28B,GAn4ejB,CAAExhC,KAAM,YAAalB,MAAO,IACzC6H,KAk4ekC27B,KAGtBtC,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK+c,QACMxzB,GACJwW,OACMxW,IACT0W,EAAKid,QACM3zB,IACT0W,EAAK,MAEHA,IAAO1W,GACMsW,EAEfA,EADAG,EAh7eC,CACHrhC,KAAM,WACN5B,KA86egBijC,EA76ehB16B,KA66eoB26B,KAGlBtB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK8L,QACMviB,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAKsT,QACMlqB,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAK4b,QACMtzB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EACfG,EAn9eb,SAASjjC,EAAMN,EAAG0gD,GAEvB,OADE1gD,GAAgB,cAAXA,EAAEkC,OAAsBlC,EAAI,CAAEkC,KAAM,YAAalB,MAAO,CAAChB,KACzD,CACLkC,KAAM,WACN5B,KAAMA,EACNyG,KAAM/G,GAAO,CAAEkC,KAAM,YAAalB,MAAO,IACzC6H,KAAM63C,GA68eeC,CAASpd,EAAIG,EAAIc,GACtBpB,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,MAOf,OAAOsW,EA5zDQwd,MACM9zB,IACTsW,EAiGd,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQY,EAASC,EAEjDrB,EAAKlB,IACLqB,EAAKsd,QACM/zB,GACJwW,OACMxW,IACT0W,EAAKsd,QACMh0B,GACJwW,OACMxW,IACT4W,EAAKqd,QACMj0B,IACT4W,EAAK,MAEHA,IAAO5W,GACJwW,OACMxW,IACT8W,EAAKod,QACMl0B,GACJwW,OACMxW,IACT0X,EAAKqc,QACM/zB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAn9bX6d,EAo9bUzd,GAp9bM0d,EAo9bFxd,IAn9bbud,EAAe18C,KAAK28C,GAo9bzB9d,EADAG,EAl9bH,CACLrhC,KAAM,OACNoB,KAAM,KACNyD,KAAMk6C,KAk9bE/e,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,GAx/bM,IAASm0B,EAAgBC,EA0/blC9d,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKsd,QACM/zB,GACJwW,OACMxW,IACT0W,EAAKgE,QACM1a,GACJwW,OACMxW,IACT4W,EAAKod,QACMh0B,GACJwW,OACMxW,IACT8W,EAAKmd,QACMj0B,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,IACT0X,EAAKwc,QACMl0B,GACHwW,OACMxW,IACV2X,EAAMoc,QACM/zB,IACV2X,EAAM,MAEJA,IAAQ3X,GACKsW,EACfG,EAjhcX,SAASjgC,EAAM29C,EAAgBC,GAEpC,OADIA,GAAWD,EAAe18C,KAAK28C,GAC5B,CACLh/C,KAAM,OACNoB,KAAMA,EACNyD,KAAMk6C,GA4gcaE,CAAS3d,EAAIE,EAAIE,GACtBR,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,IAIT,OAAOsW,EAnPUge,MACMt0B,IACTsW,EAsDhB,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKoc,QACM7yB,GACJwW,OACMxW,IACT0W,EAAKgE,QACM1a,GACJwW,OACMxW,IACT4W,EA23SV,WACE,IAAIN,GAEJA,EAv7CF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlorBQ,SAmorBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpK,KAEpCyK,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA9rqB6B,SAisqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAo5CFie,MACMv0B,IACTsW,EAn5CJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlsrBQ,YAmsrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjL,KAEpCsL,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAnuqB6B,YAsuqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAg3CAke,MACMx0B,IACTsW,EA/2CN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9trBQ,UA+trBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5K,KAEpCiL,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxwqB6B,UA2wqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA40CEme,MACMz0B,IACTsW,EA30CR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAhyrBQ,QAiyrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1L,KAEpC+L,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7yqB6B,QAgzqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAwyCIoe,MACM10B,IACTsW,EAvyCV,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA1zrBQ,SA2zrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpL,KAEpCyL,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl1qB6B,SAq1qB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAowCMqe,MACM30B,IACTsW,EAnwCZ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAl1rBQ,WAm1rBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7K,KAEpCkL,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAv3qB6B,WA03qB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAguCQse,MACM50B,IACTsW,EA/tCd,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAl3rBQ,WAm3rBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1K,KAEpC+K,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA55qB6B,WA+5qB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA4rCUue,IAQjB,OAAOve,EAl5SMwe,MACM90B,GACMsW,EACfG,EAn6bK,CACLrhC,KAAM,WACNoB,KAi6bckgC,EAh6bdjb,KAg6bkBmb,EAh6bVz/B,eAi6bRm/B,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5FYye,MACM/0B,IACTsW,EAAK2E,QACMjb,IACTsW,EAAKgM,QACMtiB,IACTsW,EAAKlB,GACAwD,OACM5Y,GACJwW,OACMxW,IACT0W,EAAKwT,QACMlqB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,GAp3bvBub,EAq3bsBnb,GAp3b7B3/B,aAAc,EAq3bCu/B,EAp3bbub,IAs4bKzc,GAAckB,EACdA,EAAKtW,IAapBsW,EAiMT,SAAS0d,KACP,IAAI1d,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAI5B,GAFAP,EAAKlB,IACLqB,EAAKue,QACMh1B,EAET,GADKwW,OACMxW,EAAY,CAiBrB,IAhBA0W,EAAK,GACLC,EAAKvB,IACLwB,EAAKJ,QACMxW,IACT6W,EAAKme,QACMh1B,EAET2W,EADAC,EAAK,CAACA,EAAIC,IAOZzB,GAAcuB,EACdA,EAAK3W,GAEA2W,IAAO3W,GACZ0W,EAAGj/B,KAAKk/B,GACRA,EAAKvB,IACLwB,EAAKJ,QACMxW,IACT6W,EAAKme,QACMh1B,EAET2W,EADAC,EAAK,CAACA,EAAIC,IAOZzB,GAAcuB,EACdA,EAAK3W,GAGL0W,IAAO1W,GACMsW,EAEfA,EADAG,EAAKrV,EAAQqV,EAAIC,KAGjBtB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS0e,KACP,IAAI1e,EAAYI,EAAgBI,EAiDhC,OA/CAR,EAAKlB,GAksMP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxwnBQ,SAywnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxE,KAEpC6E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAnuMF2e,KACMj1B,GACJwW,OACMxW,IACT0W,EAAKwT,QACMlqB,GACJwW,OACMxW,GA+tMnB,WACE,IAAIsW,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA3ynBQ,SA4ynBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvE,KAEpC4E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAhwMM4e,KACMl1B,GACJwW,OACMxW,IACT8W,EAAK4D,QACM1a,GACMsW,EAEfA,EA7ocD,CACLlhC,KAAM,OACNmI,KA0ocoBm5B,EAzocpBn/B,OAyocwBu/B,KA2B9B1B,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS2d,KACP,IAAI3d,EAAYI,EAyBhB,OAvBAJ,EAAKlB,GAutMP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA90nBQ,SA+0nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStE,KAEpC2E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxvMF6e,KACMn1B,GACJwW,OACMxW,IACT0W,EAAKgE,QACM1a,GACMsW,EAEfA,EAnrcO,CAAElhC,KAAM,OAAQmC,OAkrcTm/B,KAWlBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS2E,KACP,IAAI3E,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAzrcVv7B,EA6rctB,GAFA+6B,EAAKlB,IACLqB,EAAKmV,QACM5rB,EAAY,CA6BrB,GA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK+L,QACM3iB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8U,QACM5rB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEH0W,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK+L,QACM3iB,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8U,QACM5rB,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,QAITuW,EAAKvW,EAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxwcS,SAASiM,EAAKnnC,GACnB,MAAM65C,EAAO75C,EAAIrF,IAAI5C,GAAKA,EAAE,IAE5B,OADAsqB,GAAWqJ,IAAI,WAAWyb,MAAQ0S,EAAK,MAChC,CACLhgD,KAAM,aACNgM,MAAOshC,EACPhiC,OAAQ00C,EAAK,GACb5xC,UAAW4xC,EAAKjzC,MAAM,IAiwcvBkzC,CAAS5e,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAYP,OAVIsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKoC,QACM7Y,IACMsW,EA5wcG/6B,EA6wcJk7B,EA5wcV7Y,GAAWqJ,IAAI,iBAAiB1rB,GA4wcpCk7B,EA3wcW,CACLrhC,KAAM,aACNgM,MAAO,KACPV,OAAQnF,IA0wchB+6B,EAAKG,GAGAH,EAmFT,SAASsE,KACP,IAAItE,EAAIG,EAkCR,OAhCAH,EAAKlB,IACLqB,EAAKwG,QACMjd,GACMoV,KAn2c6D,IAAzC4W,IAAY,GAo2cjCvV,GAp2c2C9gC,eAs2clDqqB,OAEA,KAEIA,GACMsW,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKyV,QACMlsB,IACMsW,EACfG,EAAcA,GAEhBH,EAAKG,GAGAH,EAyCT,SAAS4V,KACP,IAAI5V,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAp7cW,IAq7cXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9M,KAExC,GAAImN,IAAOzW,EAAY,CASrB,GARAuW,EAAK,GACDhN,GAAStjB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5M,KAEpCkN,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACJnN,GAAStjB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS5M,UAI1C+M,EAAKvW,EAEHuW,IAAOvW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBsB,EAn9cO,IAo9cPtB,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS9M,KAEpCoN,IAAO1W,GACMsW,EACfG,EAAKhN,GAAS8M,GACdD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAtEFgf,MACMt1B,IACTsW,EAuEJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAv0eW,IAw0eXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7S,KAExC,GAAIkT,IAAOzW,EAAY,CASrB,GARAuW,EAAK,GACD5M,GAAS1jB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASxM,KAEpC8M,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACJ/M,GAAS1jB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASxM,UAI1C2M,EAAKvW,EAEHuW,IAAOvW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBsB,EAt2eO,IAu2ePtB,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCmT,IAAO1W,GACMsW,EACfG,EAAKhN,GAAS8M,GACdD,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAlIAif,MACMv1B,IACTsW,EAmIN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAzidW,IA0idXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvM,KAExC,GAAI4M,IAAOzW,EAAY,CASrB,GARAuW,EAAK,GACDzM,GAAS7jB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASrM,KAEpC2M,IAAO1W,EACT,KAAO0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACJ5M,GAAS7jB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BsB,EAAK5W,EAAMqtB,OAAO/X,IAClBA,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASrM,UAI1CwM,EAAKvW,EAEHuW,IAAOvW,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnBsB,EAxkdO,IAykdPtB,OAEAsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASvM,KAEpC6M,IAAO1W,GACMsW,EACfG,EA5kdgC,KA4kdlBF,EA5kd6Bv+B,KAAK,QA6kdhDs+B,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA9LEkf,IAIFlf,EA6LT,SAASsV,KACP,IAAItV,EAOJ,OALAA,EAAKmf,QACMz1B,IACTsW,EAAK4V,MAGA5V,EAGT,SAASyX,KACP,IAAIzX,EAOJ,OALAA,EAAK2G,QACMjd,IACTsW,EAAK4V,MAGA5V,EAGT,SAASuC,KACP,IAAIvC,EAAIG,EA4BR,OA1BAH,EAAKlB,IACLqB,EAAKgf,QACMz1B,GACMoV,KAzndwD,IAApC4W,GA0ndrBvV,EA1ndsC9gC,eA4nd7CqqB,OAEA,KAEIA,GACMsW,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAK4V,MAGA5V,EAGT,SAASmf,KACP,IAAInf,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAK4D,QACMra,EAAY,CAGrB,IAFAuW,EAAK,GACLG,EAAKgf,KACEhf,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKgf,KAEHnf,IAAOvW,GACMsW,EAEfA,EADAG,EAAKzM,GAASyM,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS2G,KACP,IAAI3G,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAK4D,QACMra,EAAY,CAGrB,IAFAuW,EAAK,GACLG,EAAKif,KACEjf,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKif,KAEHpf,IAAOvW,GACMsW,EAEfA,EADAG,EAAKzM,GAASyM,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAAS+D,KACP,IAAI/D,EAUJ,OARIrM,GAAShkB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASlM,KAGjCoM,EAGT,SAASqf,KACP,IAAIrf,EAUJ,OARInM,GAASlkB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAShM,KAGjCkM,EAGT,SAASof,KACP,IAAIpf,EAUJ,OARIjM,GAASpkB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS9L,KAGjCgM,EAGT,SAASgM,KACP,IAAIhM,EAAIG,EAAIF,EAkCZ,OAhCAD,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAjvdW,IAkvdXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7L,KAEpCkM,IAAOzW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBqB,EAz2eS,IA02eTrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvQ,MAGtC4Q,IAAOzW,IACTuW,EAAK0G,QACMjd,GACMsW,EAEfA,EADAG,EAjwdW,CAAErhC,KAAM,QAASlB,MAiwdVqiC,EAjwdoBv/B,OAiwdxBy/B,KAOhBrB,GAAckB,EACdA,EAAKtW,GAGAsW,EAgIT,SAASkW,KACP,IAAIlW,EAOJ,OALAA,EA4TF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBc,EAExCpB,EAAKlB,IACLqB,EAqwJF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAh/mBQ,UAi/mBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShF,KAEpCqF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAngnB6B,UAsgnB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAxyJFsf,MACM51B,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAwDV,WACE,IAAIN,EAAIG,EAAQC,EAAQE,EAAgBc,EAExCpB,EAAKlB,IACLqB,EAsHF,WACE,IAAIH,EAAIG,EAERH,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EA3+eW,IA4+eXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjN,KAEpCsN,IAAOzW,IACMsW,EACfG,EAh2e+B,CAAErhC,KAAM,OAAQlB,MAAO,MAo2exD,OAFAoiC,EAAKG,EArIAof,MACM71B,IACMsW,EACfG,EAnuegC,CAAEjgC,KAmuepBigC,KAEhBH,EAAKG,KACMzW,IACTsW,EAAKlB,IACLqB,EAAK0R,QACMnoB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAK8D,QACM1a,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAKL,QACMrX,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAEfA,EADAG,EAhwesB,CAAEp6B,SAgweVo6B,EAhweuBjgC,KAgwenBogC,EAhwe4Bt6B,QAgwexBo7B,EAhweqC3gC,aAAa,KAmwexEq+B,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAK0R,QACMnoB,IACTyW,EAAK,MAEHA,IAAOzW,GACJwW,OACMxW,IACT0W,EAAKgE,QACM1a,GACJwW,OACMxW,IACT4W,EAAKS,QACMrX,IACT4W,EAAK,MAEHA,IAAO5W,GACMsW,EACfG,EAxzeD,SAASljC,EAAGD,EAAG0iB,GAAO,MAAO,CAAE3Z,SAAU9I,EAAGiD,KAAMlD,EAAGgJ,QAAS0Z,EAAIjf,aAAa,GAwzezE++C,CAASrf,EAAIC,EAAIE,GACtBN,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,KAeboV,GAAckB,EACdA,EAAKtW,KAKX,OAAOsW,EA/KMyf,MACM/1B,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAK4b,QACMtzB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAEfA,EADAG,EAzreH,CACLrhC,KAAM,YACN5B,KAuresBijC,EAtretBx8B,KAsre0B28B,EArre1B76B,KAqre8B27B,KAGtBtC,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA7XF0f,MACMh2B,IACTsW,EAMJ,WACE,IAAIA,EAAIG,EAAgBG,EAAgBc,EAExCpB,EAAKlB,IACLqB,EAgEF,WACE,IAAIH,GAEJA,EAwmKF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAzlnBQ,QA0lnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7E,KAEpCkF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA5mnB6B,QA+mnB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3oKF2f,MACMj2B,IACTsW,EAAK6c,QACMnzB,IACTsW,EAAK8c,QACMpzB,IACTsW,EAwoKR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA5nnBQ,QA6nnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5E,KAEpCiF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/onB6B,QAkpnB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3qKI4f,IAKX,OAAO5f,EA9EF6f,MACMn2B,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT4W,EAAKgM,QACM5iB,GACJwW,OACMxW,GACJgZ,OACMhZ,GACJwW,OACMxW,IACT0X,EAAK4b,QACMtzB,IACT0X,EAAK,MAEHA,IAAO1X,GACMsW,EAEfA,EADAG,EAz6dH,CACLrhC,KAAM,YACN5B,KAu6dsBijC,EAt6dtBx8B,KAAM,CACJzD,KAq6dwBogC,GAn6d1B76B,KAm6d8B27B,KAGtBtC,GAAckB,EACdA,EAAKtW,KA+BrBoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvEA8f,IAGA9f,EAwFT,SAASqd,KACP,IAAIrd,EAAYI,EAAQE,EAAgBc,EA4HxC,OA1HApB,EAAKlB,GACA8F,OACMlb,GACJwW,OACMxW,GAhofA,WAiofLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASpR,KAEpC0R,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiR,QACM7nB,GACJwW,OACMxW,GACJ4Y,OACM5Y,GACJwW,OACMxW,IACT0X,EAAKmM,QACM7jB,IACT0X,EAAK,MAEHA,IAAO1X,GACHwW,OACMxW,GACJgZ,OACMhZ,GACKsW,EAEfA,EA//dT,CACLlhC,KAAM,YACNG,QA4/d4BqhC,EA3/d5B7/B,aAAa,EACbP,KA0/dgCkhC,KAWtBtC,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACA8F,OACMlb,GACJwW,OACMxW,GAhtfF,WAitfHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bu/B,EAAK5W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAASpR,KAEpC0R,IAAO1W,GACJwW,OACMxW,IACT4W,EAAKiR,QACM7nB,GACMsW,EAEfA,EAzjeC,SAASiH,GAChB,MAAO,CACLnoC,KAAM,YACNG,QAASgoC,GAqjeA8Y,CAASzf,KAWlBxB,GAAckB,EACdA,EAAKtW,KAOToV,GAAckB,EACdA,EAAKtW,IAIFsW,EAGT,SAASgd,KACP,IAAIhd,EAAYI,EAAQE,EAAQE,EA2FhC,OAzFAR,EAAKlB,GACAkhB,OACMt2B,GACJwW,OACMxW,IACT0W,EAAK0X,QACMpuB,GACMsW,EAEfA,EAxleO,CACLlhC,KAAM,SACNoe,wBAqleYkjB,KAWlBtB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACAkhB,OACMt2B,GACJwW,OACMxW,IACT0W,EAAKkC,QACM5Y,GACJwW,OACMxW,IACT4W,EAAKyX,QACMruB,GACJwW,OACMxW,IACT8W,EAAKO,QACMrX,IACT8W,EAAK,MAEHA,IAAO9W,GACJwW,OACMxW,GACJgZ,OACMhZ,GACMsW,EAEfA,EAxneP,CACL1c,YAsne0Bgd,EArne1Bt6B,QAqne8Bw6B,KAWtB1B,GAAckB,EACdA,EAAKtW,KAuBjBoV,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKqd,OAIFrd,EA+XT,SAASiM,KACP,IAAIjM,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKwG,QACMjd,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK+L,QACM3iB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmG,QACMjd,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAK+L,QACM3iB,IACT6W,EAAKL,QACMxW,IACT8W,EAAKmG,QACMjd,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EA1jfS,SAASoH,EAAI1vB,GAClB,IAAI3a,EAAOqqC,EAIX,OAHa,OAAT1vB,GACFA,EAAK5V,QAAQpE,GAAKX,EAAO,GAAGA,KAAQW,EAAE,MAEjCX,EAqjfN+iD,CAAS9f,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASkd,KACP,IAAIld,EAUJ,OARAA,EAygMF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAhkqBQ,iBAikqBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlD,KAEpCuD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAnlqB6B,iBAslqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5iMFkgB,MACMx2B,IACTsW,EAm4MJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA56qBQ,iBA66qBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShD,KAEpCqD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/7qB6B,iBAk8qB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAt6MAmgB,MACMz2B,IACTsW,EAAKuR,MAIFvR,EAmJT,SAASqc,KACP,IAAIrc,EAAIG,EA+NR,OA7NAH,EAAKlB,GAhtfQ,YAitfTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3L,KAEpCgM,IAAOzW,IAttfE,QAutfPF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1L,KAEpC+L,IAAOzW,IA5tfA,SA6tfLF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzL,KAEpC8L,IAAOzW,IAlufF,WAmufHF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxL,KAEpC6L,IAAOzW,IAxufJ,QAyufDF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvL,KAEpC4L,IAAOzW,IA9ufN,QA+ufCF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStL,KAEpC2L,IAAOzW,IApvfR,UAqvfGF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrL,KAEpC0L,IAAOzW,IA1vfV,SA2vfKF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpL,KAEpCyL,IAAOzW,IAhwfZ,WAiwfOF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnL,KAEpCwL,IAAOzW,IAtwfd,YAuwfSF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlL,KAEpCuL,IAAOzW,IA5wfhB,YA6wfWF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjL,KAEpCsL,IAAOzW,IAlxflB,iBAmxfaF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShL,KAEpCqL,IAAOzW,IAxxfpB,eAyxfeF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/K,KAEpCoL,IAAOzW,IA9xftB,iBA+xfiBF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9K,KAEpCmL,IAAOzW,IApyfxB,WAqyfmBF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7K,KAEpCkL,IAAOzW,IA1yf1B,UA2yfqBF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5K,KAEpCiL,IAAOzW,IAhzf5B,YAizfuBF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3K,KAEpCgL,IAAOzW,IAtzf9B,WAuzfyBF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1K,KAEpC+K,IAAOzW,IA5zfhC,SA6zf2BF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzK,KAEpC8K,IAAOzW,IAl0flC,aAm0f6BF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxK,KAEpC6K,IAAOzW,IAx0fpC,kBAy0f+BF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvK,KAEpC4K,IAAOzW,IA90ftC,oBA+0fiCF,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStK,KAEpC2K,IAAOzW,IAp1fxC,SAq1fmCF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrK,KAEpC0K,IAAOzW,IA11f1C,SA21fqCF,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpK,4BAyBlFyK,IAAOzW,IACMsW,EACfG,EAAcA,GAEhBH,EAAKG,EA6PP,SAASqb,KACP,IAAIxb,EAOJ,OALAA,EAooIF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp5nBQ,SAq5nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpE,KAEpCyE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAv6nB6B,SA06nB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAvqIFogB,MACM12B,IACTsW,EAwqIJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAv7nBQ,cAw7nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnE,KAEpCwE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA18nB6B,cA68nB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA3sIAqgB,IAGArgB,EAkaT,SAAS+L,KACP,IAAI/L,EAgBJ,OAdAA,EAAKgQ,QACMtmB,IACTsW,EAAKsN,QACM5jB,IACTsW,EAyHN,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EAw/BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/8iBQ,SAg9iBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjI,KAEpCsI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA1hCFsgB,MACM52B,IACMsW,EACfG,EArlhBa,CAAErhC,KAAM,OAAQlB,OAAO,KAulhBtCoiC,EAAKG,KACMzW,IACTsW,EAAKlB,IACLqB,EA0jCJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GArhjBQ,UAshjBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/H,KAEpCoI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EA5lCAugB,MACM72B,IACMsW,EACfG,EA1lhBW,CAAErhC,KAAM,OAAQlB,OAAO,IA4lhBpCoiC,EAAKG,GAGP,OAAOH,EA7IEwgB,MACM92B,IACTsW,EAAK4O,QACMllB,IACTsW,EA6RV,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKlB,IACLqB,EAAKqc,QACM9yB,IACTyW,EAAKsc,QACM/yB,IACTyW,EAAKmc,QACM5yB,IACTyW,EAAKsgB,MAIX,GAAItgB,IAAOzW,EAET,GADKwW,OACMxW,EAAY,CASrB,GARA0W,EAAKtB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBuB,EAl2jBO,IAm2jBPvB,OAEAuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCoT,IAAO3W,EAAY,CAGrB,IAFA4W,EAAK,GACLC,EAAKmgB,KACEngB,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACRA,EAAKmgB,KAEHpgB,IAAO5W,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EAj3jBG,IAk3jBHzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCsT,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,EAEH0W,IAAO1W,GACMsW,EACfG,EAAKtK,GAASsK,EAAIC,GAClBJ,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAEP,GAAIsW,IAAOtW,EAYT,GAXAsW,EAAKlB,IACLqB,EAAKqc,QACM9yB,IACTyW,EAAKsc,QACM/yB,IACTyW,EAAKmc,QACM5yB,IACTyW,EAAKsgB,MAIPtgB,IAAOzW,EAET,GADKwW,OACMxW,EAAY,CASrB,GARA0W,EAAKtB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBuB,EAlliBK,IAmliBLvB,OAEAuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAS9M,KAEpCqN,IAAO3W,EAAY,CAGrB,IAFA4W,EAAK,GACLC,EAAKogB,KACEpgB,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACRA,EAAKogB,KAEHrgB,IAAO5W,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EAjmiBC,IAkmiBDzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS9M,KAEpCuN,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,EAEH0W,IAAO1W,GACMsW,EACfG,EAAKtK,GAASsK,EAAIC,GAClBJ,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAIT,OAAOsW,EA3aM4gB,IAMN5gB,EAmFT,SAAS4O,KACP,IAAI5O,EAAIG,EAUR,OARAH,EAAKlB,IACLqB,EAq6BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp2iBQ,SAq2iBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnI,KAEpCwI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAv8BF6gB,MACMn3B,IACMsW,EACfG,EAlkhBa,CAAErhC,KAAM,OAAQlB,MAAO,OAokhBtCoiC,EAAKG,EA0CP,SAAS6P,KACP,IAAIhQ,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAa5B,GAXAP,EAAKlB,GAnmhBQ,MAomhBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlK,KAEpCuK,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,EAET,GADKwW,OACMxW,EAAY,CASrB,GARA0W,EAAKtB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBuB,EAjtjBO,IAktjBPvB,OAEAuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCoT,IAAO3W,EAAY,CAGrB,IAFA4W,EAAK,GACLC,EAAKmgB,KACEngB,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACRA,EAAKmgB,KAEHpgB,IAAO5W,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EAhujBG,IAiujBHzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS7S,KAEpCsT,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,EAEH0W,IAAO1W,GACMsW,EAEfA,EADAG,EAtphBS,CACLrhC,KAqphBUqhC,EArphBA,eAAiB,sBAC3BviC,MAophBcwiC,EApphBJ,GAAG1+B,KAAK,OAuphBtBo9B,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAEP,GAAIsW,IAAOtW,EAYT,GAXAsW,EAAKlB,GAxqhBM,MAyqhBPtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlK,KAEpCuK,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,EAET,GADKwW,OACMxW,EAAY,CASrB,GARA0W,EAAKtB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBuB,EAj8hBK,IAk8hBLvB,OAEAuB,EAAK3W,EACmB,IAApByV,IAAyBW,GAAS9M,KAEpCqN,IAAO3W,EAAY,CAGrB,IAFA4W,EAAK,GACLC,EAAKogB,KACEpgB,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACRA,EAAKogB,KAEHrgB,IAAO5W,GAC6B,KAAlCF,EAAMR,WAAW8V,KACnByB,EAh9hBC,IAi9hBDzB,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS9M,KAEpCuN,IAAO7W,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAK1W,KAGPoV,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,EAEH0W,IAAO1W,GACMsW,EAEfA,EADAG,EAtthBK,SAAS1iC,EAAGq4B,GACjB,MAAO,CACLh3B,KAAMrB,EAAI,eAAiB,SAC3BG,MAAOk4B,EAAG,GAAGp0B,KAAK,KAmthBfo/C,CAAS3gB,EAAIC,KAGlBtB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAIT,OAAOsW,EAoJT,SAAS2gB,KACP,IAAI3gB,EAaJ,OAXIjK,GAASpmB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS9J,KAEpCgK,IAAOtW,IACTsW,EAAK+gB,MAGA/gB,EAGT,SAAS0gB,KACP,IAAI1gB,EAaJ,OAXI/J,GAAStmB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS5J,KAEpC8J,IAAOtW,IACTsW,EAAK+gB,MAGA/gB,EAGT,SAAS+gB,KACP,IAAI/gB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAh3hBF0gB,EAAIC,EAAIC,EAAIC,EA8liBlC,OA5OAnhB,EAAKlB,GA/4hBQ,QAg5hBTtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAj5hBW,MAk5hBXrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3J,KAEpCgK,IAAOzW,IACMsW,EACfG,EAv5hB+B,QAy5hBjCH,EAAKG,KACMzW,IACTsW,EAAKlB,GA15hBM,QA25hBPtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EA55hBS,MA65hBTrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1J,KAEpC+J,IAAOzW,IACMsW,EACfG,EAl6hB6B,QAo6hB/BH,EAAKG,KACMzW,IACTsW,EAAKlB,GAr6hBI,SAs6hBLtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAv6hBO,OAw6hBPrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzJ,KAEpC8J,IAAOzW,IACMsW,EACfG,EA76hB2B,SA+6hB7BH,EAAKG,KACMzW,IACTsW,EAAKlB,GAh7hBE,QAi7hBHtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAl7hBK,MAm7hBLrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxJ,KAEpC6J,IAAOzW,IACMsW,EACfG,EAx7hByB,QA07hB3BH,EAAKG,KACMzW,IACTsW,EAAKlB,GA37hBA,QA47hBDtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EA77hBG,MA87hBHrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvJ,KAEpC4J,IAAOzW,IACMsW,EACfG,EAn8hBuB,OAq8hBzBH,EAAKG,KACMzW,IACTsW,EAAKlB,GAt8hBF,QAu8hBCtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAx8hBC,MAy8hBDrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStJ,KAEpC2J,IAAOzW,IACMsW,EACfG,EA98hBqB,OAg9hBvBH,EAAKG,KACMzW,IACTsW,EAAKlB,GAj9hBJ,QAk9hBGtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAn9hBD,MAo9hBCrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrJ,KAEpC0J,IAAOzW,IACMsW,EACfG,EAz9hBmB,OA29hBrBH,EAAKG,KACMzW,IACTsW,EAAKlB,GA59hBN,QA69hBKtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EA99hBH,MA+9hBGrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpJ,KAEpCyJ,IAAOzW,IACMsW,EACfG,EAp+hBiB,OAs+hBnBH,EAAKG,KACMzW,IACTsW,EAAKlB,GAv+hBR,QAw+hBOtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAz+hBL,MA0+hBKrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnJ,KAEpCwJ,IAAOzW,IACMsW,EACfG,EA/+hBe,OAi/hBjBH,EAAKG,KACMzW,IACTsW,EAAKlB,GAl/hBV,QAm/hBStV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAp/hBP,MAq/hBOrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlJ,KAEpCuJ,IAAOzW,IACTuW,EAAKmhB,QACM13B,IACT0W,EAAKghB,QACM13B,IACT2W,EAAK+gB,QACM13B,IACT4W,EAAK8gB,QACM13B,GACMsW,EAjgiBrBghB,EAkgiBoB/gB,EAlgiBhBghB,EAkgiBoB7gB,EAlgiBhB8gB,EAkgiBoB7gB,EAlgiBhB8gB,EAkgiBoB7gB,EAC1BN,EADAG,EAjgiBbkhB,OAAOC,aAAaC,SAAS,KAAOP,EAAKC,EAAKC,EAAKC,MAohiB9CriB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAxhiBT,KAyhiBSrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjJ,KAEpCsJ,IAAOzW,IACMsW,EACfG,EA9hiBW,OAgiiBbH,EAAKG,KACMzW,IACTsW,EAAKlB,GAjiiBd,OAkiiBatV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAniiBX,KAoiiBWrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShJ,KAEpCqJ,IAAOzW,IACMsW,EACfG,EAziiBS,OA2iiBXH,EAAKG,KACMzW,IACTsW,EAAKlB,GA5iiBhB,OA6iiBetV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EA9iiBb,KA+iiBarB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/I,KAEpCoJ,IAAOzW,IACMsW,EACfG,EApjiBO,OAsjiBTH,EAAKG,KACMzW,IACTsW,EAAKlB,GAvjiBlB,OAwjiBiBtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAzjiBf,KA0jiBerB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9I,KAEpCmJ,IAAOzW,IACMsW,EACfG,EA/jiBK,MAikiBPH,EAAKG,eAexBH,EAiBT,SAASsN,KACP,IAAItN,EAAIG,EA/liBc/hC,EAymiBtB,OARA4hC,EAAKlB,IACLqB,EAAKyW,QACMltB,IACMsW,EACfG,GArmiBoB/hC,EAqmiBN+hC,IApmiBY,WAAX/hC,EAAEU,KAA0BV,EAC9B,CAAEU,KAAM,SAAUlB,MAAOQ,IAqmiBxC4hC,EAAKG,EAKP,SAASyW,KACP,IAAI5W,EAAIG,EAAIF,EAAIG,EAsEhB,OApEAJ,EAAKlB,IACLqB,EAAKub,QACMhyB,IACTuW,EAAKuhB,QACM93B,IACT0W,EAAKqhB,QACM/3B,GACMsW,EAEfA,EADAG,EAjniBO,CACLrhC,KAAM,SACNlB,MA+miBYuiC,EAAIF,EAAIG,KAW1BtB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKub,QACMhyB,IACTuW,EAAKuhB,QACM93B,GACMsW,EAEfA,EADAG,EAjoiBO,SAASuhB,EAAMC,GACtB,MAAMC,EAASF,EAAOC,EACtB,OAAIE,GAASH,GAAc,CACzB5iD,KAAM,SACNlB,MAAOgkD,GAEFE,WAAWF,GA2niBbG,CAAS5hB,EAAIF,KAOpBnB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKub,QACMhyB,IACTuW,EAAKwhB,QACM/3B,GACMsW,EAEfA,EADAG,EA1oiBK,SAASuhB,EAAMM,GAEtB,MAAO,CACLljD,KAAM,SACNlB,MAHa8jD,EAAOM,GAyoiBfC,CAAS9hB,EAAIF,KAOpBnB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKub,QACMhyB,IACMsW,EACfG,EAlpiBK,SAASuhB,GAChB,OAAIG,GAASH,GAAc,CACzB5iD,KAAM,SACNlB,MAAO8jD,GAEFI,WAAWJ,GA6oiBXQ,CAAS/hB,IAEhBH,EAAKG,KAKJH,EAGT,SAAS0b,KACP,IAAI1b,EAAIG,EAAIF,EAyEZ,OAvEAD,EAAKmiB,QACMz4B,IACTsW,EAAKoiB,QACM14B,IACTsW,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAxljBO,IAyljBPrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlN,KAEpCuN,IAAOzW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBqB,EAlmjBK,IAmmjBLrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnN,MAGtCwN,IAAOzW,IACTuW,EAAKkiB,QACMz4B,GACMsW,EAEfA,EADAG,EAAcA,EAAIF,IAOpBnB,GAAckB,EACdA,EAAKtW,GAEHsW,IAAOtW,IACTsW,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAxnjBK,IAynjBLrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlN,KAEpCuN,IAAOzW,IAC6B,KAAlCF,EAAMR,WAAW8V,KACnBqB,EAlojBG,IAmojBHrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnN,MAGtCwN,IAAOzW,IACTuW,EAAKmiB,QACM14B,GACMsW,EAEfA,EADAG,EAhtiBG,SAASpb,EAAIs9B,GAAS,OAAOt9B,EAAKs9B,EAgtiBhCC,CAASniB,EAAIF,KAOpBnB,GAAckB,EACdA,EAAKtW,KAMNsW,EAGT,SAASwhB,KACP,IAAIxhB,EAAIG,EAAIF,EAyBZ,OAvBAD,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EA3nlBU,IA4nlBVrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5U,IAEpCiV,IAAOzW,IACTuW,EAAKkiB,QACMz4B,GACMsW,EAEfA,EADAG,EA/uiBmC,IA+uiBrBF,IAOhBnB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyhB,KACP,IAAIzhB,EAAIG,EAAIF,EAmBZ,OAjBAD,EAAKlB,IACLqB,EAsEF,WACE,IAAIH,EAAIG,EAAIF,EAEZD,EAAKlB,GACDvH,GAAS5nB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BqB,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStI,KAEpC2I,IAAOzW,GACL+N,GAAS9nB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BmB,EAAKzW,EAAMqtB,OAAO/X,IAClBA,OAEAmB,EAAKvW,EACmB,IAApByV,IAAyBW,GAASpI,KAEpCuI,IAAOvW,IACTuW,EAAK,MAEHA,IAAOvW,GACMsW,EAEfA,EADAG,EAAcA,GAp1iBoC,QAA7BoiB,EAo1iBHtiB,GAp1iBuCsiB,EAAM,MAu1iB/DzjB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GA51iBM,IAAY64B,EA+1iBzB,OAAOviB,EAzGFwiB,MACM94B,IACTuW,EAAKkiB,QACMz4B,GACMsW,EAEfA,EADAG,EAAcA,EAAIF,IAOpBnB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASmiB,KACP,IAAIniB,EAAIG,EAAIF,EAKZ,GAHAD,EAAKlB,GACLqB,EAAK,IACLF,EAAKmiB,QACM14B,EACT,KAAOuW,IAAOvW,GACZyW,EAAGh/B,KAAK8+B,GACRA,EAAKmiB,UAGPjiB,EAAKzW,EAQP,OANIyW,IAAOzW,IACMsW,EACfG,EAAcA,EAlyiB8Bz+B,KAAK,KAoyiBnDs+B,EAAKG,EAKP,SAASiiB,KACP,IAAIpiB,EAUJ,OARI7I,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS1I,KAGjC4I,EAGT,SAASohB,KACP,IAAIphB,EAUJ,OARI3I,GAAS1nB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASxI,KAGjC0I,EA8ET,SAAS6O,KACP,IAAI7O,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAhylBO,YAiylBRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1U,IAEpC+U,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA6ET,SAAS8Q,KACP,IAAI9Q,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAl/iBQ,OAm/iBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShI,KAEpCqI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAASwE,KACP,IAAIxE,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAxjjBQ,SAyjjBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9H,KAEpCmI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA3kjB6B,SA8kjB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAkHT,SAASoD,KACP,IAAIpD,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GApsjBQ,WAqsjBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3H,KAEpCgI,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAAS2M,KACP,IAAI3M,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA1wjBQ,cA2wjBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1H,KAEpC+H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7xjB6B,cAgyjB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASmC,KACP,IAAInC,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA7yjBQ,SA8yjBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzH,KAEpC8H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASgW,KACP,IAAIhW,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAh1jBQ,SAi1jBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxH,KAEpC6H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS0B,KACP,IAAI1B,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAj8mBO,QAk8mBRtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlV,IAEpCuV,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAx4jB6B,QA24jB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA6ET,SAASqE,KACP,IAAIrE,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA13lBQ,OA23lBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3P,KAEpCgQ,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyE,KACP,IAAIzE,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GArgkBQ,UAsgkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStH,KAEpC2H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAxhkB6B,UA2hkB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS0I,KACP,IAAI1I,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAxikBQ,WAyikBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrH,KAEpC0H,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA3jkB6B,WA8jkB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAyCT,SAAS4E,KACP,IAAI5E,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAhnkBQ,OAinkBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpH,KAEpCyH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA4LT,SAASmX,KACP,IAAInX,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAl0kBQ,SAm0kBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9G,KAEpCmH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASkX,KACP,IAAIlX,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAr2kBQ,UAs2kBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7G,KAEpCkH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASggB,KACP,IAAIhgB,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAx4kBQ,SAy4kBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5G,KAEpCiH,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwJT,SAASuM,KACP,IAAIvM,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA3jlBQ,WA4jlBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzG,KAEpC8G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyJ,KACP,IAAIzJ,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA9llBQ,UA+llBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxG,KAEpC6G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAAS+S,KACP,IAAI/S,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAlznBQ,SAmznBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7R,KAEpCkS,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAASyT,KACP,IAAIzT,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA5ulBQ,OA6ulBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrG,KAEpC0G,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAwCT,SAAS2T,KACP,IAAI3T,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAlzlBQ,WAmzlBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnG,KAEpCwG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA8LT,SAASkV,KACP,IAAIlV,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GApgmBQ,WAqgmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7F,KAEpCkG,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAvhmB6B,WA0hmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA+ET,SAASiK,KACP,IAAIjK,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA7mmBQ,SA8mmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1F,KAEpC+F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAhomB6B,SAmomB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS4R,KACP,IAAI5R,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAhpmBQ,QAipmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzF,KAEpC8F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAnqmB6B,QAsqmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS6R,KACP,IAAI7R,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAnrmBQ,aAormBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxF,KAEpC6F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAtsmB6B,aAysmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASgY,KACP,IAAIhY,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAttmBQ,YAutmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvF,KAEpC4F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAzumB6B,YA4umB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASmb,KACP,IAAInb,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAzvmBQ,OA0vmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStF,KAEpC2F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA5wmB6B,OA+wmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS+a,KACP,IAAI/a,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA5xmBQ,OA6xmBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrF,KAEpC0F,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/ymB6B,OAkzmB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASqG,KACP,IAAIrG,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/zmBQ,SAg0mBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpF,KAEpCyF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl1mB6B,SAq1mB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyN,KACP,IAAIzN,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAl2mBQ,WAm2mBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASnF,KAEpCwF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAr3mB6B,WAw3mB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASwN,KACP,IAAIxN,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA9mpBQ,QA+mpBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjS,KAEpCsS,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA15mB6B,QA65mB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASsU,KACP,IAAItU,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA16mBQ,QA26mBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlF,KAEpCuF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA77mB6B,QAg8mB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASuU,KACP,IAAIvU,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA78mBQ,OA88mBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjF,KAEpCsF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAh+mB6B,OAm+mB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAyCT,SAAS6c,KACP,IAAI7c,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAnhnBQ,QAohnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/E,KAEpCoF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAtinB6B,QAyinB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS8c,KACP,IAAI9c,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAtjnBQ,QAujnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9E,KAEpCmF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAzknB6B,QA4knB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA+ET,SAASoc,KACP,IAAIpc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/pnBQ,YAgqnBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3E,KAEpCgF,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAlrnB6B,YAqrnB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAyCT,SAASyd,KACP,IAAIzd,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GArunBQ,SAsunBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzE,KAEpC8E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAkHT,SAAS4d,KACP,IAAI5d,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAj3nBQ,QAk3nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrE,KAEpC0E,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA+ET,SAAS4Z,KACP,IAAI5Z,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA19nBQ,UA29nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASlE,KAEpCuE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7+nB6B,UAg/nB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAuOT,SAASyb,KACP,IAAIzb,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/soBQ,YAgtoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS7D,KAEpCkE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAluoB6B,YAquoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA2JT,SAASic,KACP,IAAIjc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA93oBQ,YA+3oBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzD,KAEpC8D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAj5oB6B,YAo5oB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAqHT,SAASmT,KACP,IAAInT,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA1gpBQ,WA2gpBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvD,KAEpC4D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA7hpB6B,WAgipB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAmTT,SAASyc,KACP,IAAIzc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAhzqBQ,SAizqBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzL,KAEpC8L,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA11pB6B,SA61pB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASygB,KACP,IAAIzgB,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA12pBQ,aA22pBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASrD,KAEpC0D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA73pB6B,aAg4pB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASiY,KACP,IAAIjY,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAt1rBQ,SAu1rBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpO,KAEpCyO,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl6pB6B,SAq6pB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASwc,KACP,IAAIxc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAl4qBQ,SAm4qBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzK,KAEpC8K,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAv8pB6B,SA08pB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASsc,KACP,IAAItc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAv9pBQ,cAw9pBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpD,KAEpCyD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA1+pB6B,cA6+pB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA2JT,SAASuc,KACP,IAAIvc,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAtoqBQ,aAuoqBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjD,KAEpCsD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAzpqB6B,aA4pqB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAmTT,SAASuR,KACP,IAAIvR,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/8qBQ,sBAg9qBTtV,EAAMsa,OAAOhF,GAAa,IAAIj+B,eAChCs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,IAC/BA,IAAe,KAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/C,KAEpCoD,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl+qB6B,sBAq+qB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAmTT,SAAS0Q,KACP,IAAI1Q,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA5wrBQ,WA6wrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvC,KAEpC4C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/xrB6B,WAkyrB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAAS0E,KACP,IAAI1E,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/yrBQ,UAgzrBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStC,KAEpC2C,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl0rB6B,UAq0rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASgN,KACP,IAAIhN,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAn/uBQ,QAo/uBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/T,IAEpCoU,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAv2rB6B,QA02rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA+ET,SAAS+P,KACP,IAAI/P,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/7rBQ,YAg8rBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASpC,KAEpCyC,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAl9rB6B,YAq9rB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA+ET,SAASqM,KACP,IAAIrM,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA3wvBU,IA4wvBVlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS5U,IAGjC8U,EAGT,SAASwC,KACP,IAAIxC,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAvjsBW,IAwjsBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASjC,KAGjCmC,EAGT,SAAS4U,KACP,IAAI5U,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAx0tBW,IAy0tBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASjN,KAGjCmN,EAGT,SAASsC,KACP,IAAItC,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA91uBW,IA+1uBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAShQ,KAGjCkQ,EAGT,SAAS0C,KACP,IAAI1C,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EA12uBW,IA22uBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS/P,KAGjCiQ,EAGT,SAASyiB,KACP,IAAIziB,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAr5tBW,IAs5tBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASrN,KAGjCuN,EAGT,SAAS0iB,KACP,IAAI1iB,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAz6tBW,IA06tBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASxN,KAGjC0N,EAGT,SAASuL,KACP,IAAIvL,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAzosBW,IA0osBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAShC,KAGjCkC,EAGT,SAASyL,KACP,IAAIzL,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EArpsBW,IAspsBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS/B,KAGjCiC,EAGT,SAASU,KACP,IAAIV,EAUJ,OARsC,KAAlCxW,EAAMR,WAAW8V,KACnBkB,EAjqsBW,IAkqsBXlB,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS9B,KAGjCgC,EA+BT,SAASwU,KACP,IAAIxU,EAOJ,OALAA,EA/BF,WACE,IAAIA,EAUJ,MAprsBa,OA4qsBTxW,EAAMsa,OAAOhF,GAAa,IAC5BkB,EA7qsBW,KA8qsBXlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS7B,KAGjC+B,EAoBF2iB,MACMj5B,IACTsW,EAnBJ,WACE,IAAIA,EAUJ,MAhssBa,OAwrsBTxW,EAAMsa,OAAOhF,GAAa,IAC5BkB,EAzrsBW,KA0rsBXlB,IAAe,IAEfkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAAS5B,KAGjC8B,EAQA4iB,IAGA5iB,EAGT,SAASE,KACP,IAAIF,EAAIG,EAOR,IALAH,EAAK,IACLG,EAAK0iB,QACMn5B,IACTyW,EAAK2iB,MAEA3iB,IAAOzW,GACZsW,EAAG7+B,KAAKg/B,IACRA,EAAK0iB,QACMn5B,IACTyW,EAAK2iB,MAIT,OAAO9iB,EAGT,SAASkT,KACP,IAAIlT,EAAIG,EAOR,GALAH,EAAK,IACLG,EAAK0iB,QACMn5B,IACTyW,EAAK2iB,MAEH3iB,IAAOzW,EACT,KAAOyW,IAAOzW,GACZsW,EAAG7+B,KAAKg/B,IACRA,EAAK0iB,QACMn5B,IACTyW,EAAK2iB,WAIT9iB,EAAKtW,EAGP,OAAOsW,EAGT,SAAS8iB,KACP,IAAI9iB,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GAvwsBQ,OAwwsBTtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EAzwsBW,KA0wsBXrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS3B,KAExC,GAAIgC,IAAOzW,EAAY,CAgCrB,IA/BAuW,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KAjxsBW,OAkxsBP3V,EAAMsa,OAAOhF,GAAa,IAC5BwB,EAnxsBS,KAoxsBTxB,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS1B,KAExCe,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KAjzsBS,OAkzsBL3V,EAAMsa,OAAOhF,GAAa,IAC5BwB,EAnzsBO,KAozsBPxB,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAAS1B,KAExCe,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GA90sBA,OA+0sBLF,EAAMsa,OAAOhF,GAAa,IAC5BsB,EAh1sBO,KAi1sBPtB,IAAe,IAEfsB,EAAK1W,EACmB,IAApByV,IAAyBW,GAAS1B,KAEpCgC,IAAO1W,EAETsW,EADAG,EAAK,CAACA,EAAIF,EAAIG,IAGdtB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA/GFgjB,MACMt5B,IACTsW,EAgHJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GA12sBQ,OA22sBTtV,EAAMsa,OAAOhF,GAAa,IAC5BqB,EA52sBW,KA62sBXrB,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASzB,KAExC,GAAI8B,IAAOzW,EAAY,CA0BrB,IAzBAuW,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK2iB,KACL9jB,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK2iB,KACL9jB,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA5LAkjB,MACMx5B,IACTsW,EA6LN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GACiC,KAAlCtV,EAAMR,WAAW8V,KACnBqB,EAz7sBW,IA07sBXrB,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxB,KAExC,GAAI6B,IAAOzW,EAAY,CA0BrB,IAzBAuW,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK2iB,KACL9jB,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK2iB,KACL9jB,KACImB,IAAO5W,EACT2W,OAAK,GAELvB,GAAcuB,EACdA,EAAK3W,GAEH2W,IAAO3W,IACT4W,EAAKyiB,QACMr5B,EAET0W,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,EAETsW,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAzQEmjB,IAIFnjB,EAwQT,SAAS+iB,KACP,IAAI/iB,EAUJ,OARIxW,EAAM5mB,OAASk8B,IACjBkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASvB,KAGjCyB,EA6BT,SAAS6iB,KACP,IAAI7iB,EAUJ,OARIxB,GAAS7uB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BkB,EAAKxW,EAAMqtB,OAAO/X,IAClBA,OAEAkB,EAAKtW,EACmB,IAApByV,IAAyBW,GAASrB,KAGjCuB,EAGT,SAASijB,KACP,IAAIjjB,EAAIG,EAGR,IADAH,EA6BF,WACE,IAAIA,EAAIG,EAERH,EAAKlB,GACLK,KACI3V,EAAM5mB,OAASk8B,IACjBqB,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASvB,KAExCY,KACIgB,IAAOzW,EACTsW,OAAK,GAELlB,GAAckB,EACdA,EAAKtW,GAGP,OAAOsW,EAjDFojB,MACM15B,EAST,GARAsW,EAAK,GACD/I,GAAStnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BqB,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5I,KAEpCiJ,IAAOzW,EACT,KAAOyW,IAAOzW,GACZsW,EAAG7+B,KAAKg/B,GACJlJ,GAAStnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7BqB,EAAK3W,EAAMqtB,OAAO/X,IAClBA,OAEAqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS5I,UAI1C8I,EAAKtW,EAIT,OAAOsW,EA0BT,SAASqjB,KACP,IAAIrjB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKmjB,QACM55B,EAAY,CA6BrB,IA5BAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8iB,QACM55B,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAEA0W,IAAO1W,GACZuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,IACT4W,EAAKkC,QACM9Y,IACT6W,EAAKL,QACMxW,IACT8W,EAAK8iB,QACM55B,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAK1W,GAGLuW,IAAOvW,GACMsW,EAEfA,EADAG,EAAKlW,EAAQkW,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EAGT,SAASsjB,KACP,IAAItjB,EAAIG,EAAIF,EAAIG,EAiDhB,OA/CAJ,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAK0G,QACMjd,GACMoV,IAGbsB,GAFFA,GAnstBgE,IAAhCmjB,GAmstBlBtjB,EAnstB+B5gC,gBAqstBtCqqB,OAEA,KAEIA,GACMyW,EAEfA,EADAF,EAAcA,IAGdnB,GAAcqB,EACdA,EAAKzW,KAGPoV,GAAcqB,EACdA,EAAKzW,GAEHyW,IAAOzW,IACTyW,EAAK,MAEHA,IAAOzW,IACTuW,EAAKC,QACMxW,IACT0W,EAAKqO,QACM/kB,GACMsW,EAEfA,EADAG,EA1ttBO,SAAS/hC,EAAGP,GACnB,MAAO,CACLsF,WAAY/E,EACZgF,WAAYvF,GAuttBT2lD,CAASrjB,EAAIC,KAWtBtB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASyO,KACP,IAAIzO,EAmBJ,OAjBAA,EAAKia,QACMvwB,IACTsW,EAAK2Z,QACMjwB,IACTsW,EAgBN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,EAIxC,GAFApB,EAAKlB,IACLqB,EA36EF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAv+oBQ,WAw+oBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASxD,KAEpC6D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA1/oB6B,WA6/oB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAw4EFyjB,MACM/5B,EAAY,CAIrB,GAHAuW,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMxW,EAET,IADA4W,EAAKgC,QACM5Y,EAET,IADA6W,EAAKL,QACMxW,EAAY,CASrB,GARA8W,EAAK,GACDrJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7B0G,EAAKhc,EAAMqtB,OAAO/X,IAClBA,OAEA0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS1I,KAEpCoO,IAAO9b,EACT,KAAO8b,IAAO9b,GACZ8W,EAAGr/B,KAAKqkC,GACJrO,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7B0G,EAAKhc,EAAMqtB,OAAO/X,IAClBA,OAEA0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS1I,UAI1CoJ,EAAK9W,EAEH8W,IAAO9W,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKsB,QACMhZ,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,IAW9BtC,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,OAGPoV,GAAcsB,EACdA,EAAK1W,OAGPoV,GAAcsB,EACdA,EAAK1W,EAEP,KAAO0W,IAAO1W,GAIZ,GAHAuW,EAAG9+B,KAAKi/B,GACRA,EAAKtB,IACLuB,EAAKH,QACMxW,EAET,IADA4W,EAAKgC,QACM5Y,EAET,IADA6W,EAAKL,QACMxW,EAAY,CASrB,GARA8W,EAAK,GACDrJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7B0G,EAAKhc,EAAMqtB,OAAO/X,IAClBA,OAEA0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS1I,KAEpCoO,IAAO9b,EACT,KAAO8b,IAAO9b,GACZ8W,EAAGr/B,KAAKqkC,GACJrO,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7B0G,EAAKhc,EAAMqtB,OAAO/X,IAClBA,OAEA0G,EAAK9b,EACmB,IAApByV,IAAyBW,GAAS1I,UAI1CoJ,EAAK9W,EAEH8W,IAAO9W,IACT8b,EAAKtF,QACMxW,IACT0X,EAAKsB,QACMhZ,EAET0W,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,EAAIgF,EAAIpE,IAW9BtC,GAAcsB,EACdA,EAAK1W,QAGPoV,GAAcsB,EACdA,EAAK1W,OAGPoV,GAAcsB,EACdA,EAAK1W,OAGPoV,GAAcsB,EACdA,EAAK1W,EAGLuW,IAAOvW,GACMsW,EACfG,EAAKzB,GAASyB,GACdH,EAAKG,IAELrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,EAGP,OAAOsW,EA/JE0jB,MACMh6B,IACTsW,EAgKR,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EAn5FF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA5qoBQ,YA6qoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS9D,KAEpCmE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA/roB6B,YAksoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAg3FF2jB,MACMj6B,IACTyW,EA7vFJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAxzoBQ,UAyzoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS1D,KAEpC+D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EA30oB6B,UA80oB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA0tFA4jB,MACMl6B,IACTyW,EAjxEN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/vpBQ,YAgwpBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAStD,KAEpC2D,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAlxpB6B,YAqxpB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA8uEE6jB,MACMn6B,IACTyW,EAAK8b,MAIP9b,IAAOzW,IACMsW,EACfG,EAAKzB,GAASyB,IAIhB,OAFAH,EAAKG,EAlLM2jB,MACMp6B,IACTsW,EAqLV,WACE,IAAIA,EAAIG,EAAgBG,EAAIC,EAE5BP,EAAKlB,IACLqB,EAAKsc,QACM/yB,IACTyW,EAAKsgB,QACM/2B,IACTyW,EAAKqc,QACM9yB,IACTyW,EAAKmc,MAIX,GAAInc,IAAOzW,EAET,GADKwW,OACMxW,EAET,GADK4Y,OACM5Y,EAET,GADKwW,OACMxW,EAAY,CASrB,GARA4W,EAAK,GACDnJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7ByB,EAAK/W,EAAMqtB,OAAO/X,IAClBA,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS1I,KAEpCmJ,IAAO7W,EACT,KAAO6W,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACJpJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7ByB,EAAK/W,EAAMqtB,OAAO/X,IAClBA,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS1I,UAI1CkJ,EAAK5W,EAEH4W,IAAO5W,IACT6W,EAAKL,QACMxW,GACJgZ,OACMhZ,GACMsW,EACfG,EAt9tBuB,CAAEx9B,SAs9tBXw9B,EAt9tBwBv9B,OAAQ2+C,SAs9tB5BjhB,EAt9tBuC5+B,KAAK,IAAK,IAAKjB,aAAa,GAu9tBrFu/B,EAAKG,IAUTrB,GAAckB,EACdA,EAAKtW,QAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,OAGPoV,GAAckB,EACdA,EAAKtW,EAEHsW,IAAOtW,IACTsW,EAAKlB,IACLqB,EAAKsc,QACM/yB,IACTyW,EAAKsgB,QACM/2B,IACTyW,EAAKqc,QACM9yB,IACTyW,EAAKmc,MAIPnc,IAAOzW,IACMsW,EACfG,EAAKzB,GAASyB,IAEhBH,EAAKG,GAGP,OAAOH,EAvRM+jB,MACMr6B,IACTsW,EAwRZ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAKhC,GAHAR,EAAKlB,GACLqB,EAAKrB,IACLmB,EA9sGF,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA7/nBQ,UA8/nBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAASjE,KAEpCsE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAhhoB6B,UAmhoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EA2qGFgkB,MACMt6B,EAET,IADA0W,EAAKkC,QACM5Y,EAET,IADA2W,EAAKH,QACMxW,EAAY,CASrB,GARA4W,EAAK,GACDnJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7ByB,EAAK/W,EAAMqtB,OAAO/X,IAClBA,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS1I,KAEpCmJ,IAAO7W,EACT,KAAO6W,IAAO7W,GACZ4W,EAAGn/B,KAAKo/B,GACJpJ,GAASxnB,KAAK6Z,EAAMqtB,OAAO/X,MAC7ByB,EAAK/W,EAAMqtB,OAAO/X,IAClBA,OAEAyB,EAAK7W,EACmB,IAApByV,IAAyBW,GAAS1I,UAI1CkJ,EAAK5W,EAEH4W,IAAO5W,IA1iuBJ,QA2iuBDF,EAAMsa,OAAOhF,GAAa,IAC5BwB,EA5iuBG,MA6iuBHxB,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASnB,KAEpC2B,IAAO5W,IAjxuBN,QAkxuBCF,EAAMsa,OAAOhF,GAAa,IAC5BwB,EAnxuBC,MAoxuBDxB,IAAe,IAEfwB,EAAK5W,EACmB,IAApByV,IAAyBW,GAASlB,OAIxC0B,IAAO5W,IACT6W,EAAKL,QACMxW,IACT8W,EAAKkC,QACMhZ,EAETyW,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,IAW9B1B,GAAcqB,EACdA,EAAKzW,QAGPoV,GAAcqB,EACdA,EAAKzW,OAGPoV,GAAcqB,EACdA,EAAKzW,OAGPoV,GAAcqB,EACdA,EAAKzW,EAEHyW,IAAOzW,IACTyW,EAtvGJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAhioBQ,SAiioBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAShE,KAEpCqE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAnjoB6B,SAsjoB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAmtGAikB,MACMv6B,IACTyW,EA5qGN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAtmoBQ,cAumoBTtV,EAAMsa,OAAOhF,GAAa,GAAGj+B,eAC/Bs/B,EAAK3W,EAAMsa,OAAOhF,GAAa,GAC/BA,IAAe,IAEfqB,EAAKzW,EACmB,IAApByV,IAAyBW,GAAS/D,KAEpCoE,IAAOzW,GACTuW,EAAKnB,GACLK,KACAiB,EAAK2D,KACL5E,KACIiB,IAAO1W,EACTuW,OAAK,GAELnB,GAAcmB,EACdA,EAAKvW,GAEHuW,IAAOvW,GACMsW,EAEfA,EADAG,EAznoB6B,cA4noB7BrB,GAAckB,EACdA,EAAKtW,KAGPoV,GAAckB,EACdA,EAAKtW,GAGAsW,EAyoGEkkB,IAGL/jB,IAAOzW,IACMsW,EACfG,EAAKzB,GAASyB,IAIhB,OAFAH,EAAKG,EApXUgkB,IAORnkB,EAkXT,SAAS2Z,KACP,IAAI3Z,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKlB,IACLqB,EAAKyZ,QACMlwB,GACJwW,OACMxW,GACJ+4B,OACM/4B,GACJwW,OACMxW,IACT4W,EAAK+iB,QACM35B,GACJwW,OACMxW,GACJg5B,OACMh5B,GACMsW,EAEfA,EADAG,EAAKtB,GAASsB,EAAIG,KA2B9BxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAGT,SAASia,KACP,IAAIja,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKlB,IACLqB,EAAKgT,QACMzpB,GACJwW,OACMxW,GACJ+4B,OACM/4B,GACJwW,OACMxW,IACT4W,EAAK+iB,QACM35B,GACJwW,OACMxW,GACJg5B,OACMh5B,GACMsW,EAEfA,EADAG,EAAKtB,GAASsB,EAAIG,KA2B9BxB,GAAckB,EACdA,EAAKtW,GAGAsW,EAIP,MAAM0V,GAAc,CAClB,OAAS,EACT,OAAS,EACT,KAAO,EACP,KAAO,EACP,KAAO,EACP,IAAM,EACN,KAAO,EAEP,SAAW,EACX,IAAM,EAEN,MAAQ,EACR,MAAQ,EACR,QAAU,EACV,OAAS,EACT,UAAY,EACZ,cAAgB,EAChB,cAAgB,EAChB,mBAAqB,EACrB,cAAgB,EAEhB,QAAU,EACV,MAAQ,EACR,UAAY,EACZ,MAAQ,EAER,MAAQ,EACR,KAAO,EACP,QAAU,EACV,SAAW,EAEX,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,KAAO,EAEP,OAAS,EAET,QAAU,EAEV,IAAM,EACN,OAAS,EACT,QAAU,EACV,MAAQ,EACR,IAAM,EAEN,MAAQ,EACR,MAAQ,EAER,KAAO,EAEP,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,cAAgB,EAEhB,KAAO,EACP,MAAQ,EAER,IAAM,EACN,IAAM,EACN,OAAS,EACT,OAAS,EAET,WAAa,EACb,OAAS,EAET,WAAa,EACb,QAAU,EACV,MAAQ,EACR,OAAS,EAET,QAAU,EACV,cAAgB,EAChB,KAAO,EACP,MAAQ,EACR,aAAe,EAEf,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,UAAY,EAGZ,OAAS,EACT,QAAU,EACV,OAAS,EAET,QAAU,EAEV,QAAU,EACV,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,OAAS,EAET,QAAU,EAEV,OAAS,EACT,SAAW,EACX,cAAgB,EAChB,QAAU,GAGN6N,GAAa,CACjB,MAAQ,EACR,MAAQ,EACR,MAAQ,EACR,UAAY,EACZ,SAAW,EACX,OAAS,EACT,SAAW,EACX,QAAU,EACV,MAAQ,EACR,WAAa,EACb,OAAS,EACT,QAAU,GAGZ,SAAShK,GAAgBx0B,EAAI/T,GAC3B,MAAO,CACLlS,KAAM,aACNiB,SAAUglB,EACV7kB,KAAM8Q,GAIV,SAASlR,GAAiBilB,EAAI/kB,EAAMC,GAClC,MAAO,CACLnB,KAAM,cACNiB,SAAUglB,EACV/kB,KAAMA,EACNC,MAAOA,GAIX,SAAS4hD,GAASuC,GAChB,MAAMC,EAAkB98B,EAAO+8B,OAAOC,kBAEtC,QADYh9B,EAAO68B,GACTC,GAIZ,SAASn6B,GAAWH,EAAMlS,EAAM2sC,EAAK,GACnC,MAAMvjD,EAAS,CAAC8oB,GAChB,IAAK,IAAIxtB,EAAI,EAAGA,EAAIsb,EAAKjV,OAAQrG,WACxBsb,EAAKtb,GAAGioD,GAAIn9B,iBACZxP,EAAKtb,GAAGioD,GAAIl9B,WACnBrmB,EAAOE,KAAK0W,EAAKtb,GAAGioD,IAEtB,OAAOvjD,EAGT,SAAS+oB,GAAsBD,EAAMlS,GACnC,IAAI5W,EAAS8oB,EACb,IAAK,IAAIxtB,EAAI,EAAGA,EAAIsb,EAAKjV,OAAQrG,IAC/B0E,EAASnB,GAAiB+X,EAAKtb,GAAG,GAAI0E,EAAQ4W,EAAKtb,GAAG,IAExD,OAAO0E,EAGT,SAASwjD,GAAgBl5C,GACvB,MAAMqM,EAAQ4Y,GAAWjlB,GACzB,OAAIqM,IACArM,GACG,MAGT,SAASklB,GAAqBnJ,GAC5B,MAAMo9B,EAAiB,IAAIC,IAE3B,IAAI,IAAIv6C,KAAUkd,EAAWvlB,OAAQ,CACnC,MAAMmR,EAAa9I,EAAOwB,MAFT,MAGjB,IAAKsH,EAAY,CACfwxC,EAAe/zB,IAAIvmB,GACnB,MAEE8I,GAAcA,EAAW,KAAIA,EAAW,GAAKuxC,GAAgBvxC,EAAW,KAC5EwxC,EAAe/zB,IAAIzd,EAAWxR,KARb,OAUnB,OAAOhC,MAAMoT,KAAK4xC,GAkCpB,IAAIla,GAAU,GAEd,MAAMnjB,GAAY,IAAIs9B,IAChBr9B,GAAa,IAAIq9B,IACjBn0B,GAAa,GAKrB,IAFA/G,EAAaI,OAEMH,GAAcoV,KAAgBtV,EAAM5mB,OACrD,OAAO6mB,EAMP,MAJIA,IAAeC,GAAcoV,GAActV,EAAM5mB,QACnDk9B,GAx3uBK,CAAEhhC,KAAM,QA23uBTihC,GACJb,GACAD,GAAiBzV,EAAM5mB,OAAS4mB,EAAMqtB,OAAO5X,IAAkB,KAC/DA,GAAiBzV,EAAM5mB,OACnB68B,GAAoBR,GAAgBA,GAAiB,GACrDQ,GAAoBR,GAAgBA,Q,2ZCz1zB1B,gCAAT2lB,KAAI,YAAAnlD,EAAJmlD,QAAqBA,OAC9BA,KAAKC,cAAgB,CACnB1+B,WACA2+B,UAICC,GAA4B,gCAAXroC,OAAM,YAAAjd,EAANid,UAAuBA,SAAQA,OAAOqoC,OAASroC,QAE/C,qBAAXqoC,EAAM,YAAAtlD,EAANslD,KAAuBA,GAAUA,EAAOroC,SACjDqoC,EAAOroC,OAAOmoC,cAAgB,CAC5B1+B,WACA2+B,U,gCCrBJ,IAAIlS,EAGJA,EAAI,WACH,OAAOp2C,KADJ,GAIJ,IAECo2C,EAAIA,GAAK,IAAIoS,SAAS,cAAb,GACR,MAAOh0C,GAEc,iBAAX0L,SAAqBk2B,EAAIl2B,QAOrCvgB,EAAOD,QAAU02C,G,iBCnBjB,gCACI,aAEA,IAAIqS,EAAO,IAEPC,EAAU,iBACVC,EAAcC,EAAaF,GAG3BG,EAAyC,mBAAX99B,OAElC,SAAS+9B,EAAQxiB,EAAGyiB,EAAOC,EAAUC,GACjC,YAAiB,IAAN3iB,EAA0BwiB,EAAQ,QACxB,IAAVC,IAAyC,KAAVA,GAAiBC,GAA2BE,EAAU5iB,EAAGyiB,EAAOC,EAAUC,GAC7GE,EAAW7iB,GAGtB,SAAS8iB,EAAWhoD,EAAO2kD,GACvB/lD,KAAKoB,MAAQA,EACbpB,KAAK+lD,KAAOA,EACZ/lD,KAAKqpD,SAAU,EAInB,SAASC,EAAaloD,GAClBpB,KAAKoB,MAAQA,EACbpB,KAAK+lD,KAAO3kD,EAAQ,EACpBpB,KAAKqpD,SAAU,EAInB,SAASE,EAAanoD,GAClBpB,KAAKoB,MAAQA,EAIjB,SAASooD,EAAU5nD,GACf,OAAQ8mD,EAAU9mD,GAAKA,EAAI8mD,EAG/B,SAASE,EAAahnD,GAClB,OAAIA,EAAI,IACG,CAACA,GACRA,EAAI,KACG,CAACA,EAAI,IAAK6nD,KAAKC,MAAM9nD,EAAI,MAC7B,CAACA,EAAI,IAAK6nD,KAAKC,MAAM9nD,EAAI,KAAO,IAAK6nD,KAAKC,MAAM9nD,EAAI,OAG/D,SAAS+nD,EAAaC,GAClB9sC,EAAK8sC,GACL,IAAIxjD,EAASwjD,EAAIxjD,OACjB,GAAIA,EAAS,GAAKyjD,EAAWD,EAAKjB,GAAe,EAC7C,OAAQviD,GACJ,KAAK,EAAG,OAAO,EACf,KAAK,EAAG,OAAOwjD,EAAI,GACnB,KAAK,EAAG,OAAOA,EAAI,GAAKA,EAAI,GAAKnB,EACjC,QAAS,OAAOmB,EAAI,IAAMA,EAAI,GAAKA,EAAI,GAAKnB,GAAQA,EAG5D,OAAOmB,EAGX,SAAS9sC,EAAKwpB,GAEV,IADA,IAAIvmC,EAAIumC,EAAElgC,OACQ,IAAXkgC,IAAIvmC,KACXumC,EAAElgC,OAASrG,EAAI,EAGnB,SAAS+pD,EAAY1jD,GAGjB,IAFA,IAAI2jD,EAAI,IAAI7mD,MAAMkD,GACdrG,GAAK,IACAA,EAAIqG,GACT2jD,EAAEhqD,GAAK,EAEX,OAAOgqD,EAGX,SAASrxC,EAAS9W,GACd,OAAIA,EAAI,EAAU6nD,KAAKC,MAAM9nD,GACtB6nD,KAAKO,KAAKpoD,GAGrB,SAASuyB,EAAIr0B,EAAGmqD,GACZ,IAKIC,EAAKnqD,EALLoqD,EAAMrqD,EAAEsG,OACRgkD,EAAMH,EAAE7jD,OACRnF,EAAI,IAAIiC,MAAMinD,GACdE,EAAQ,EACRC,EAAO7B,EAEX,IAAK1oD,EAAI,EAAGA,EAAIqqD,EAAKrqD,IAEjBsqD,GADAH,EAAMpqD,EAAEC,GAAKkqD,EAAElqD,GAAKsqD,IACLC,EAAO,EAAI,EAC1BrpD,EAAElB,GAAKmqD,EAAMG,EAAQC,EAEzB,KAAOvqD,EAAIoqD,GAEPE,GADAH,EAAMpqD,EAAEC,GAAKsqD,KACGC,EAAO,EAAI,EAC3BrpD,EAAElB,KAAOmqD,EAAMG,EAAQC,EAG3B,OADID,EAAQ,GAAGppD,EAAE0D,KAAK0lD,GACfppD,EAGX,SAASspD,EAAOzqD,EAAGmqD,GACf,OAAInqD,EAAEsG,QAAU6jD,EAAE7jD,OAAe+tB,EAAIr0B,EAAGmqD,GACjC91B,EAAI81B,EAAGnqD,GAGlB,SAAS0qD,EAAS1qD,EAAGuqD,GACjB,IAGIH,EAAKnqD,EAHLK,EAAIN,EAAEsG,OACNnF,EAAI,IAAIiC,MAAM9C,GACdkqD,EAAO7B,EAEX,IAAK1oD,EAAI,EAAGA,EAAIK,EAAGL,IACfmqD,EAAMpqD,EAAEC,GAAKuqD,EAAOD,EACpBA,EAAQZ,KAAKC,MAAMQ,EAAMI,GACzBrpD,EAAElB,GAAKmqD,EAAMG,EAAQC,EACrBD,GAAS,EAEb,KAAOA,EAAQ,GACXppD,EAAElB,KAAOsqD,EAAQC,EACjBD,EAAQZ,KAAKC,MAAMW,EAAQC,GAE/B,OAAOrpD,EAoCX,SAASwpD,EAAS3qD,EAAGmqD,GACjB,IAKIlqD,EAAG2qD,EALHC,EAAM7qD,EAAEsG,OACRwkD,EAAMX,EAAE7jD,OACRnF,EAAI,IAAIiC,MAAMynD,GACdE,EAAS,EAGb,IAAK9qD,EAAI,EAAGA,EAAI6qD,EAAK7qD,KACjB2qD,EAAa5qD,EAAEC,GAAK8qD,EAASZ,EAAElqD,IACd,GACb2qD,GALGjC,IAMHoC,EAAS,GACNA,EAAS,EAChB5pD,EAAElB,GAAK2qD,EAEX,IAAK3qD,EAAI6qD,EAAK7qD,EAAI4qD,EAAK5qD,IAAK,CAExB,MADA2qD,EAAa5qD,EAAEC,GAAK8qD,GACH,GACZ,CACD5pD,EAAElB,KAAO2qD,EACT,MAHgBA,GAZbjC,IAiBPxnD,EAAElB,GAAK2qD,EAEX,KAAO3qD,EAAI4qD,EAAK5qD,IACZkB,EAAElB,GAAKD,EAAEC,GAGb,OADA+c,EAAK7b,GACEA,EAmBX,SAAS6pD,EAAchrD,EAAGmqD,EAAGlE,GACzB,IAIIhmD,EAAG2qD,EAJHtqD,EAAIN,EAAEsG,OACNnF,EAAI,IAAIiC,MAAM9C,GACdiqD,GAASJ,EAGb,IAAKlqD,EAAI,EAAGA,EAAIK,EAAGL,IACf2qD,EAAa5qD,EAAEC,GAAKsqD,EACpBA,EAAQZ,KAAKC,MAAMgB,EAJZjC,KAKPiC,GALOjC,IAMPxnD,EAAElB,GAAK2qD,EAAa,EAAIA,EANjBjC,IAMqCiC,EAGhD,MAAiB,iBADjBzpD,EAAI0oD,EAAa1oD,KAET8kD,IAAM9kD,GAAKA,GACR,IAAIqoD,EAAaroD,IACnB,IAAImoD,EAAWnoD,EAAG8kD,GA0D/B,SAASgF,EAAajrD,EAAGmqD,GACrB,IAKIe,EAASX,EAAOtqD,EAAGkrD,EALnBN,EAAM7qD,EAAEsG,OACRwkD,EAAMX,EAAE7jD,OAERnF,EAAI6oD,EADAa,EAAMC,GAId,IAAK7qD,EAAI,EAAGA,EAAI4qD,IAAO5qD,EAAG,CACtBkrD,EAAMnrD,EAAEC,GACR,IAAK,IAAI2sB,EAAI,EAAGA,EAAIk+B,IAAOl+B,EAEvBs+B,EAAUC,EADJhB,EAAEv9B,GACczrB,EAAElB,EAAI2sB,GAC5B29B,EAAQZ,KAAKC,MAAMsB,EAPhBvC,KAQHxnD,EAAElB,EAAI2sB,GAAKs+B,EARRvC,IAQkB4B,EACrBppD,EAAElB,EAAI2sB,EAAI,IAAM29B,EAIxB,OADAvtC,EAAK7b,GACEA,EAGX,SAASiqD,EAAcprD,EAAGmqD,GACtB,IAIIe,EAASjrD,EAJTK,EAAIN,EAAEsG,OACNnF,EAAI,IAAIiC,MAAM9C,GACdkqD,EAAO7B,EACP4B,EAAQ,EAEZ,IAAKtqD,EAAI,EAAGA,EAAIK,EAAGL,IACfirD,EAAUlrD,EAAEC,GAAKkqD,EAAII,EACrBA,EAAQZ,KAAKC,MAAMsB,EAAUV,GAC7BrpD,EAAElB,GAAKirD,EAAUX,EAAQC,EAE7B,KAAOD,EAAQ,GACXppD,EAAElB,KAAOsqD,EAAQC,EACjBD,EAAQZ,KAAKC,MAAMW,EAAQC,GAE/B,OAAOrpD,EAGX,SAASkqD,EAAUpB,EAAGnoD,GAElB,IADA,IAAIX,EAAI,GACDW,KAAM,GAAGX,EAAE0D,KAAK,GACvB,OAAO1D,EAAE2B,OAAOmnD,GAmDpB,SAASqB,EAAsBtrD,EAAGmqD,EAAGlE,GACjC,OACW,IAAIqD,EADXtpD,EAAI2oD,EACkByC,EAAcjB,EAAGnqD,GAErBirD,EAAad,EAAGrB,EAAa9oD,IAFJimD,GA0BnD,SAASsF,EAAOvrD,GAEZ,IAGIkrD,EAASX,EAAOtqD,EAAGkrD,EAHnB7qD,EAAIN,EAAEsG,OACNnF,EAAI6oD,EAAY1pD,EAAIA,GAGxB,IAAKL,EAAI,EAAGA,EAAIK,EAAGL,IAAK,CAEpBsqD,EAAQ,GADRY,EAAMnrD,EAAEC,IACUkrD,EAClB,IAAK,IAAIv+B,EAAI3sB,EAAG2sB,EAAItsB,EAAGssB,IAEnBs+B,EAAeC,EADTnrD,EAAE4sB,GACE,EAAkBzrB,EAAElB,EAAI2sB,GAAK29B,EACvCA,EAAQZ,KAAKC,MAAMsB,EARhBvC,KASHxnD,EAAElB,EAAI2sB,GAAKs+B,EATRvC,IASkB4B,EAEzBppD,EAAElB,EAAIK,GAAKiqD,EAGf,OADAvtC,EAAK7b,GACEA,EA6GX,SAASqqD,EAAYlqD,EAAOmqD,GACxB,IAGIxrD,EAAGs2C,EAAGmV,EAAWC,EAHjBrlD,EAAShF,EAAMgF,OACfslD,EAAW5B,EAAY1jD,GAI3B,IADAolD,EAAY,EACPzrD,EAAIqG,EAAS,EAAGrG,GAAK,IAAKA,EAG3ByrD,GAFAC,EAJOhD,IAIG+C,EAAmBpqD,EAAMrB,KACnCs2C,EAAI39B,EAAS+yC,EAAUF,IACGA,EAC1BG,EAAS3rD,GAAS,EAAJs2C,EAElB,MAAO,CAACqV,EAAsB,EAAZF,GAGtB,SAASG,EAAUvD,EAAM9hB,GACrB,IAAIllC,EAAOQ,EAAIunD,EAAW7iB,GAC1B,GAAIuiB,EACA,MAAO,CAAC,IAAIU,EAAanB,EAAKhnD,MAAQQ,EAAER,OAAQ,IAAImoD,EAAanB,EAAKhnD,MAAQQ,EAAER,QAEpF,IACIsqD,EADA5rD,EAAIsoD,EAAKhnD,MAAO6oD,EAAIroD,EAAER,MAE1B,GAAU,IAAN6oD,EAAS,MAAM,IAAI5mD,MAAM,yBAC7B,GAAI+kD,EAAKiB,QACL,OAAIznD,EAAEynD,QACK,CAAC,IAAIC,EAAa5wC,EAAS5Y,EAAImqD,IAAK,IAAIX,EAAaxpD,EAAImqD,IAE7D,CAACnB,EAAQ,GAAIV,GAExB,GAAIxmD,EAAEynD,QAAS,CACX,GAAU,IAANY,EAAS,MAAO,CAAC7B,EAAMU,EAAQ,IACnC,IAAU,GAANmB,EAAS,MAAO,CAAC7B,EAAKwD,SAAU9C,EAAQ,IAC5C,IAAI+C,EAAMpC,KAAKoC,IAAI5B,GACnB,GAAI4B,EAAMpD,EAAM,CAEZiD,EAAW/B,GADXvoD,EAAQkqD,EAAYxrD,EAAG+rD,IACO,IAC9B,IAAIL,EAAYpqD,EAAM,GAEtB,OADIgnD,EAAKrC,OAAMyF,GAAaA,GACJ,iBAAbE,GACHtD,EAAKrC,OAASnkD,EAAEmkD,OAAM2F,GAAYA,GAC/B,CAAC,IAAIpC,EAAaoC,GAAW,IAAIpC,EAAakC,KAElD,CAAC,IAAIpC,EAAWsC,EAAUtD,EAAKrC,OAASnkD,EAAEmkD,MAAO,IAAIuD,EAAakC,IAE7EvB,EAAIrB,EAAaiD,GAErB,IAAIC,EAAajC,EAAW/pD,EAAGmqD,GAC/B,IAAoB,IAAhB6B,EAAmB,MAAO,CAAChD,EAAQ,GAAIV,GAC3C,GAAmB,IAAf0D,EAAkB,MAAO,CAAChD,EAAQV,EAAKrC,OAASnkD,EAAEmkD,KAAO,GAAK,GAAI+C,EAAQ,IAO9E4C,GAHItqD,EADAtB,EAAEsG,OAAS6jD,EAAE7jD,QAAU,IA/I/B,SAAiBtG,EAAGmqD,GAChB,IASI8B,EAAe5tC,EAAOksC,EAAOQ,EAAQ9qD,EAAGK,EAAGi2C,EAT3CsU,EAAM7qD,EAAEsG,OACRwkD,EAAMX,EAAE7jD,OACRkkD,EAAO7B,EACPhkD,EAASqlD,EAAYG,EAAE7jD,QACvB4lD,EAA8B/B,EAAEW,EAAM,GAEtCW,EAAS9B,KAAKO,KAAKM,GAAQ,EAAI0B,IAC/BR,EAAYN,EAAcprD,EAAGyrD,GAC7BE,EAAUP,EAAcjB,EAAGsB,GAK/B,IAHIC,EAAUplD,QAAUukD,GAAKa,EAAU7mD,KAAK,GAC5C8mD,EAAQ9mD,KAAK,GACbqnD,EAA8BP,EAAQb,EAAM,GACvCzsC,EAAQwsC,EAAMC,EAAKzsC,GAAS,EAAGA,IAAS,CASzC,IARA4tC,EAAgBzB,EAAO,EACnBkB,EAAUrtC,EAAQysC,KAASoB,IAC3BD,EAAgBtC,KAAKC,OAAO8B,EAAUrtC,EAAQysC,GAAON,EAAOkB,EAAUrtC,EAAQysC,EAAM,IAAMoB,IAG9F3B,EAAQ,EACRQ,EAAS,EACTzqD,EAAIqrD,EAAQrlD,OACPrG,EAAI,EAAGA,EAAIK,EAAGL,IACfsqD,GAAS0B,EAAgBN,EAAQ1rD,GACjCs2C,EAAIoT,KAAKC,MAAMW,EAAQC,GACvBO,GAAUW,EAAUrtC,EAAQpe,IAAMsqD,EAAQhU,EAAIiU,GAC9CD,EAAQhU,EACJwU,EAAS,GACTW,EAAUrtC,EAAQpe,GAAK8qD,EAASP,EAChCO,GAAU,IAEVW,EAAUrtC,EAAQpe,GAAK8qD,EACvBA,EAAS,GAGjB,KAAkB,IAAXA,GAAc,CAGjB,IAFAkB,GAAiB,EACjB1B,EAAQ,EACHtqD,EAAI,EAAGA,EAAIK,EAAGL,KACfsqD,GAASmB,EAAUrtC,EAAQpe,GAAKuqD,EAAOmB,EAAQ1rD,IACnC,GACRyrD,EAAUrtC,EAAQpe,GAAKsqD,EAAQC,EAC/BD,EAAQ,IAERmB,EAAUrtC,EAAQpe,GAAKsqD,EACvBA,EAAQ,GAGhBQ,GAAUR,EAEd5lD,EAAO0Z,GAAS4tC,EAIpB,OADAP,EAAYF,EAAYE,EAAWD,GAAQ,GACpC,CAAC5B,EAAallD,GAASklD,EAAa6B,IAyF/BS,CAAQnsD,EAAGmqD,GAtF3B,SAAiBnqD,EAAGmqD,GAQhB,IANA,IAKIiC,EAAOC,EAAMC,EAAOC,EAAOr6C,EAL3B24C,EAAM7qD,EAAEsG,OACRwkD,EAAMX,EAAE7jD,OACR3B,EAAS,GACT6nD,EAAO,GAGJ3B,GAGH,GAFA2B,EAAKv4B,QAAQj0B,IAAI6qD,IACjB7tC,EAAKwvC,GACDzC,EAAWyC,EAAMrC,GAAK,EACtBxlD,EAAOE,KAAK,OADhB,CAKAynD,EAVO3D,IAUC6D,GADRH,EAAOG,EAAKlmD,QACQ,GAAYkmD,EAAKH,EAAO,GAC5CE,EAXO5D,IAWCwB,EAAEW,EAAM,GAAYX,EAAEW,EAAM,GAChCuB,EAAOvB,IACPwB,EAbG3D,KAaM2D,EAAQ,IAErBF,EAAQzC,KAAKO,KAAKoC,EAAQC,GAC1B,EAAG,CAEC,GAAIxC,EADJ73C,EAAQk5C,EAAcjB,EAAGiC,GACHI,IAAS,EAAG,MAClCJ,UACKA,GACTznD,EAAOE,KAAKunD,GACZI,EAAO7B,EAAS6B,EAAMt6C,GAG1B,OADAvN,EAAO8nD,UACA,CAAC5C,EAAallD,GAASklD,EAAa2C,IAwD9BE,CAAQ1sD,EAAGmqD,IAEP,GACjB,IAAIwC,EAAQrE,EAAKrC,OAASnkD,EAAEmkD,KACxB2G,EAAMtrD,EAAM,GACZurD,EAAQvE,EAAKrC,KASjB,MARwB,iBAAb2F,GACHe,IAAOf,GAAYA,GACvBA,EAAW,IAAIpC,EAAaoC,IACzBA,EAAW,IAAItC,EAAWsC,EAAUe,GACxB,iBAARC,GACHC,IAAOD,GAAOA,GAClBA,EAAM,IAAIpD,EAAaoD,IACpBA,EAAM,IAAItD,EAAWsD,EAAKC,GAC1B,CAACjB,EAAUgB,GAwGtB,SAAS7C,EAAW/pD,EAAGmqD,GACnB,GAAInqD,EAAEsG,SAAW6jD,EAAE7jD,OACf,OAAOtG,EAAEsG,OAAS6jD,EAAE7jD,OAAS,GAAK,EAEtC,IAAK,IAAIrG,EAAID,EAAEsG,OAAS,EAAGrG,GAAK,EAAGA,IAC/B,GAAID,EAAEC,KAAOkqD,EAAElqD,GAAI,OAAOD,EAAEC,GAAKkqD,EAAElqD,GAAK,GAAK,EAEjD,OAAO,EAoLX,SAAS6sD,EAAatmB,GAClB,IAAI1kC,EAAI0kC,EAAEulB,MACV,OAAIjqD,EAAEirD,cACFjrD,EAAEkrD,OAAO,IAAMlrD,EAAEkrD,OAAO,IAAMlrD,EAAEkrD,OAAO,OACvClrD,EAAEmrD,UAAYnrD,EAAEorD,cAAc,IAAMprD,EAAEorD,cAAc,QACpDprD,EAAEqrD,OAAO,UAAb,IAIJ,SAASC,EAAgBtrD,EAAG9B,GAKxB,IAJA,IAGIW,EAAMV,EAAGgqD,EAHToD,EAAQvrD,EAAEwrD,OACVnD,EAAIkD,EACJlsD,EAAI,EAEDgpD,EAAE8C,UAAU9C,EAAIA,EAAEoD,OAAO,GAAIpsD,IACpCqsD,EAAM,IAAKvtD,EAAI,EAAGA,EAAID,EAAEsG,OAAQrG,IAC5B,IAAI6B,EAAEqrD,OAAOntD,EAAEC,OACfgqD,EAAIwD,EAAOztD,EAAEC,IAAIytD,OAAOvD,EAAGroD,IACrBirD,WAAY9C,EAAE+C,OAAOK,GAA3B,CACA,IAAK1sD,EAAIQ,EAAI,EAAQ,GAALR,EAAQA,IAAK,CAEzB,IADAspD,EAAIA,EAAEsB,SAASqB,IAAI9qD,IACbirD,SAAU,OAAO,EACvB,GAAI9C,EAAE+C,OAAOK,GAAQ,SAASG,EAElC,OAAO,EAEX,OAAO,EA13BXlE,EAAWrnD,UAAYlB,OAAOY,OAAOqnD,EAAQ/mD,WAO7CunD,EAAavnD,UAAYlB,OAAOY,OAAOqnD,EAAQ/mD,WAK/CwnD,EAAaxnD,UAAYlB,OAAOY,OAAOqnD,EAAQ/mD,WA4F/CqnD,EAAWrnD,UAAUoyB,IAAM,SAAUmS,GACjC,IAAI1kC,EAAIunD,EAAW7iB,GACnB,GAAItmC,KAAK+lD,OAASnkD,EAAEmkD,KAChB,OAAO/lD,KAAKyqD,SAAS7oD,EAAEgqD,UAE3B,IAAI9rD,EAAIE,KAAKoB,MAAO6oD,EAAIroD,EAAER,MAC1B,OAAIQ,EAAEynD,QACK,IAAID,EAAWoB,EAAS1qD,EAAG2pD,KAAKoC,IAAI5B,IAAKjqD,KAAK+lD,MAElD,IAAIqD,EAAWmB,EAAOzqD,EAAGmqD,GAAIjqD,KAAK+lD,OAE7CqD,EAAWrnD,UAAU0rD,KAAOrE,EAAWrnD,UAAUoyB,IAEjDm1B,EAAavnD,UAAUoyB,IAAM,SAAUmS,GACnC,IAAI1kC,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACb,GAAItB,EAAI,IAAM8B,EAAEmkD,KACZ,OAAO/lD,KAAKyqD,SAAS7oD,EAAEgqD,UAE3B,IAAI3B,EAAIroD,EAAER,MACV,GAAIQ,EAAEynD,QAAS,CACX,GAAIG,EAAU1pD,EAAImqD,GAAI,OAAO,IAAIX,EAAaxpD,EAAImqD,GAClDA,EAAIrB,EAAaa,KAAKoC,IAAI5B,IAE9B,OAAO,IAAIb,EAAWoB,EAASP,EAAGR,KAAKoC,IAAI/rD,IAAKA,EAAI,IAExDwpD,EAAavnD,UAAU0rD,KAAOnE,EAAavnD,UAAUoyB,IAErDo1B,EAAaxnD,UAAUoyB,IAAM,SAAUmS,GACnC,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQ+nD,EAAW7iB,GAAGllC,QAEvDmoD,EAAaxnD,UAAU0rD,KAAOlE,EAAaxnD,UAAUoyB,IAoErDi1B,EAAWrnD,UAAU0oD,SAAW,SAAUnkB,GACtC,IAAI1kC,EAAIunD,EAAW7iB,GACnB,GAAItmC,KAAK+lD,OAASnkD,EAAEmkD,KAChB,OAAO/lD,KAAKm0B,IAAIvyB,EAAEgqD,UAEtB,IAAI9rD,EAAIE,KAAKoB,MAAO6oD,EAAIroD,EAAER,MAC1B,OAAIQ,EAAEynD,QACKyB,EAAchrD,EAAG2pD,KAAKoC,IAAI5B,GAAIjqD,KAAK+lD,MA1ClD,SAAqBjmD,EAAGmqD,EAAGlE,GACvB,IAAI3kD,EAQJ,OAPIyoD,EAAW/pD,EAAGmqD,IAAM,EACpB7oD,EAAQqpD,EAAS3qD,EAAGmqD,IAEpB7oD,EAAQqpD,EAASR,EAAGnqD,GACpBimD,GAAQA,GAGS,iBADrB3kD,EAAQuoD,EAAavoD,KAEb2kD,IAAM3kD,GAASA,GACZ,IAAIkoD,EAAaloD,IAErB,IAAIgoD,EAAWhoD,EAAO2kD,GA8BtB2H,CAAY5tD,EAAGmqD,EAAGjqD,KAAK+lD,OAElCqD,EAAWrnD,UAAU4rD,MAAQvE,EAAWrnD,UAAU0oD,SAElDnB,EAAavnD,UAAU0oD,SAAW,SAAUnkB,GACxC,IAAI1kC,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACb,GAAItB,EAAI,IAAM8B,EAAEmkD,KACZ,OAAO/lD,KAAKm0B,IAAIvyB,EAAEgqD,UAEtB,IAAI3B,EAAIroD,EAAER,MACV,OAAIQ,EAAEynD,QACK,IAAIC,EAAaxpD,EAAImqD,GAEzBa,EAAcb,EAAGR,KAAKoC,IAAI/rD,GAAIA,GAAK,IAE9CwpD,EAAavnD,UAAU4rD,MAAQrE,EAAavnD,UAAU0oD,SAEtDlB,EAAaxnD,UAAU0oD,SAAW,SAAUnkB,GACxC,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQ+nD,EAAW7iB,GAAGllC,QAEvDmoD,EAAaxnD,UAAU4rD,MAAQpE,EAAaxnD,UAAU0oD,SAEtDrB,EAAWrnD,UAAU6pD,OAAS,WAC1B,OAAO,IAAIxC,EAAWppD,KAAKoB,OAAQpB,KAAK+lD,OAE5CuD,EAAavnD,UAAU6pD,OAAS,WAC5B,IAAI7F,EAAO/lD,KAAK+lD,KACZ6H,EAAQ,IAAItE,GAActpD,KAAKoB,OAEnC,OADAwsD,EAAM7H,MAAQA,EACP6H,GAEXrE,EAAaxnD,UAAU6pD,OAAS,WAC5B,OAAO,IAAIrC,GAAcvpD,KAAKoB,QAGlCgoD,EAAWrnD,UAAU8pD,IAAM,WACvB,OAAO,IAAIzC,EAAWppD,KAAKoB,OAAO,IAEtCkoD,EAAavnD,UAAU8pD,IAAM,WACzB,OAAO,IAAIvC,EAAaG,KAAKoC,IAAI7rD,KAAKoB,SAE1CmoD,EAAaxnD,UAAU8pD,IAAM,WACzB,OAAO,IAAItC,EAAavpD,KAAKoB,OAAS,EAAIpB,KAAKoB,OAASpB,KAAKoB,QA2EjEgoD,EAAWrnD,UAAU8rD,SAAW,SAAUvnB,GACtC,IAGIulB,EARciC,EAAIC,EAKlBnsD,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MAAO6oD,EAAIroD,EAAER,MACtB2kD,EAAO/lD,KAAK+lD,OAASnkD,EAAEmkD,KAE3B,GAAInkD,EAAEynD,QAAS,CACX,GAAU,IAANY,EAAS,OAAOnB,EAAQ,GAC5B,GAAU,IAANmB,EAAS,OAAOjqD,KACpB,IAAW,IAAPiqD,EAAU,OAAOjqD,KAAK4rD,SAE1B,IADAC,EAAMpC,KAAKoC,IAAI5B,IACLxB,EACN,OAAO,IAAIW,EAAW8B,EAAcprD,EAAG+rD,GAAM9F,GAEjDkE,EAAIrB,EAAaiD,GAErB,OAnBkBiC,EAmBDhuD,EAAEsG,OAnBG2nD,EAmBK9D,EAAE7jD,OAClB,IAAIgjD,GAnBP,KAAQ0E,EAAK,KAAQC,EAAK,MAAWD,EAAKC,EAAK,EAvB3D,SAASC,EAAkBjE,EAAGkE,GAC1B,IAAIrsD,EAAI6nD,KAAKyE,IAAInE,EAAE3jD,OAAQ6nD,EAAE7nD,QAE7B,GAAIxE,GAAK,GAAI,OAAOmpD,EAAahB,EAAGkE,GACpCrsD,EAAI6nD,KAAKO,KAAKpoD,EAAI,GAElB,IAAIqoD,EAAIF,EAAE16C,MAAMzN,GACZ9B,EAAIiqD,EAAE16C,MAAM,EAAGzN,GACfnB,EAAIwtD,EAAE5+C,MAAMzN,GACZpB,EAAIytD,EAAE5+C,MAAM,EAAGzN,GAEfusD,EAAKH,EAAkBluD,EAAGU,GAC1B4tD,EAAKJ,EAAkB/D,EAAGxpD,GAC1B4tD,EAAOL,EAAkBzD,EAAOzqD,EAAGmqD,GAAIM,EAAO/pD,EAAGC,IAEjDuqD,EAAUT,EAAOA,EAAO4D,EAAIhD,EAAUV,EAASA,EAAS4D,EAAMF,GAAKC,GAAKxsD,IAAKupD,EAAUiD,EAAI,EAAIxsD,IAEnG,OADAkb,EAAKkuC,GACEA,EAyBmBgD,CAAkBluD,EAAGmqD,GACzBc,EAAajrD,EAAGmqD,GADalE,IAIvDqD,EAAWrnD,UAAUusD,MAAQlF,EAAWrnD,UAAU8rD,SAQlDvE,EAAavnD,UAAUwsD,iBAAmB,SAAUzuD,GAChD,OAAI0pD,EAAU1pD,EAAEsB,MAAQpB,KAAKoB,OAClB,IAAIkoD,EAAaxpD,EAAEsB,MAAQpB,KAAKoB,OAEpCgqD,EAAsB3B,KAAKoC,IAAI/rD,EAAEsB,OAAQwnD,EAAaa,KAAKoC,IAAI7rD,KAAKoB,QAASpB,KAAK+lD,OAASjmD,EAAEimD,OAExGqD,EAAWrnD,UAAUwsD,iBAAmB,SAAUzuD,GAC9C,OAAgB,IAAZA,EAAEsB,MAAoB0nD,EAAQ,GAClB,IAAZhpD,EAAEsB,MAAoBpB,MACT,IAAbF,EAAEsB,MAAqBpB,KAAK4rD,SACzBR,EAAsB3B,KAAKoC,IAAI/rD,EAAEsB,OAAQpB,KAAKoB,MAAOpB,KAAK+lD,OAASjmD,EAAEimD,OAEhFuD,EAAavnD,UAAU8rD,SAAW,SAAUvnB,GACxC,OAAO6iB,EAAW7iB,GAAGioB,iBAAiBvuD,OAE1CspD,EAAavnD,UAAUusD,MAAQhF,EAAavnD,UAAU8rD,SAEtDtE,EAAaxnD,UAAU8rD,SAAW,SAAUvnB,GACxC,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQ+nD,EAAW7iB,GAAGllC,QAEvDmoD,EAAaxnD,UAAUusD,MAAQ/E,EAAaxnD,UAAU8rD,SAuBtDzE,EAAWrnD,UAAUspD,OAAS,WAC1B,OAAO,IAAIjC,EAAWiC,EAAOrrD,KAAKoB,QAAQ,IAG9CkoD,EAAavnD,UAAUspD,OAAS,WAC5B,IAAIjqD,EAAQpB,KAAKoB,MAAQpB,KAAKoB,MAC9B,OAAIooD,EAAUpoD,GAAe,IAAIkoD,EAAaloD,GACvC,IAAIgoD,EAAWiC,EAAOzC,EAAaa,KAAKoC,IAAI7rD,KAAKoB,UAAU,IAGtEmoD,EAAaxnD,UAAUspD,OAAS,SAAU/kB,GACtC,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQpB,KAAKoB,QAqK9CgoD,EAAWrnD,UAAUysD,OAAS,SAAUloB,GACpC,IAAI7hC,EAASknD,EAAU3rD,KAAMsmC,GAC7B,MAAO,CACHolB,SAAUjnD,EAAO,GACjB+mD,UAAW/mD,EAAO,KAG1B8kD,EAAaxnD,UAAUysD,OAASlF,EAAavnD,UAAUysD,OAASpF,EAAWrnD,UAAUysD,OAGrFpF,EAAWrnD,UAAUsrD,OAAS,SAAU/mB,GACpC,OAAOqlB,EAAU3rD,KAAMsmC,GAAG,IAE9BijB,EAAaxnD,UAAUkH,KAAOsgD,EAAaxnD,UAAUsrD,OAAS,SAAU/mB,GACpE,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQ+nD,EAAW7iB,GAAGllC,QAEvDkoD,EAAavnD,UAAUkH,KAAOqgD,EAAavnD,UAAUsrD,OAASjE,EAAWrnD,UAAUkH,KAAOmgD,EAAWrnD,UAAUsrD,OAE/GjE,EAAWrnD,UAAU2qD,IAAM,SAAUpmB,GACjC,OAAOqlB,EAAU3rD,KAAMsmC,GAAG,IAE9BijB,EAAaxnD,UAAU2qD,IAAMnD,EAAaxnD,UAAUypD,UAAY,SAAUllB,GACtE,OAAO,IAAIijB,EAAavpD,KAAKoB,MAAQ+nD,EAAW7iB,GAAGllC,QAEvDkoD,EAAavnD,UAAUypD,UAAYlC,EAAavnD,UAAU2qD,IAAMtD,EAAWrnD,UAAUypD,UAAYpC,EAAWrnD,UAAU2qD,IAEtHtD,EAAWrnD,UAAU0sD,IAAM,SAAUnoB,GACjC,IAGIllC,EAAO2oD,EAAGkE,EAHVrsD,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACT6oD,EAAIroD,EAAER,MAEV,GAAU,IAAN6oD,EAAS,OAAOnB,EAAQ,GAC5B,GAAU,IAANhpD,EAAS,OAAOgpD,EAAQ,GAC5B,GAAU,IAANhpD,EAAS,OAAOgpD,EAAQ,GAC5B,IAAW,IAAPhpD,EAAU,OAAO8B,EAAEmrD,SAAWjE,EAAQ,GAAKA,GAAS,GACxD,GAAIlnD,EAAEmkD,KACF,OAAO+C,EAAQ,GAEnB,IAAKlnD,EAAEynD,QAAS,MAAM,IAAIhmD,MAAM,gBAAkBzB,EAAE6qB,WAAa,kBACjE,GAAIzsB,KAAKqpD,SACDG,EAAUpoD,EAAQqoD,KAAKgF,IAAI3uD,EAAGmqD,IAC9B,OAAO,IAAIX,EAAa5wC,EAAStX,IAIzC,IAFA2oD,EAAI/pD,KACJiuD,EAAInF,EAAQ,IAEA,EAAJmB,IACAgE,EAAIA,EAAEK,MAAMvE,KACVE,GAEI,IAANA,GACJA,GAAK,EACLF,EAAIA,EAAEsB,SAEV,OAAO4C,GAEX3E,EAAavnD,UAAU0sD,IAAMrF,EAAWrnD,UAAU0sD,IAElDlF,EAAaxnD,UAAU0sD,IAAM,SAAUnoB,GACnC,IAAI1kC,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MAAO6oD,EAAIroD,EAAER,MACtBstD,EAAK3jC,OAAO,GAAI4jC,EAAK5jC,OAAO,GAAI6jC,EAAK7jC,OAAO,GAChD,GAAIk/B,IAAMyE,EAAI,OAAO5F,EAAQ,GAC7B,GAAIhpD,IAAM4uD,EAAI,OAAO5F,EAAQ,GAC7B,GAAIhpD,IAAM6uD,EAAI,OAAO7F,EAAQ,GAC7B,GAAIhpD,IAAMirB,QAAQ,GAAI,OAAOnpB,EAAEmrD,SAAWjE,EAAQ,GAAKA,GAAS,GAChE,GAAIlnD,EAAEitD,aAAc,OAAO,IAAItF,EAAamF,GAG5C,IAFA,IAAI3E,EAAI/pD,KACJiuD,EAAInF,EAAQ,IAEPmB,EAAI0E,KAAQA,IACbV,EAAIA,EAAEK,MAAMvE,KACVE,GAEFA,IAAMyE,GACVzE,GAAK2E,EACL7E,EAAIA,EAAEsB,SAEV,OAAO4C,GAGX7E,EAAWrnD,UAAUyrD,OAAS,SAAUhI,EAAKkH,GAGzC,GAFAlH,EAAM2D,EAAW3D,IACjBkH,EAAMvD,EAAWuD,IACToC,SAAU,MAAM,IAAIzrD,MAAM,qCAClC,IAAIpC,EAAI6nD,EAAQ,GACZwB,EAAOtqD,KAAK0sD,IAAIA,GAKpB,IAJIlH,EAAIqJ,eACJrJ,EAAMA,EAAIqI,SAAS/E,GAAS,IAC5BwB,EAAOA,EAAKyE,OAAOrC,IAEhBlH,EAAIwJ,cAAc,CACrB,GAAI1E,EAAKwE,SAAU,OAAOhG,EAAQ,GAC9BtD,EAAIyJ,UAAShuD,EAAIA,EAAE4sD,SAASvD,GAAMoC,IAAIA,IAC1ClH,EAAMA,EAAI6H,OAAO,GACjB/C,EAAOA,EAAKe,SAASqB,IAAIA,GAE7B,OAAOzrD,GAEXsoD,EAAaxnD,UAAUyrD,OAASlE,EAAavnD,UAAUyrD,OAASpE,EAAWrnD,UAAUyrD,OAYrFpE,EAAWrnD,UAAU8nD,WAAa,SAAUvjB,GACxC,IAAI1kC,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACT6oD,EAAIroD,EAAER,MACV,OAAIQ,EAAEynD,QAAgB,EACfQ,EAAW/pD,EAAGmqD,IAEzBX,EAAavnD,UAAU8nD,WAAa,SAAUvjB,GAC1C,IAAI1kC,EAAIunD,EAAW7iB,GACfxmC,EAAI2pD,KAAKoC,IAAI7rD,KAAKoB,OAClB6oD,EAAIroD,EAAER,MACV,OAAIQ,EAAEynD,QAEKvpD,KADPmqD,EAAIR,KAAKoC,IAAI5B,IACI,EAAInqD,EAAImqD,EAAI,GAAK,GAE9B,GAEZV,EAAaxnD,UAAU8nD,WAAa,SAAUvjB,GAC1C,IAAIxmC,EAAIE,KAAKoB,MACT6oD,EAAId,EAAW7iB,GAAGllC,MAGtB,OAFAtB,EAAIA,GAAK,EAAIA,GAAKA,MAClBmqD,EAAIA,GAAK,EAAIA,GAAKA,GACD,EAAInqD,EAAImqD,EAAI,GAAK,GAGtCb,EAAWrnD,UAAUmtD,QAAU,SAAU5oB,GAGrC,GAAIA,IAAM6oB,IACN,OAAQ,EAEZ,GAAI7oB,KAAO6oB,IACP,OAAO,EAGX,IAAIvtD,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACT6oD,EAAIroD,EAAER,MACV,OAAIpB,KAAK+lD,OAASnkD,EAAEmkD,KACTnkD,EAAEmkD,KAAO,GAAK,EAErBnkD,EAAEynD,QACKrpD,KAAK+lD,MAAQ,EAAI,EAErB8D,EAAW/pD,EAAGmqD,IAAMjqD,KAAK+lD,MAAQ,EAAI,IAEhDqD,EAAWrnD,UAAUqtD,UAAYhG,EAAWrnD,UAAUmtD,QAEtD5F,EAAavnD,UAAUmtD,QAAU,SAAU5oB,GACvC,GAAIA,IAAM6oB,IACN,OAAQ,EAEZ,GAAI7oB,KAAO6oB,IACP,OAAO,EAGX,IAAIvtD,EAAIunD,EAAW7iB,GACfxmC,EAAIE,KAAKoB,MACT6oD,EAAIroD,EAAER,MACV,OAAIQ,EAAEynD,QACKvpD,GAAKmqD,EAAI,EAAInqD,EAAImqD,EAAI,GAAK,EAEjCnqD,EAAI,IAAM8B,EAAEmkD,KACLjmD,EAAI,GAAK,EAAI,EAEjBA,EAAI,EAAI,GAAK,GAExBwpD,EAAavnD,UAAUqtD,UAAY9F,EAAavnD,UAAUmtD,QAE1D3F,EAAaxnD,UAAUmtD,QAAU,SAAU5oB,GACvC,GAAIA,IAAM6oB,IACN,OAAQ,EAEZ,GAAI7oB,KAAO6oB,IACP,OAAO,EAEX,IAAIrvD,EAAIE,KAAKoB,MACT6oD,EAAId,EAAW7iB,GAAGllC,MACtB,OAAOtB,IAAMmqD,EAAI,EAAInqD,EAAImqD,EAAI,GAAK,GAEtCV,EAAaxnD,UAAUqtD,UAAY7F,EAAaxnD,UAAUmtD,QAE1D9F,EAAWrnD,UAAU+qD,OAAS,SAAUxmB,GACpC,OAA2B,IAApBtmC,KAAKkvD,QAAQ5oB,IAExBijB,EAAaxnD,UAAUstD,GAAK9F,EAAaxnD,UAAU+qD,OAASxD,EAAavnD,UAAUstD,GAAK/F,EAAavnD,UAAU+qD,OAAS1D,EAAWrnD,UAAUstD,GAAKjG,EAAWrnD,UAAU+qD,OAEvK1D,EAAWrnD,UAAUutD,UAAY,SAAUhpB,GACvC,OAA2B,IAApBtmC,KAAKkvD,QAAQ5oB,IAExBijB,EAAaxnD,UAAUwtD,IAAMhG,EAAaxnD,UAAUutD,UAAYhG,EAAavnD,UAAUwtD,IAAMjG,EAAavnD,UAAUutD,UAAYlG,EAAWrnD,UAAUwtD,IAAMnG,EAAWrnD,UAAUutD,UAEhLlG,EAAWrnD,UAAUytD,QAAU,SAAUlpB,GACrC,OAAOtmC,KAAKkvD,QAAQ5oB,GAAK,GAE7BijB,EAAaxnD,UAAU0tD,GAAKlG,EAAaxnD,UAAUytD,QAAUlG,EAAavnD,UAAU0tD,GAAKnG,EAAavnD,UAAUytD,QAAUpG,EAAWrnD,UAAU0tD,GAAKrG,EAAWrnD,UAAUytD,QAEzKpG,EAAWrnD,UAAUkrD,OAAS,SAAU3mB,GACpC,OAAOtmC,KAAKkvD,QAAQ5oB,GAAK,GAE7BijB,EAAaxnD,UAAUgoC,GAAKwf,EAAaxnD,UAAUkrD,OAAS3D,EAAavnD,UAAUgoC,GAAKuf,EAAavnD,UAAUkrD,OAAS7D,EAAWrnD,UAAUgoC,GAAKqf,EAAWrnD,UAAUkrD,OAEvK7D,EAAWrnD,UAAU2tD,gBAAkB,SAAUppB,GAC7C,OAAOtmC,KAAKkvD,QAAQ5oB,IAAM,GAE9BijB,EAAaxnD,UAAU4tD,IAAMpG,EAAaxnD,UAAU2tD,gBAAkBpG,EAAavnD,UAAU4tD,IAAMrG,EAAavnD,UAAU2tD,gBAAkBtG,EAAWrnD,UAAU4tD,IAAMvG,EAAWrnD,UAAU2tD,gBAE5LtG,EAAWrnD,UAAU6tD,eAAiB,SAAUtpB,GAC5C,OAAOtmC,KAAKkvD,QAAQ5oB,IAAM,GAE9BijB,EAAaxnD,UAAU8tD,IAAMtG,EAAaxnD,UAAU6tD,eAAiBtG,EAAavnD,UAAU8tD,IAAMvG,EAAavnD,UAAU6tD,eAAiBxG,EAAWrnD,UAAU8tD,IAAMzG,EAAWrnD,UAAU6tD,eAE1LxG,EAAWrnD,UAAUgrD,OAAS,WAC1B,OAA+B,IAAP,EAAhB/sD,KAAKoB,MAAM,KAEvBkoD,EAAavnD,UAAUgrD,OAAS,WAC5B,OAA4B,IAAP,EAAb/sD,KAAKoB,QAEjBmoD,EAAaxnD,UAAUgrD,OAAS,WAC5B,OAAQ/sD,KAAKoB,MAAQ2pB,OAAO,MAAQA,OAAO,IAG/Cq+B,EAAWrnD,UAAUktD,MAAQ,WACzB,OAA+B,IAAP,EAAhBjvD,KAAKoB,MAAM,KAEvBkoD,EAAavnD,UAAUktD,MAAQ,WAC3B,OAA4B,IAAP,EAAbjvD,KAAKoB,QAEjBmoD,EAAaxnD,UAAUktD,MAAQ,WAC3B,OAAQjvD,KAAKoB,MAAQ2pB,OAAO,MAAQA,OAAO,IAG/Cq+B,EAAWrnD,UAAUitD,WAAa,WAC9B,OAAQhvD,KAAK+lD,MAEjBuD,EAAavnD,UAAUitD,WAAa,WAChC,OAAOhvD,KAAKoB,MAAQ,GAExBmoD,EAAaxnD,UAAUitD,WAAa1F,EAAavnD,UAAUitD,WAE3D5F,EAAWrnD,UAAU8sD,WAAa,WAC9B,OAAO7uD,KAAK+lD,MAEhBuD,EAAavnD,UAAU8sD,WAAa,WAChC,OAAO7uD,KAAKoB,MAAQ,GAExBmoD,EAAaxnD,UAAU8sD,WAAavF,EAAavnD,UAAU8sD,WAE3DzF,EAAWrnD,UAAU8qD,OAAS,WAC1B,OAAO,GAEXvD,EAAavnD,UAAU8qD,OAAS,WAC5B,OAAgC,IAAzBpD,KAAKoC,IAAI7rD,KAAKoB,QAEzBmoD,EAAaxnD,UAAU8qD,OAAS,WAC5B,OAAO7sD,KAAK6rD,MAAMzqD,QAAU2pB,OAAO,IAGvCq+B,EAAWrnD,UAAU+sD,OAAS,WAC1B,OAAO,GAEXxF,EAAavnD,UAAU+sD,OAAS,WAC5B,OAAsB,IAAf9uD,KAAKoB,OAEhBmoD,EAAaxnD,UAAU+sD,OAAS,WAC5B,OAAO9uD,KAAKoB,QAAU2pB,OAAO,IAGjCq+B,EAAWrnD,UAAUirD,cAAgB,SAAU1mB,GAC3C,IAAI1kC,EAAIunD,EAAW7iB,GACnB,OAAI1kC,EAAEktD,aACFltD,EAAEirD,WACkB,IAApBjrD,EAAEioD,WAAW,GAAiB7pD,KAAK+sD,SAChC/sD,KAAK0sD,IAAI9qD,GAAGktD,YAEvBvF,EAAaxnD,UAAUirD,cAAgB1D,EAAavnD,UAAUirD,cAAgB5D,EAAWrnD,UAAUirD,cAgCnG5D,EAAWrnD,UAAU+tD,QAAU,SAAUC,GACrC,IAAID,EAAUlD,EAAa5sD,MAC3B,QAt5BR,IAs5BY8vD,EAAuB,OAAOA,EAClC,IAAIluD,EAAI5B,KAAK6rD,MACTmE,EAAOpuD,EAAEquD,YACb,GAAID,GAAQ,GACR,OAAO9C,EAAgBtrD,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAGvE,IAFA,IAAIsuD,EAAOzG,KAAK0G,IAAI,GAAKH,EAAKI,aAC1B/uD,EAAIooD,KAAKO,MAAiB,IAAX+F,EAAoB,EAAItG,KAAKgF,IAAIyB,EAAM,GAAMA,GACvDpwD,EAAI,GAAIC,EAAI,EAAGA,EAAIsB,EAAGtB,IAC3BD,EAAE6E,KAAK4oD,EAAOxtD,EAAI,IAEtB,OAAOmtD,EAAgBtrD,EAAG9B,IAE9BypD,EAAaxnD,UAAU+tD,QAAUxG,EAAavnD,UAAU+tD,QAAU1G,EAAWrnD,UAAU+tD,QAEvF1G,EAAWrnD,UAAUsuD,gBAAkB,SAAUC,EAAYC,GACzD,IAAIT,EAAUlD,EAAa5sD,MAC3B,QAt6BR,IAs6BY8vD,EAAuB,OAAOA,EAGlC,IAFA,IAAIluD,EAAI5B,KAAK6rD,MACTxqD,OAx6BZ,IAw6BgBivD,EAA2B,EAAIA,EAC9BxwD,EAAI,GAAIC,EAAI,EAAGA,EAAIsB,EAAGtB,IAC3BD,EAAE6E,KAAK4oD,EAAOiD,YAAY,EAAG5uD,EAAE+rD,MAAM,GAAI4C,IAE7C,OAAOrD,EAAgBtrD,EAAG9B,IAE9BypD,EAAaxnD,UAAUsuD,gBAAkB/G,EAAavnD,UAAUsuD,gBAAkBjH,EAAWrnD,UAAUsuD,gBAEvGjH,EAAWrnD,UAAUgtD,OAAS,SAAUntD,GAEpC,IADA,IAA8Ey0C,EAAGoa,EAAOC,EAApFrvD,EAAIksD,EAAOoD,KAAMC,EAAOrD,EAAOsD,IAAK5vD,EAAIkoD,EAAWvnD,GAAIkvD,EAAO9wD,KAAK6rD,OAC/DiF,EAAKhC,UACTzY,EAAIp1C,EAAEosD,OAAOyD,GACbL,EAAQpvD,EACRqvD,EAAQzvD,EACRI,EAAIuvD,EACJ3vD,EAAI6vD,EACJF,EAAOH,EAAMhG,SAASpU,EAAEwX,SAAS+C,IACjCE,EAAOJ,EAAMjG,SAASpU,EAAEwX,SAASiD,IAErC,IAAK7vD,EAAE4rD,SAAU,MAAM,IAAIxpD,MAAMrD,KAAKysB,WAAa,QAAU7qB,EAAE6qB,WAAa,qBAI5E,OAHsB,IAAlBprB,EAAE6tD,QAAQ,KACV7tD,EAAIA,EAAE8yB,IAAIvyB,IAEV5B,KAAK6uD,aACExtD,EAAEuqD,SAENvqD,GAGXkoD,EAAaxnD,UAAUgtD,OAASzF,EAAavnD,UAAUgtD,OAAS3F,EAAWrnD,UAAUgtD,OAErF3F,EAAWrnD,UAAUurD,KAAO,WACxB,IAAIlsD,EAAQpB,KAAKoB,MACjB,OAAIpB,KAAK+lD,KACE+E,EAAc1pD,EAAO,EAAGpB,KAAK+lD,MAEjC,IAAIqD,EAAWoB,EAASppD,EAAO,GAAIpB,KAAK+lD,OAEnDuD,EAAavnD,UAAUurD,KAAO,WAC1B,IAAIlsD,EAAQpB,KAAKoB,MACjB,OAAIA,EAAQ,EAAIsnD,EAAgB,IAAIY,EAAaloD,EAAQ,GAClD,IAAIgoD,EAAWT,GAAa,IAEvCY,EAAaxnD,UAAUurD,KAAO,WAC1B,OAAO,IAAI/D,EAAavpD,KAAKoB,MAAQ2pB,OAAO,KAGhDq+B,EAAWrnD,UAAUqrD,KAAO,WACxB,IAAIhsD,EAAQpB,KAAKoB,MACjB,OAAIpB,KAAK+lD,KACE,IAAIqD,EAAWoB,EAASppD,EAAO,IAAI,GAEvC0pD,EAAc1pD,EAAO,EAAGpB,KAAK+lD,OAExCuD,EAAavnD,UAAUqrD,KAAO,WAC1B,IAAIhsD,EAAQpB,KAAKoB,MACjB,OAAIA,EAAQ,GAAKsnD,EAAgB,IAAIY,EAAaloD,EAAQ,GACnD,IAAIgoD,EAAWT,GAAa,IAEvCY,EAAaxnD,UAAUqrD,KAAO,WAC1B,OAAO,IAAI7D,EAAavpD,KAAKoB,MAAQ2pB,OAAO,KAIhD,IADA,IAAIgmC,EAAc,CAAC,GACZ,EAAIA,EAAYA,EAAY3qD,OAAS,IAAMqiD,GAAMsI,EAAYpsD,KAAK,EAAIosD,EAAYA,EAAY3qD,OAAS,IAC9G,IAAI4qD,EAAgBD,EAAY3qD,OAAQ6qD,EAAgBF,EAAYC,EAAgB,GAEpF,SAASE,EAActvD,GACnB,OAAO6nD,KAAKoC,IAAIjqD,IAAM6mD,EAsC1B,SAAS0I,EAAQpH,EAAGkE,EAAGmD,GACnBnD,EAAI9E,EAAW8E,GAOf,IANA,IAAIoD,EAAQtH,EAAE8E,aAAcyC,EAAQrD,EAAEY,aAClC0C,EAAOF,EAAQtH,EAAEyH,MAAQzH,EACzB0H,EAAOH,EAAQrD,EAAEuD,MAAQvD,EACzByD,EAAS,EAAGC,EAAS,EACrBC,EAAU,KAAMC,EAAU,KAC1BptD,EAAS,IACL8sD,EAAKzC,WAAa2C,EAAK3C,UAE3B4C,GADAE,EAAUjG,EAAU4F,EAAMN,IACT,GAAGb,aAChBiB,IACAK,EAAST,EAAgB,EAAIS,GAIjCC,GADAE,EAAUlG,EAAU8F,EAAMR,IACT,GAAGb,aAChBkB,IACAK,EAASV,EAAgB,EAAIU,GAGjCJ,EAAOK,EAAQ,GACfH,EAAOI,EAAQ,GACfptD,EAAOE,KAAKysD,EAAGM,EAAQC,IAG3B,IADA,IAAIzH,EAA2C,IAArCkH,EAAGC,EAAQ,EAAI,EAAGC,EAAQ,EAAI,GAAW/D,GAAQ,GAAKA,EAAO,GAC9DxtD,EAAI0E,EAAO2B,OAAS,EAAGrG,GAAK,EAAGA,GAAK,EACzCmqD,EAAMA,EAAI2D,SAASoD,GAAe98B,IAAIo5B,EAAO9oD,EAAO1E,KAExD,OAAOmqD,EAhEXd,EAAWrnD,UAAUopD,UAAY,SAAU7kB,GACvC,IAAI1kC,EAAIunD,EAAW7iB,GAAG8pB,aACtB,IAAKc,EAActvD,GACf,MAAM,IAAIyB,MAAMwhD,OAAOjjD,GAAK,+BAEhC,GAAIA,EAAI,EAAG,OAAO5B,KAAK8xD,YAAYlwD,GACnC,IAAI6C,EAASzE,KACb,GAAIyE,EAAOqqD,SAAU,OAAOrqD,EAC5B,KAAO7C,GAAKovD,GACRvsD,EAASA,EAAOopD,SAASoD,GACzBrvD,GAAKovD,EAAgB,EAEzB,OAAOvsD,EAAOopD,SAASkD,EAAYnvD,KAEvC2nD,EAAaxnD,UAAUopD,UAAY7B,EAAavnD,UAAUopD,UAAY/B,EAAWrnD,UAAUopD,UAE3F/B,EAAWrnD,UAAU+vD,WAAa,SAAUxrB,GACxC,IAAIyrB,EACAnwD,EAAIunD,EAAW7iB,GAAG8pB,aACtB,IAAKc,EAActvD,GACf,MAAM,IAAIyB,MAAMwhD,OAAOjjD,GAAK,+BAEhC,GAAIA,EAAI,EAAG,OAAO5B,KAAKmrD,WAAWvpD,GAElC,IADA,IAAI6C,EAASzE,KACN4B,GAAKovD,GAAe,CACvB,GAAIvsD,EAAOqqD,UAAarqD,EAAOoqD,cAAgBpqD,EAAOooD,SAAW,OAAOpoD,EAExEA,GADAstD,EAASpG,EAAUlnD,EAAQwsD,IACX,GAAGpC,aAAekD,EAAO,GAAG3E,OAAS2E,EAAO,GAC5DnwD,GAAKovD,EAAgB,EAGzB,OADAe,EAASpG,EAAUlnD,EAAQssD,EAAYnvD,KACzB,GAAGitD,aAAekD,EAAO,GAAG3E,OAAS2E,EAAO,IAE9DxI,EAAaxnD,UAAU+vD,WAAaxI,EAAavnD,UAAU+vD,WAAa1I,EAAWrnD,UAAU+vD,WAkC7F1I,EAAWrnD,UAAUyvD,IAAM,WACvB,OAAOxxD,KAAK4rD,SAASwB,QAEzB7D,EAAaxnD,UAAUyvD,IAAMlI,EAAavnD,UAAUyvD,IAAMpI,EAAWrnD,UAAUyvD,IAE/EpI,EAAWrnD,UAAUiwD,IAAM,SAAUpwD,GACjC,OAAOuvD,EAAQnxD,KAAM4B,GAAG,SAAU9B,EAAGmqD,GAAK,OAAOnqD,EAAImqD,MAEzDV,EAAaxnD,UAAUiwD,IAAM1I,EAAavnD,UAAUiwD,IAAM5I,EAAWrnD,UAAUiwD,IAE/E5I,EAAWrnD,UAAUmhB,GAAK,SAAUthB,GAChC,OAAOuvD,EAAQnxD,KAAM4B,GAAG,SAAU9B,EAAGmqD,GAAK,OAAOnqD,EAAImqD,MAEzDV,EAAaxnD,UAAUmhB,GAAKomC,EAAavnD,UAAUmhB,GAAKkmC,EAAWrnD,UAAUmhB,GAE7EkmC,EAAWrnD,UAAUkwD,IAAM,SAAUrwD,GACjC,OAAOuvD,EAAQnxD,KAAM4B,GAAG,SAAU9B,EAAGmqD,GAAK,OAAOnqD,EAAImqD,MAEzDV,EAAaxnD,UAAUkwD,IAAM3I,EAAavnD,UAAUkwD,IAAM7I,EAAWrnD,UAAUkwD,IAG/E,SAASC,EAAStwD,GAGd,IAAI0kC,EAAI1kC,EAAER,MACN2oD,EAAiB,iBAANzjB,EAAiBA,EALpB,GAAK,GAMI,iBAANA,EAAiBA,EAAIvb,OANxB,GAAK,IAOLub,EAAE,GAAKA,EAAE,GAAKmiB,EAPQ,WAQlC,OAAOsB,GAAKA,EA0BhB,SAASmE,EAAIpuD,EAAGmqD,GAGZ,OAFAnqD,EAAIqpD,EAAWrpD,GACfmqD,EAAId,EAAWc,GACRnqD,EAAE0vD,QAAQvF,GAAKnqD,EAAImqD,EAE9B,SAASkI,EAAIryD,EAAGmqD,GAGZ,OAFAnqD,EAAIqpD,EAAWrpD,GACfmqD,EAAId,EAAWc,GACRnqD,EAAEmtD,OAAOhD,GAAKnqD,EAAImqD,EAE7B,SAASmI,EAAItyD,EAAGmqD,GAGZ,GAFAnqD,EAAIqpD,EAAWrpD,GAAG+rD,MAClB5B,EAAId,EAAWc,GAAG4B,MACd/rD,EAAEgtD,OAAO7C,GAAI,OAAOnqD,EACxB,GAAIA,EAAEgvD,SAAU,OAAO7E,EACvB,GAAIA,EAAE6E,SAAU,OAAOhvD,EAEvB,IADA,IAAoBW,EAAGY,EAAnBb,EAAIsoD,EAAQ,GACThpD,EAAEitD,UAAY9C,EAAE8C,UACnBtsD,EAAI0xD,EAAID,EAASpyD,GAAIoyD,EAASjI,IAC9BnqD,EAAIA,EAAEutD,OAAO5sD,GACbwpD,EAAIA,EAAEoD,OAAO5sD,GACbD,EAAIA,EAAEqtD,SAASptD,GAEnB,KAAOX,EAAEitD,UACLjtD,EAAIA,EAAEutD,OAAO6E,EAASpyD,IAE1B,EAAG,CACC,KAAOmqD,EAAE8C,UACL9C,EAAIA,EAAEoD,OAAO6E,EAASjI,IAEtBnqD,EAAE0vD,QAAQvF,KACV5oD,EAAI4oD,EAAGA,EAAInqD,EAAGA,EAAIuB,GAEtB4oD,EAAIA,EAAEQ,SAAS3qD,UACTmqD,EAAE6E,UACZ,OAAOtuD,EAAEqsD,SAAW/sD,EAAIA,EAAE+tD,SAASrtD,GA/CvC4oD,EAAWrnD,UAAUkuD,UAAY,WAC7B,IAAIruD,EAAI5B,KAIR,OAHI4B,EAAEwtD,UAAU7B,EAAO,IAAM,IACzB3rD,EAAIA,EAAEgqD,SAASnB,SAAS8C,EAAO,KAEJ,IAA3B3rD,EAAEwtD,UAAU7B,EAAO,IACZA,EAAO,GAEXA,EAnBX,SAAS8E,EAAiBjxD,EAAOkpD,GAC7B,GAAIA,EAAK8E,UAAUhuD,IAAU,EAAG,CAC5B,IAAIkxD,EAAMD,EAAiBjxD,EAAOkpD,EAAKe,OAAOf,IAC1CroD,EAAIqwD,EAAIrwD,EACRuS,EAAI89C,EAAI99C,EACRnT,EAAIY,EAAE4rD,SAASvD,GACnB,OAAOjpD,EAAE+tD,UAAUhuD,IAAU,EAAI,CAAEa,EAAGZ,EAAGmT,EAAO,EAAJA,EAAQ,GAAM,CAAEvS,EAAGA,EAAGuS,EAAO,EAAJA,GAEzE,MAAO,CAAEvS,EAAGsrD,EAAO,GAAI/4C,EAAG,GAWZ69C,CAAiBzwD,EAAG2rD,EAAO,IAAI/4C,GAAG2f,IAAIo5B,EAAO,KAE/DhE,EAAaxnD,UAAUkuD,UAAY3G,EAAavnD,UAAUkuD,UAAY7G,EAAWrnD,UAAUkuD,UA8D3F,IAAI/G,EAAY,SAAUp9B,EAAMw+B,EAAMtB,EAAUC,GAC5CD,EAAWA,GA9pCQ,uCA+pCnBl9B,EAAO+4B,OAAO/4B,GACTm9B,IACDn9B,EAAOA,EAAKznB,cACZ2kD,EAAWA,EAAS3kD,eAExB,IACItE,EADAqG,EAAS0lB,EAAK1lB,OAEdmsD,EAAU9I,KAAKoC,IAAIvB,GACnBkI,EAAiB,GACrB,IAAKzyD,EAAI,EAAGA,EAAIipD,EAAS5iD,OAAQrG,IAC7ByyD,EAAexJ,EAASjpD,IAAMA,EAElC,IAAKA,EAAI,EAAGA,EAAIqG,EAAQrG,IAAK,CAEzB,GAAU,OADNS,EAAIsrB,EAAK/rB,MAETS,KAAKgyD,GACDA,EAAehyD,IAAM+xD,GAAS,CAC9B,GAAU,MAAN/xD,GAAyB,IAAZ+xD,EAAe,SAChC,MAAM,IAAIlvD,MAAM7C,EAAI,iCAAmC8pD,EAAO,MAI1EA,EAAOnB,EAAWmB,GAClB,IAAImI,EAAS,GACT5D,EAAyB,MAAZ/iC,EAAK,GACtB,IAAK/rB,EAAI8uD,EAAa,EAAI,EAAG9uD,EAAI+rB,EAAK1lB,OAAQrG,IAAK,CAC/C,IAAIS,EACJ,IADIA,EAAIsrB,EAAK/rB,MACJyyD,EAAgBC,EAAO9tD,KAAKwkD,EAAWqJ,EAAehyD,SAC1D,IAAU,MAANA,EAKJ,MAAM,IAAI6C,MAAM7C,EAAI,6BAJrB,IAAIwF,EAAQjG,EACZ,GAAKA,UAA0B,MAAZ+rB,EAAK/rB,IAAcA,EAAI+rB,EAAK1lB,QAC/CqsD,EAAO9tD,KAAKwkD,EAAWr9B,EAAKzc,MAAMrJ,EAAQ,EAAGjG,MAIrD,OAAO2yD,EAAmBD,EAAQnI,EAAMuE,IAG5C,SAAS6D,EAAmBD,EAAQnI,EAAMuE,GACtC,IAAwC9uD,EAApCiE,EAAM8kD,EAAQ,GAAI2F,EAAM3F,EAAQ,GACpC,IAAK/oD,EAAI0yD,EAAOrsD,OAAS,EAAGrG,GAAK,EAAGA,IAChCiE,EAAMA,EAAImwB,IAAIs+B,EAAO1yD,GAAGuuD,MAAMG,IAC9BA,EAAMA,EAAIH,MAAMhE,GAEpB,OAAOuE,EAAa7qD,EAAI4nD,SAAW5nD,EAWvC,SAAS2uD,EAAO/wD,EAAG0oD,GAEf,IADAA,EAAOiD,EAAOjD,IACLwE,SAAU,CACf,GAAIltD,EAAEktD,SAAU,MAAO,CAAE1tD,MAAO,CAAC,GAAIytD,YAAY,GACjD,MAAM,IAAIxrD,MAAM,6CAEpB,GAAIinD,EAAKwC,QAAQ,GAAI,CACjB,GAAIlrD,EAAEktD,SAAU,MAAO,CAAE1tD,MAAO,CAAC,GAAIytD,YAAY,GACjD,GAAIjtD,EAAEitD,aACF,MAAO,CACHztD,MAAO,GAAGwB,OAAOgQ,MAAM,GAAI1P,MAAM0P,MAAM,KAAM1P,OAAOtB,EAAEwuD,eACjDhtD,IAAIF,MAAMnB,UAAU6wD,QAAS,CAAC,EAAG,KAEtC/D,YAAY,GAGpB,IAAIjF,EAAM1mD,MAAM0P,MAAM,KAAM1P,MAAMtB,EAAEwuD,aAAe,IAC9ChtD,IAAIF,MAAMnB,UAAU6wD,QAAS,CAAC,EAAG,IAEtC,OADAhJ,EAAI71B,QAAQ,CAAC,IACN,CACH3yB,MAAO,GAAGwB,OAAOgQ,MAAM,GAAIg3C,GAC3BiF,YAAY,GAIpB,IAAIgE,GAAM,EAKV,GAJIjxD,EAAEitD,cAAgBvE,EAAK0E,eACvB6D,GAAM,EACNjxD,EAAIA,EAAEiqD,OAENvB,EAAKuC,SACL,OAAIjrD,EAAEktD,SAAiB,CAAE1tD,MAAO,CAAC,GAAIytD,YAAY,GAE1C,CACHztD,MAAO8B,MAAM0P,MAAM,KAAM1P,MAAMtB,EAAEwuD,eAC5BhtD,IAAI0kD,OAAO/lD,UAAU6wD,QAAS,GACnC/D,WAAYgE,GAKpB,IAFA,IACcrE,EADVsE,EAAM,GACNtvD,EAAO5B,EACJ4B,EAAKqrD,cAAgBrrD,EAAKqmD,WAAWS,IAAS,GAAG,CACpDkE,EAAShrD,EAAKgrD,OAAOlE,GACrB9mD,EAAOgrD,EAAO9C,SACd,IAAI7F,EAAQ2I,EAAOhD,UACf3F,EAAMgJ,eACNhJ,EAAQyE,EAAKqD,MAAM9H,GAAOgG,MAC1BroD,EAAOA,EAAK8pD,QAEhBwF,EAAInuD,KAAKkhD,EAAMuK,cAGnB,OADA0C,EAAInuD,KAAKnB,EAAK4sD,cACP,CAAEhvD,MAAO0xD,EAAIvG,UAAWsC,WAAYgE,GAG/C,SAASE,EAAanxD,EAAG0oD,EAAMtB,GAC3B,IAAIY,EAAM+I,EAAO/wD,EAAG0oD,GACpB,OAAQV,EAAIiF,WAAa,IAAM,IAAMjF,EAAIxoD,MAAMgC,KAAI,SAAU2mD,GACzD,OAlER,SAAmBlE,EAAOmD,GAEtB,OAAInD,GADJmD,EAAWA,GA/sCQ,wCAgtCE5iD,OACV4iD,EAASnD,GAEb,IAAMA,EAAQ,IA6DVjgD,CAAUmkD,EAAGf,MACrB9jD,KAAK,IAkDZ,SAAS8tD,EAAiB1sB,GACtB,GAAIkjB,GAAWljB,GAAI,CACf,IAAIyjB,GAAKzjB,EACT,GAAIyjB,IAAMrxC,EAASqxC,GACf,OAAOlB,EAAuB,IAAIU,EAAax+B,OAAOg/B,IAAM,IAAIT,EAAaS,GACjF,MAAM,IAAI1mD,MAAM,oBAAsBijC,GAE1C,IAAIyf,EAAgB,MAATzf,EAAE,GACTyf,IAAMzf,EAAIA,EAAEj3B,MAAM,IACtB,IAAID,EAAQk3B,EAAEl3B,MAAM,MACpB,GAAIA,EAAMhJ,OAAS,EAAG,MAAM,IAAI/C,MAAM,oBAAsB+L,EAAMlK,KAAK,MACvE,GAAqB,IAAjBkK,EAAMhJ,OAAc,CACpB,IAAIo/C,EAAMp2C,EAAM,GAGhB,GAFe,MAAXo2C,EAAI,KAAYA,EAAMA,EAAIn2C,MAAM,KACpCm2C,GAAOA,KACK9sC,EAAS8sC,KAASgE,EAAUhE,GAAM,MAAM,IAAIniD,MAAM,oBAAsBmiD,EAAM,6BAC1F,IAAI15B,EAAO1c,EAAM,GACb6jD,EAAennC,EAAKonC,QAAQ,KAKhC,GAJID,GAAgB,IAChBzN,GAAO15B,EAAK1lB,OAAS6sD,EAAe,EACpCnnC,EAAOA,EAAKzc,MAAM,EAAG4jD,GAAgBnnC,EAAKzc,MAAM4jD,EAAe,IAE/DzN,EAAM,EAAG,MAAM,IAAIniD,MAAM,sDAE7BijC,EADAxa,GAAQ,IAAK5oB,MAAMsiD,EAAM,GAAItgD,KAAK,KAItC,IADc,kBAAkBiO,KAAKmzB,GACvB,MAAM,IAAIjjC,MAAM,oBAAsBijC,GACpD,GAAIuiB,EACA,OAAO,IAAIU,EAAax+B,OAAOg7B,EAAO,IAAMzf,EAAIA,IAGpD,IADA,IAAIrlC,EAAI,GAAIitD,EAAM5nB,EAAElgC,OAAsB+rD,EAAMjE,EAr2CrC,EAs2CJA,EAAM,GACTjtD,EAAE0D,MAAM2hC,EAAEj3B,MAAM8iD,EAAKjE,KACrBiE,GAx2CO,GAy2CG,IAAGA,EAAM,GACnBjE,GA12CO,EA62CX,OADApxC,EAAK7b,GACE,IAAImoD,EAAWnoD,EAAG8kD,GAc7B,SAASoD,EAAW7iB,GAChB,MAAiB,iBAANA,EAZf,SAA0BA,GACtB,GAAIuiB,EACA,OAAO,IAAIU,EAAax+B,OAAOub,IAEnC,GAAIkjB,EAAUljB,GAAI,CACd,GAAIA,IAAM5tB,EAAS4tB,GAAI,MAAM,IAAIjjC,MAAMijC,EAAI,uBAC3C,OAAO,IAAIgjB,EAAahjB,GAE5B,OAAO0sB,EAAiB1sB,EAAE7Z,YAKf0mC,CAAiB7sB,GAEX,iBAANA,EACA0sB,EAAiB1sB,GAEX,iBAANA,EACA,IAAIijB,EAAajjB,GAErBA,EA9GX8iB,EAAWrnD,UAAUqxD,QAAU,SAAUrK,GACrC,OAAO4J,EAAO3yD,KAAM+oD,IAGxBO,EAAavnD,UAAUqxD,QAAU,SAAUrK,GACvC,OAAO4J,EAAO3yD,KAAM+oD,IAGxBQ,EAAaxnD,UAAUqxD,QAAU,SAAUrK,GACvC,OAAO4J,EAAO3yD,KAAM+oD,IAGxBK,EAAWrnD,UAAU0qB,SAAW,SAAUs8B,EAAOC,GAE7C,QAzyCR,IAwyCYD,IAAqBA,EAAQ,IACnB,KAAVA,EAAc,OAAOgK,EAAa/yD,KAAM+oD,EAAOC,GAEnD,IADA,IAA2EnD,EAAvEvf,EAAItmC,KAAKoB,MAAOhB,EAAIkmC,EAAElgC,OAAQrD,EAAM8hD,OAAOve,IAAIlmC,MAC1CA,GAAK,GACVylD,EAAQhB,OAAOve,EAAElmC,IACjB2C,GAH4D,UAG/CsM,MAAMw2C,EAAMz/C,QAAUy/C,EAGvC,OADW7lD,KAAK+lD,KAAO,IAAM,IACfhjD,GAGlBumD,EAAavnD,UAAU0qB,SAAW,SAAUs8B,EAAOC,GAE/C,YArzCR,IAozCYD,IAAqBA,EAAQ,IACpB,IAATA,EAAoBgK,EAAa/yD,KAAM+oD,EAAOC,GAC3CnE,OAAO7kD,KAAKoB,QAGvBmoD,EAAaxnD,UAAU0qB,SAAW68B,EAAavnD,UAAU0qB,SAEzD88B,EAAaxnD,UAAUsxD,OAASjK,EAAWrnD,UAAUsxD,OAAS/J,EAAavnD,UAAUsxD,OAAS,WAAc,OAAOrzD,KAAKysB,YAExH28B,EAAWrnD,UAAU6wD,QAAU,WAC3B,OAAO7N,SAAS/kD,KAAKysB,WAAY,KAErC28B,EAAWrnD,UAAUquD,WAAahH,EAAWrnD,UAAU6wD,QAEvDtJ,EAAavnD,UAAU6wD,QAAU,WAC7B,OAAO5yD,KAAKoB,OAEhBkoD,EAAavnD,UAAUquD,WAAa9G,EAAavnD,UAAU6wD,QAC3DrJ,EAAaxnD,UAAU6wD,QAAUrJ,EAAaxnD,UAAUquD,WAAa,WACjE,OAAOrL,SAAS/kD,KAAKysB,WAAY,KAqErC,IAAK,IAAI1sB,EAAI,EAAGA,EAAI,IAAMA,IACtB+oD,EAAQ/oD,GAAKopD,EAAWppD,GACpBA,EAAI,IAAG+oD,GAAS/oD,GAAKopD,GAAYppD,IAiBzC,OAdA+oD,EAAQ+H,IAAM/H,EAAQ,GACtBA,EAAQ6H,KAAO7H,EAAQ,GACvBA,EAAQwK,SAAWxK,GAAS,GAC5BA,EAAQoF,IAAMA,EACdpF,EAAQqJ,IAAMA,EACdrJ,EAAQsJ,IAAMA,EACdtJ,EAAQyK,IA1QR,SAAazzD,EAAGmqD,GAGZ,OAFAnqD,EAAIqpD,EAAWrpD,GAAG+rD,MAClB5B,EAAId,EAAWc,GAAG4B,MACX/rD,EAAEutD,OAAO+E,EAAItyD,EAAGmqD,IAAI4D,SAAS5D,IAwQxCnB,EAAQ0K,WAAa,SAAUzJ,GAAK,OAAOA,aAAaX,GAAcW,aAAaT,GAAgBS,aAAaR,GAChHT,EAAQ0H,YAvQR,SAAqB1wD,EAAGmqD,EAAGsG,GACvBzwD,EAAIqpD,EAAWrpD,GACfmqD,EAAId,EAAWc,GACf,IAAIwJ,EAAUlD,GAAO9G,KAAKiK,OACtBC,EAAMxB,EAAIryD,EAAGmqD,GACb2J,EADwB1F,EAAIpuD,EAAGmqD,GAClBQ,SAASkJ,GAAKx/B,IAAI,GACnC,GAAIy/B,EAAMvK,QAAS,OAAOsK,EAAIx/B,IAAIs1B,KAAKC,MAAM+J,IAAYG,IAGzD,IAFA,IAAInB,EAASE,EAAOiB,EAAOnL,GAAMrnD,MAC7BqD,EAAS,GAAIovD,GAAa,EACrB9zD,EAAI,EAAGA,EAAI0yD,EAAOrsD,OAAQrG,IAAK,CACpC,IAAIigB,EAAM6zC,EAAapB,EAAO1yD,IAAMA,EAAI,EAAI0yD,EAAOrsD,OAASqsD,EAAO1yD,EAAI,GAAK0oD,EAAO,GAAKA,EACpF5C,EAAQntC,EAAS+6C,IAAYzzC,GACjCvb,EAAOE,KAAKkhD,GACRA,EAAQ4M,EAAO1yD,KAAI8zD,GAAa,GAExC,OAAOF,EAAIx/B,IAAI20B,EAAQgL,UAAUrvD,EAAQgkD,GAAM,KA0PnDK,EAAQgL,UAAY,SAAUrB,EAAQnI,EAAMuE,GACxC,OAAO6D,EAAmBD,EAAOrvD,IAAI+lD,GAAaA,EAAWmB,GAAQ,IAAKuE,IAGvE/F,EA/5CX,GAm6CqCnpD,EAAOqC,eAAe,aACvDrC,EAAOD,QAAU6tD,QAOhB,KAFD,aACI,OAAOA,GACV,gC,mCC36CL5tD,EAAOD,QAAU,SAASC,GAoBzB,OAnBKA,EAAOo0D,kBACXp0D,EAAOq0D,UAAY,aACnBr0D,EAAOs0D,MAAQ,GAEVt0D,EAAOu0D,WAAUv0D,EAAOu0D,SAAW,IACxCrzD,OAAOC,eAAenB,EAAQ,SAAU,CACvCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOS,KAGhBS,OAAOC,eAAenB,EAAQ,KAAM,CACnCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOI,KAGhBJ,EAAOo0D,gBAAkB,GAEnBp0D","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","import { columnToSQL, columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent, parentheses } = opt\n  const val = parentheses ? `(${value})` : value\n  const prefix = `TOP ${val}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  if (ident === '*') return ident\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n    case 'snowflake':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  let { prefix } = literal\n  const { type, parentheses, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'natural_string':\n      str = `N'${escape(value)}'`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `${prefix || ':'}${value}`\n      prefix = null\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fullTextSearchToSQL } from './column'\nimport { anyValueFuncToSQL, castToSQL, extractFunToSQL, flattenFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { tablesToSQL, unnestToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  any_value       : anyValueFuncToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  flatten         : flattenFunToSQL,\n  fulltext_search : fullTextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  tables          : tablesToSQL,\n  unnest          : unnestToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, quoted, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return [quoted, val.join(' '), quoted].filter(hasVal).join('')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type || 'ASC', toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  let separator = ' '\n  if (args.parentheses) {\n    separator = ''\n    str = `(${str})`\n  }\n  if (args.distinct) str = ['DISTINCT', str].join(separator)\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (args.separator) str = [str, toUpper(args.separator.keyword), literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { intervalToSQL } from './interval'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n    case 'unpivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableTumbleToSQL(tumble) {\n  if (!tumble) return ''\n  const { data: tableInfo, timecol, size } = tumble\n  const fullTableName = [identifierToSql(tableInfo.db), identifierToSql(tableInfo.table)].filter(hasVal).join('.')\n  const result = ['TABLE(TUMBLE(TABLE', fullTableName, `DESCRIPTOR(${columnRefToSQL(timecol)})`, `${intervalToSQL(size)}))`]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, server, tablesample, table_hint } = tableInfo\n  const serverName = identifierToSql(server)\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr) {\n    const exprType = expr.type\n    switch (exprType) {\n      case 'values':\n        const { parentheses, values, prefix } = expr\n        const valueSQL = [parentheses && '(', '', parentheses && ')']\n        let valuesExpr = valuesToSQL(values)\n        if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n        valueSQL[1] = `VALUES ${valuesExpr}`\n        tableName = valueSQL.filter(hasVal).join('')\n        break\n      case 'tumble':\n        tableName = tableTumbleToSQL(expr)\n        break\n      default:\n        tableName = exprToSQL(expr)\n    }\n  }\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [serverName, database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  result.push(commonOptionConnector('AS', identifierToSql, as), operatorToSQL(operator))\n  if (table_hint) result.push(toUpper(table_hint.keyword), `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  if (!Array.isArray(tables)) {\n    const { expr, parentheses } = tables\n    const sql = tablesToSQL(expr)\n    if (parentheses) return `(${sql})`\n    return sql\n  }\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${toUpper(join)}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tableTumbleToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix, order_by, subFields = [],\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${literalToSQL(array_index.index)}]`\n    if (array_index.property) str = `${str}.${literalToSQL(array_index.property)}`\n  }\n  str = [str, ...subFields].join('.')\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  result.push(toUpper(order_by))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_action: onAction,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  onAction.map(onRef => reference.push(toUpper(onRef.type), exprToSQL(onRef.value)))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order_by } = columnOrder\n  const result = [\n    exprToSQL(typeof column === 'string' ? { type: 'column_ref', table: columnOrder.table, column } : columnOrder),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order_by),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fullTextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${literalToSQL(expr.array_index.index)}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fullTextSearchToSQL,\n}\n","import { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { commonTypeValue, identifierToSql, hasVal, toUpper, literalToSQL } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport astToSQL from './sql'\nimport { multipleToSQL } from './union'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'trigger':\n      clauses.push([name[0].schema ? `${identifierToSql(name[0].schema)}.` : '', identifierToSql(name[0].trigger)].filter(hasVal).join(''))\n      break\n    case 'database':\n    case 'schema':\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'view':\n      clauses.push(tablesToSQL(name), stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    case 'index':\n      clauses.push(columnRefToSQL(name), ...stmt.table ? ['ON', tableToSQL(stmt.table)] : [], stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction executeToSQL(stmt) {\n  const { type, name, args } = stmt\n  const sql = [toUpper(type)]\n  const nameWithArgs = [name]\n  if (args) nameWithArgs.push(`(${exprToSQL(args).join(', ')})`)\n  sql.push(nameWithArgs.join(''))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction forLoopToSQL(stmt) {\n  const { type, label, target, query, stmts } = stmt\n  const sql = [label, toUpper(type), target, 'IN', multipleToSQL([query]), 'LOOP', multipleToSQL(stmts), 'END LOOP', label]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction raiseToSQL(stmt) {\n  const { type, level, raise, using } = stmt\n  const sql = [toUpper(type), toUpper(level)]\n  if (raise) sql.push([literalToSQL(raise.keyword), raise.type === 'format' && raise.expr.length > 0 && ','].filter(hasVal).join(''), raise.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  if (using) sql.push(toUpper(using.type), toUpper(using.option), using.symbol, using.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare, symbol } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, constant, datatype, not_null, prefix, definition, keyword } = dec\n    const declareInfo = [[at, name].filter(hasVal).join(''), toUpper(as), toUpper(constant)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(datatype), ...commonTypeValue(dec.collate), toUpper(not_null))\n        if (definition) declareInfo.push(toUpper(definition.keyword), exprToSQL(definition.value))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(`${symbol} `)\n  result.push(info)\n  return result.join(' ')\n}\n\nfunction ifToSQL(stmt) {\n  const {\n    boolean_expr: boolExpr,\n    else_expr: elseExpr,\n    elseif_expr: elseifExpr,\n    if_expr: ifExpr,\n    prefix,\n    go,\n    semicolons,\n    suffix,\n    type,\n  } = stmt\n  const result = [toUpper(type), exprToSQL(boolExpr), literalToSQL(prefix), `${astToSQL(ifExpr.ast || ifExpr)}${semicolons[0]}`, toUpper(go)]\n  if (elseifExpr) {\n    result.push(\n      elseifExpr.map(\n        elseif => [toUpper(elseif.type), exprToSQL(elseif.boolean_expr), 'THEN', astToSQL(elseif.then.ast || elseif.then), elseif.semicolon].filter(hasVal).join(' ')\n      ).join(' ')\n    )\n  }\n  if (elseExpr) result.push('ELSE', `${astToSQL(elseExpr.ast || elseExpr)}${semicolons[1]}`)\n  result.push(literalToSQL(suffix))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction grantUserOrRoleToSQL(stmt) {\n  const { name, host } = stmt\n  const result = [literalToSQL(name)]\n  if (host) result.push('@', literalToSQL(host))\n  return result.join('')\n}\n\nfunction grantAndRevokeToSQL(stmt) {\n  const { type, grant_option_for, keyword, objects, on, to_from, user_or_roles, with: withOpt } = stmt\n  const result = [toUpper(type), literalToSQL(grant_option_for)]\n  const objStr = objects.map(obj => {\n    const { priv, columns } = obj\n    const privSQL = [exprToSQL(priv)]\n    if (columns) privSQL.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n    return privSQL.join(' ')\n  }).join(', ')\n  result.push(objStr)\n  if (on) {\n    result.push('ON')\n    switch (keyword) {\n      case 'priv':\n        result.push(\n          literalToSQL(on.object_type),\n          on.priv_level.map(privLevel => [identifierToSql(privLevel.prefix), identifierToSql(privLevel.name)].filter(hasVal).join('.')).join(', ')\n        )\n        break\n      case 'proxy':\n        result.push(grantUserOrRoleToSQL(on))\n        break\n    }\n  }\n  result.push(toUpper(to_from), user_or_roles.map(grantUserOrRoleToSQL).join(', '))\n  result.push(literalToSQL(withOpt))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  ifToSQL,\n  raiseToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  ifToSQL,\n  useToSQL,\n  raiseToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { procToSQL } from './proc'\nimport { showToSQL } from './show'\nimport { hasVal, toUpper } from './util'\n\nconst typeToSQLFn = {\n  alter      : alterToSQL,\n  analyze    : analyzeToSQL,\n  attach     : attachToSQL,\n  create     : createToSQL,\n  select     : selectToSQL,\n  deallocate : deallocateToSQL,\n  delete     : deleteToSQL,\n  exec       : execToSQL,\n  execute    : executeToSQL,\n  for        : forLoopToSQL,\n  update     : updateToSQL,\n  if         : ifToSQL,\n  insert     : insertToSQL,\n  drop       : commonCmdToSQL,\n  truncate   : commonCmdToSQL,\n  replace    : insertToSQL,\n  declare    : declareToSQL,\n  use        : useToSQL,\n  rename     : renameToSQL,\n  call       : callToSQL,\n  desc       : descToSQL,\n  set        : setVarToSQL,\n  lock       : lockUnlockToSQL,\n  unlock     : lockUnlockToSQL,\n  show       : showToSQL,\n  grant      : grantAndRevokeToSQL,\n  revoke     : grantAndRevokeToSQL,\n  proc       : procToSQL,\n  raise      : raiseToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  if (!stmt) return ''\n  const fun = typeToSQLFn[stmt.type]\n  const { _parentheses, _orderby, _limit } = stmt\n  const res = [_parentheses && '(', fun(stmt)]\n  while (stmt._next) {\n    const nextFun = typeToSQLFn[stmt._next.type]\n    const unionKeyword = toUpper(stmt.set_op)\n    res.push(unionKeyword, nextFun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(_parentheses && ')', orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\nimport { withToSQL } from './with'\n\nfunction deleteToSQL(stmt) {\n  const { columns, from, table, where, orderby, with: withInfo, limit } = stmt\n  const clauses = [withToSQL(withInfo), 'DELETE']\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { assignToSQL } from './assign'\nimport { exprToSQL } from './expr'\nimport { toUpper } from './util'\n\nfunction returnToSQL(stmt) {\n  const { type, expr } = stmt\n  return [toUpper(type), exprToSQL(expr)].join(' ')\n}\n\nfunction procToSQL(expr) {\n  const { stmt } = expr\n  switch (stmt.type) {\n    case 'assign':\n      return assignToSQL(stmt)\n    case 'return':\n      return returnToSQL(stmt)\n  }\n}\n\nexport {\n  procToSQL,\n  returnToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonOptionConnector, commonTypeValue, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction anyValueFuncToSQL(stmt) {\n  const { args, type, over } = stmt\n  const { expr, having } = args\n  let sql = `${toUpper(type)}(${exprToSQL(expr)}`\n  if (having) sql = `${sql} HAVING ${toUpper(having.prefix)} ${exprToSQL(having.expr)}`\n  sql = `${sql})`\n  const overStr = overToSQL(over)\n  return [sql, overStr].filter(hasVal).join(' ')\n}\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { arrows = [], collate, target, expr: expression, keyword, symbol, as: alias, tail, properties = [] } = expr\n  const { length, dataType, parentheses, quoted, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `${toUpper(keyword)}(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  suffix += arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' ')\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  const result = [prefix, symbolChar, quoted, dataType, quoted, arrayDimension, str, suffix]\n  return result.filter(hasVal).join('')\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction flattenArgToSQL(arg) {\n  if (!arg) return ''\n  const { type, symbol, value } = arg\n  const result = [toUpper(type), symbol, exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction flattenFunToSQL(stmt) {\n  const { args, type } = stmt\n  const keys = ['input', 'path', 'outer', 'recursive', 'mode']\n  const argsStr = keys.map(key => flattenArgToSQL(args[key])).filter(hasVal).join(', ')\n  return `${toUpper(type)}(${argsStr})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses, parentheses, over, collate, suffix } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  const suffixStr = exprToSQL(suffix)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = expr.separator || ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = [str.join(''), suffixStr].filter(hasVal).join(' ')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  anyValueFuncToSQL,\n  castToSQL,\n  extractFunToSQL,\n  flattenFunToSQL,\n  funcToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { selectToSQL } from './select'\nimport { dataTypeToSQL, hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n    case 'schema':\n      name = identifierToSql(expr[resource])\n      break\n    case 'aggregate':\n    case 'function':\n    case 'domain':\n    case 'type':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nfunction alterTableToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterViewToSQL(stmt) {\n  const { type, columns, attributes, select, view, with: withExpr } = stmt\n  const action = toUpper(type)\n  const viewName = tableToSQL(view)\n  const result = [action, 'VIEW', viewName]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  if (attributes) result.push(`WITH ${attributes.map(toUpper).join(', ')}`)\n  result.push('AS', selectToSQL(select))\n  if (withExpr) result.push(toUpper(withExpr))\n  return result.filter(hasVal).join(' ')\n}\nfunction alterArgsToSQL(arg) {\n  const defaultSQL = arg.default && [toUpper(arg.default.keyword), exprToSQL(arg.default.value)].join(' ')\n  return [toUpper(arg.mode), arg.name, dataTypeToSQL(arg.type), defaultSQL].filter(hasVal).join(' ')\n}\n\nfunction alterSchemaToSQL(stmt) {\n  const { expr, keyword, schema, type } = stmt\n  const result = [toUpper(type), toUpper(keyword), identifierToSql(schema), alterExprToSQL(expr)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterDomainTypeToSQL(stmt) {\n  const { expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterFunctionToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      args && `(${args.expr ? args.expr.map(alterArgsToSQL).join(', ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterAggregateToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const { expr: argsExpr, orderby } = args\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      `(${argsExpr.map(alterArgsToSQL).join(', ')}${orderby ? [' ORDER', 'BY', orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterToSQL(stmt) {\n  const { keyword = 'table' } = stmt\n  switch (keyword) {\n    case 'aggregate':\n      return alterAggregateToSQL(stmt)\n    case 'table':\n      return alterTableToSQL(stmt)\n    case 'schema':\n      return alterSchemaToSQL(stmt)\n    case 'domain':\n    case 'type':\n      return alterDomainTypeToSQL(stmt)\n    case 'function':\n      return alterFunctionToSQL(stmt)\n    case 'view':\n      return alterViewToSQL(stmt)\n  }\n}\n\nexport {\n  alterArgsToSQL,\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), toUpper(type)]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n    on, with: withExpr,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  if (withExpr) dataType.push(`WITH (${indexOptionListToSQL(withExpr).join(', ')})`)\n  if (on) dataType.push(`ON [${on}]`)\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const { keyword, index } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction forXmlToSQL(stmt) {\n  if (!stmt) return\n  const { expr, keyword, type } = stmt\n  const result = [toUpper(type), toUpper(keyword)]\n  if (!expr) return result.join(' ')\n  return `${result.join(' ')}(${exprToSQL(expr)})`\n}\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    for: forXml,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  clauses.push(forXmlToSQL(forXml))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\nimport { withToSQL } from './with'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { from, table, set, where, orderby, with: withInfo, limit, returning } = stmt\n  const clauses = [\n    withToSQL(withInfo),\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { alterArgsToSQL, alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { setToSQL } from './update'\nimport { multipleToSQL, unionToSQL } from './union'\nimport {\n  columnIdentifierToSql,\n  columnOrderListToSQL,\n  commonOptionConnector,\n  commonKeywordArgsToSQL,\n  commonTypeValue,\n  dataTypeToSQL,\n  toUpper,\n  hasVal,\n  identifierToSql,\n  triggerEventToSQL,\n  literalToSQL,\n} from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    definer, for_each: forEach, keyword,\n    execute: triggerBody,\n    type, table, if_not_exists: ife,\n    temporary, trigger, events: triggerEvents,\n    order: triggerOrder, time: triggerTime, when,\n  } = stmt\n  const sql = [\n    toUpper(type), toUpper(temporary), definer, toUpper(keyword),\n    toUpper(ife), tableToSQL(trigger),\n    toUpper(triggerTime),\n    triggerEvents.map(event => {\n      const eventStr = [toUpper(event.keyword)]\n      const { args } = event\n      if (args) eventStr.push(toUpper(args.keyword), args.columns.map(columnRefToSQL).join(', '))\n      return eventStr.join(' ')\n    }),\n    'ON', tableToSQL(table), toUpper(forEach && forEach.keyword), toUpper(forEach && forEach.args),\n    triggerOrder && `${toUpper(triggerOrder.keyword)} ${identifierToSql(triggerOrder.trigger)}`,\n    commonOptionConnector('WHEN', exprToSQL, when),\n    toUpper(triggerBody.prefix),\n  ]\n  switch (triggerBody.type) {\n    case 'set':\n      sql.push(commonOptionConnector('SET', setToSQL, triggerBody.expr))\n      break\n    case 'multiple':\n      sql.push(multipleToSQL(triggerBody.expr.ast))\n      break\n  }\n  sql.push(toUpper(triggerBody.suffix))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createConstraintTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    or,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(or), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    recursive, replace, select, sql_security: sqlSecurity,\n    temporary, type, view, with: withClause, with_options: withOptions,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    toUpper(temporary),\n    toUpper(recursive),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    withOptions && ['WITH', `(${withOptions.map(withOpt => commonTypeValue(withOpt).join(' ')).join(', ')})`].join(' '),\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDomainToSQL(stmt) {\n  const {\n    as, domain, type, keyword, target,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(domain.schema), identifierToSql(domain.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    dataTypeToSQL(target),\n  ]\n  if (createDefinition && createDefinition.length > 0) {\n    const definitionSQL = []\n    for (const definition of createDefinition) {\n      const definitionType = definition.type\n      switch (definitionType) {\n        case 'collate':\n          definitionSQL.push(commonTypeValue(definition).join(' '))\n          break\n        case 'default':\n          definitionSQL.push(toUpper(definitionType), exprToSQL(definition.value))\n          break\n        case 'constraint':\n          definitionSQL.push(constraintDefinitionToSQL(definition))\n          break\n      }\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTypeToSQL(stmt) {\n  const { as, create_definitions: createDefinition, keyword, name, resource, type } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    toUpper(resource),\n  ]\n  if (createDefinition) {\n    const definitionSQL = []\n    switch (resource) {\n      case 'enum':\n        definitionSQL.push(exprToSQL(createDefinition))\n        break\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createFunctionReturnsOptToSQL(stmt) {\n  if (stmt.dataType) return dataTypeToSQL(stmt)\n  return [identifierToSql(stmt.db), identifierToSql(stmt.schema), identifierToSql(stmt.table)].filter(hasVal).join('.')\n}\n\nfunction createFunctionReturnsToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    Array.isArray(expr) ? `(${expr.map(columnDefinitionToSQL).join(', ')})` : createFunctionReturnsOptToSQL(expr),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\nfunction createFunctionOptionToSQL(stmt) {\n  const { type } = stmt\n  switch (type) {\n    case 'as':\n      return [toUpper(type), stmt.symbol, unionToSQL(stmt.declare), toUpper(stmt.begin), multipleToSQL(stmt.expr), toUpper(stmt.end), stmt.symbol].filter(hasVal).join(' ')\n    case 'set':\n      return [toUpper(type), stmt.parameter, toUpper(stmt.value && stmt.value.prefix), stmt.value && stmt.value.expr.map(exprToSQL).join(', ')].filter(hasVal).join(' ')\n    default:\n      return exprToSQL(stmt)\n  }\n}\nfunction createFunctionToSQL(stmt) {\n  const { type, replace, keyword, name, args, returns, options, last } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = args.map(alterArgsToSQL).filter(hasVal).join(', ')\n  sql.push(`${functionName}(${argsSQL})`, createFunctionReturnsToSQL(returns), options.map(createFunctionOptionToSQL).join(' '), last)\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction aggregateOptionToSQL(stmt) {\n  const { type, symbol, value } = stmt\n  const sql = [toUpper(type), symbol]\n  switch (toUpper(type)) {\n    case 'SFUNC':\n      sql.push([identifierToSql(value.schema), value.name].filter(hasVal).join('.'))\n      break\n    case 'STYPE':\n    case 'MSTYPE':\n      sql.push(dataTypeToSQL(value))\n      break\n    default:\n      sql.push(exprToSQL(value))\n      break\n  }\n  return sql.filter(hasVal).join(' ')\n}\nfunction createAggregateToSQL(stmt) {\n  const { type, replace, keyword, name, args, options } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = `${args.expr.map(alterArgsToSQL).join(', ')}${args.orderby ? [' ORDER', 'BY', args.orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''}`\n  sql.push(`${functionName}(${argsSQL})`, `(${options.map(aggregateOptionToSQL).join(', ')})`)\n  return sql.filter(hasVal).join(' ')\n}\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'aggregate':\n      sql = createAggregateToSQL(stmt)\n      break\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = stmt.resource === 'constraint' ? createConstraintTriggerToSQL(stmt) : createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'function':\n      sql = createFunctionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    case 'domain':\n      sql = createDomainToSQL(stmt)\n      break\n    case 'type':\n      sql = createTypeToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { unionToSQL, multipleToSQL } from './union'\n\nconst supportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'declare', 'show', 'replace', 'if', 'grant', 'revoke', 'proc', 'raise', 'execute']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!supportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { columnRefToSQL } from './column'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL, literalToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction conflictTargetToSQL(conflictTarget) {\n  if (!conflictTarget) return ''\n  const { type } = conflictTarget\n  switch (type) {\n    case 'column':\n      return `(${conflictTarget.expr.map(columnRefToSQL).join(', ')})`\n  }\n}\n\nfunction conflictActionToSQL(conflictAction) {\n  const { expr, keyword } = conflictAction\n  const { type } = expr\n  const result = [toUpper(keyword)]\n  switch (type) {\n    case 'origin':\n      result.push(literalToSQL(expr))\n      break\n    case 'update':\n      result.push('UPDATE', commonOptionConnector('SET', setToSQL, expr.set), commonOptionConnector('WHERE', exprToSQL, expr.where))\n      break\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction conflictToSQL(conflict) {\n  if (!conflict) return ''\n  const { action, target } = conflict\n  const result = [conflictTargetToSQL(target), conflictActionToSQL(action)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    conflict,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('ON CONFLICT', conflictToSQL, conflict))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  conflictToSQL,\n  insertToSQL,\n  valuesToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let operator = expr.operator || expr.op\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL, varToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  let { keyword } = showExpr\n  const { suffix } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'COLUMNS':\n    case 'INDEXES':\n      str = commonOptionConnector('FROM', tablesToSQL, showExpr.from)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr[suffix])\n      break\n    case 'VAR':\n      str = varToSQL(showExpr.var)\n      keyword = ''\n      break\n    default:\n      break\n  }\n  return ['SHOW', toUpper(keyword), toUpper(suffix), str].filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { exprToSQL } from './expr'\nimport parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  exprToSQL(expr, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return exprToSQL(expr)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = function(t, l, f, w, or, lc) {\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'update'\n              tableList.add(`${action}::${db}::${table}`)\n            });\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`update::${info.db}::${info.table}`);\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                orderby: or,\n                limit: lc,\n              }\n            };\n          },\n      peg$c3 = function(t, f, w, or, l) {\n            if(t) t.forEach(tt => tableList.add(`delete::${tt.db}::${tt.table}`));\n           if(f) f.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'delete'\n              if (table) tableList.add(`${action}::${db}::${table}`)\n              if (!join) columnList.add(`delete::${table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w,\n                orderby: or,\n                limit: l,\n              }\n            };\n          },\n      peg$c4 = function(ri, t, p, c, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c5 = function(ri, ig, it, t, p, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c6 = function(ri, t, p, l, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                partition: p,\n                set: l,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c7 = function() { varList = []; return true; },\n      peg$c8 = function(s) {\n            return { stmt: s, vars: varList };\n          },\n      peg$c9 = function(va, s, e) {\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c10 = function(e) {\n            return { type: 'return', expr: e };\n          },\n      peg$c11 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c12 = function(lt, op, rt, expr) {\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c13 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c14 = function(name, l) {\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c15 = function(name) {\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c16 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c17 = function(l) {\n          return { type: 'array', value: l };\n        },\n      peg$c18 = \"=\",\n      peg$c19 = peg$literalExpectation(\"=\", false),\n      peg$c20 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0] };\n        },\n      peg$c21 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c22 = function() { return 'insert'; },\n      peg$c23 = function() { return 'replace'; },\n      peg$c24 = function(head, tail) {\n            return createList(head, tail)\n          },\n      peg$c25 = function(v) {\n          return v\n        },\n      peg$c26 = \"duplicate\",\n      peg$c27 = peg$literalExpectation(\"DUPLICATE\", true),\n      peg$c28 = function(s) {\n          return {\n            keyword: 'on duplicate key update',\n            set: s\n          }\n        },\n      peg$c29 = function(a, t) {\n            tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                table: t\n              }\n            };\n          },\n      peg$c30 = function(a, db, e, as, schema) {\n            // tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                database: db,\n                expr: e,\n                as: as && as[0].toLowerCase(),\n                schema,\n              }\n            };\n          },\n      peg$c31 = function(a, r, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c32 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c33 = function(a, kw, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c34 = function(t) {\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c35 = function(e) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c36 = function(d) {\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c37 = function(kw, a) {\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c38 = function(ltl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: 'tables',\n              tables: ltl\n            }\n          }\n        },\n      peg$c39 = function() {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'unlock',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c40 = \"binary\",\n      peg$c41 = peg$literalExpectation(\"BINARY\", true),\n      peg$c42 = \"master\",\n      peg$c43 = peg$literalExpectation(\"MASTER\", true),\n      peg$c44 = \"logs\",\n      peg$c45 = peg$literalExpectation(\"LOGS\", true),\n      peg$c46 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'logs',\n              keyword: t.toLowerCase()\n            }\n          }\n        },\n      peg$c47 = \"binlog\",\n      peg$c48 = peg$literalExpectation(\"BINLOG\", true),\n      peg$c49 = \"events\",\n      peg$c50 = peg$literalExpectation(\"EVENTS\", true),\n      peg$c51 = function(ins, from, limit) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'events',\n              keyword: 'binlog',\n              in: ins,\n              from,\n              limit,\n            }\n          }\n        },\n      peg$c52 = \"character\",\n      peg$c53 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c54 = \"set\",\n      peg$c55 = peg$literalExpectation(\"SET\", true),\n      peg$c56 = \"collation\",\n      peg$c57 = peg$literalExpectation(\"COLLATION\", true),\n      peg$c58 = function(k, e) {\n          let keyword = Array.isArray(k) && k || [k]\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: keyword[2] && keyword[2].toLowerCase(),\n              keyword: keyword[0].toLowerCase(),\n              expr: e\n            }\n          }\n        },\n      peg$c59 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'desc',\n              table: t\n            }\n          };\n        },\n      peg$c60 = function(p, d) {\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c61 = function(name, m) {\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c62 = function(n) {\n          return {\n            type: 'var',\n            name: n.value,\n            members: [],\n            quoted: null,\n            prefix: null,\n          }\n        },\n      peg$c63 = function(l) {\n            return l;\n          },\n      peg$c64 = function(l) { return l; },\n      peg$c65 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c66 = \"if\",\n      peg$c67 = peg$literalExpectation(\"IF\", true),\n      peg$c68 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c69 = function(a, tp, ife, t, c, con, to, ir, as, qe) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n      \t\t      constraint : con,\n                table_options: to\n              }\n            }\n          },\n      peg$c70 = function(a, tp, ife, t, lt) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c71 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists:ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c72 = function(t, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c73 = function(head, tail) {\n          return createList(head, tail);\n        },\n      peg$c74 = \"grants\",\n      peg$c75 = peg$literalExpectation(\"GRANTS\", true),\n      peg$c76 = function(f) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              keyword: 'grants',\n              for: f,\n            }\n          }\n        },\n      peg$c77 = \".\",\n      peg$c78 = peg$literalExpectation(\".\", false),\n      peg$c79 = function(l) {\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c80 = \"algorithm\",\n      peg$c81 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c82 = \"default\",\n      peg$c83 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c84 = \"instant\",\n      peg$c85 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c86 = \"inplace\",\n      peg$c87 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c88 = \"copy\",\n      peg$c89 = peg$literalExpectation(\"COPY\", true),\n      peg$c90 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c91 = \"lock\",\n      peg$c92 = peg$literalExpectation(\"LOCK\", true),\n      peg$c93 = \"none\",\n      peg$c94 = peg$literalExpectation(\"NONE\", true),\n      peg$c95 = \"shared\",\n      peg$c96 = peg$literalExpectation(\"SHARED\", true),\n      peg$c97 = \"exclusive\",\n      peg$c98 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c99 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c100 = \"auto_increment\",\n      peg$c101 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c102 = \"unique\",\n      peg$c103 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c104 = \"primary\",\n      peg$c105 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c106 = \"key\",\n      peg$c107 = peg$literalExpectation(\"KEY\", true),\n      peg$c108 = function(c, d, n, df, a, u, co, ca, cf, s, re) {\n            columnList.add(`create::${c.table}::${c.column}`)\n            if (n && !n.value) n.value = 'null'\n            return {\n              column: c,\n              definition: d,\n              nullable: n,\n              default_val: df,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: u && `${u[0].toLowerCase()} ${u[2].toLowerCase()}`,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c109 = function(head, tail) {\n          return createList(head, tail)\n        },\n      peg$c110 = function(e) {\n            e.parentheses = true;\n            return e;\n        },\n      peg$c111 = function(t, lt) {\n          tableList.add(`lock::${t.db}::${t.table}`)\n          return {\n            table: t,\n            lock_type: lt\n          }\n        },\n      peg$c112 = \"for\",\n      peg$c113 = peg$literalExpectation(\"FOR\", true),\n      peg$c114 = function(n, h, u) {\n          return {\n            user: n,\n            host: h && h[2],\n            role_list: u\n          }\n        },\n      peg$c115 = function(kc, c, t, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c116 = function(p, kc, c, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c117 = function(ce) {\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c118 = function(k, s, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c119 = function(s, ca) {\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c120 = \"column_format\",\n      peg$c121 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c122 = \"fixed\",\n      peg$c123 = peg$literalExpectation(\"FIXED\", true),\n      peg$c124 = \"dynamic\",\n      peg$c125 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c126 = function(k, f) {\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c127 = \"storage\",\n      peg$c128 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c129 = \"disk\",\n      peg$c130 = peg$literalExpectation(\"DISK\", true),\n      peg$c131 = \"memory\",\n      peg$c132 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c133 = function(k, s) {\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c134 = \"match full\",\n      peg$c135 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c136 = \"match partial\",\n      peg$c137 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c138 = \"match simple\",\n      peg$c139 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c140 = function(kc, t, de, m, od, ou) {\n          const on_action = []\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match: m && m.toLowerCase(),\n              on_action: [od, ou].filter(v => v)\n            }\n        },\n      peg$c141 = function(oa) {\n          return {\n            on_action: [oa]\n          }\n        },\n      peg$c142 = \"avg_row_length\",\n      peg$c143 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c144 = \"key_block_size\",\n      peg$c145 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c146 = \"max_rows\",\n      peg$c147 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c148 = \"min_rows\",\n      peg$c149 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c150 = \"stats_sample_pages\",\n      peg$c151 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c152 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c153 = \"connection\",\n      peg$c154 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c155 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c156 = \"compression\",\n      peg$c157 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c158 = \"'\",\n      peg$c159 = peg$literalExpectation(\"'\", false),\n      peg$c160 = \"zlib\",\n      peg$c161 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c162 = \"lz4\",\n      peg$c163 = peg$literalExpectation(\"LZ4\", true),\n      peg$c164 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c165 = \"engine\",\n      peg$c166 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c167 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c168 = function(t) {\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c169 = \"charset\",\n      peg$c170 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c171 = \"collate\",\n      peg$c172 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c173 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c174 = \"read\",\n      peg$c175 = peg$literalExpectation(\"READ\", true),\n      peg$c176 = \"local\",\n      peg$c177 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c178 = function(s) {\n          return {\n            type: 'read',\n            suffix: s && 'local'\n          }\n        },\n      peg$c179 = \"low_priority\",\n      peg$c180 = peg$literalExpectation(\"LOW_PRIORITY\", true),\n      peg$c181 = \"write\",\n      peg$c182 = peg$literalExpectation(\"WRITE\", true),\n      peg$c183 = function(p) {\n          return {\n            type: 'write',\n            prefix: p && 'low_priority'\n          }\n        },\n      peg$c184 = function(l) {\n          return l\n        },\n      peg$c185 = function(kc, p, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: `${p[0].toLowerCase()} ${p[2].toLowerCase()}`,\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c186 = function(kc, u, p, i, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c187 = \"foreign key\",\n      peg$c188 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c189 = function(kc, p, i, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c190 = \"check\",\n      peg$c191 = peg$literalExpectation(\"CHECK\", true),\n      peg$c192 = \"not\",\n      peg$c193 = peg$literalExpectation(\"NOT\", true),\n      peg$c194 = \"replication\",\n      peg$c195 = peg$literalExpectation(\"REPLICATION\", true),\n      peg$c196 = function(kc, u, nfr, c) {\n          return {\n              constraint_type: u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              constraint: kc && kc.constraint,\n              index_type: nfr && { keyword: 'not for replication' },\n              definition: [c],\n              resource: 'constraint',\n            }\n        },\n      peg$c197 = \"btree\",\n      peg$c198 = peg$literalExpectation(\"BTREE\", true),\n      peg$c199 = \"hash\",\n      peg$c200 = peg$literalExpectation(\"HASH\", true),\n      peg$c201 = function(t) {\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c202 = function(head, tail) {\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c203 = function(k, e, kbs) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          };\n        },\n      peg$c204 = \"with\",\n      peg$c205 = peg$literalExpectation(\"WITH\", true),\n      peg$c206 = \"parser\",\n      peg$c207 = peg$literalExpectation(\"PARSER\", true),\n      peg$c208 = function(pn) {\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c209 = \"visible\",\n      peg$c210 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c211 = \"invisible\",\n      peg$c212 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c213 = function(k) {\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c214 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: `on ${kw[0].toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c215 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c216 = function(kc, cd) {\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c217 = function(kc, c) {\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c218 = function(kw, tn) {\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c219 = function(kc, c) {\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c220 = function(kw, l) {\n          return {\n            type: 'function',\n            name: kw,\n            args: l\n          }\n        },\n      peg$c221 = \"restrict\",\n      peg$c222 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c223 = \"cascade\",\n      peg$c224 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c225 = \"set null\",\n      peg$c226 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c227 = \"no action\",\n      peg$c228 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c229 = \"set default\",\n      peg$c230 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c231 = function(kc) {\n          return {\n            type: 'origin',\n            value: kc.toLowerCase()\n          }\n        },\n      peg$c232 = \"update\",\n      peg$c233 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c234 = \"create\",\n      peg$c235 = peg$literalExpectation(\"CREATE\", true),\n      peg$c236 = \"delete\",\n      peg$c237 = peg$literalExpectation(\"DELETE\", true),\n      peg$c238 = \"insert\",\n      peg$c239 = peg$literalExpectation(\"INSERT\", true),\n      peg$c240 = \":=\",\n      peg$c241 = peg$literalExpectation(\":=\", false),\n      peg$c242 = \"return\",\n      peg$c243 = peg$literalExpectation(\"return\", true),\n      peg$c244 = \"replace\",\n      peg$c245 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c246 = \"analyze\",\n      peg$c247 = peg$literalExpectation(\"ANALYZE\", true),\n      peg$c248 = \"attach\",\n      peg$c249 = peg$literalExpectation(\"ATTACH\", true),\n      peg$c250 = \"database\",\n      peg$c251 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c252 = \"rename\",\n      peg$c253 = peg$literalExpectation(\"RENAME\", true),\n      peg$c254 = \"show\",\n      peg$c255 = peg$literalExpectation(\"SHOW\", true),\n      peg$c256 = \"describe\",\n      peg$c257 = peg$literalExpectation(\"DESCRIBE\", true),\n      peg$c258 = \"@\",\n      peg$c259 = peg$literalExpectation(\"@\", false),\n      peg$c260 = \"@@\",\n      peg$c261 = peg$literalExpectation(\"@@\", false),\n      peg$c262 = \"$\",\n      peg$c263 = peg$literalExpectation(\"$\", false),\n      peg$c264 = \"temporary\",\n      peg$c265 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c266 = \"schema\",\n      peg$c267 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c268 = \"alter\",\n      peg$c269 = peg$literalExpectation(\"ALTER\", true),\n      peg$c270 = \"spatial\",\n      peg$c271 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c272 = \"(\",\n      peg$c273 = peg$literalExpectation(\"(\", false),\n      peg$c274 = \")\",\n      peg$c275 = peg$literalExpectation(\")\", false),\n      peg$c276 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c277 = function(s, o, l) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              ...s.ast,\n              _orderby: o,\n              _limit: l,\n              _parentheses: s._parentheses\n            }\n          }\n        },\n      peg$c278 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c279 = \"intersect\",\n      peg$c280 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c281 = \"except\",\n      peg$c282 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c283 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c284 = function(s) {\n            return {\n              ...s[2],\n              _parentheses: true\n            }\n          },\n      peg$c285 = function(head, tail, ob, l) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.set_op = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c286 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c287 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c288 = function(cte, sv, d, c, f, fs, w, g, h, q, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                qualify: q,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c289 = \"system_time\",\n      peg$c290 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c291 = \"as\",\n      peg$c292 = peg$literalExpectation(\"AS\", true),\n      peg$c293 = \"of\",\n      peg$c294 = peg$literalExpectation(\"OF\", true),\n      peg$c295 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c296 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c297 = function(e, alias) {\n            return { expr: e, as: alias };\n          },\n      peg$c298 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c299 = function(head, tail) {\n            columnList.add('select::null::(.*)')\n            const item = {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            }\n            if (tail && tail.length > 0) return createList(item, tail)\n            return [item]\n          },\n      peg$c300 = function(c) {\n          return c\n        },\n      peg$c301 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c302 = function(tbl) {\n            columnList.add('select::null::(.*)');\n            return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c303 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c304 = function(c, as) {\n          columnList.add(`select::null::${c}`)\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c305 = function(i) { return i; },\n      peg$c306 = \"unnest\",\n      peg$c307 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c308 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c309 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c310 = function(a, c, i, as) {\n          i.operator = '='\n          return {\n            'type': 'pivot',\n            'expr': a,\n            column: c,\n            in_expr: i,\n            as,\n          }\n        },\n      peg$c311 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c312 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c313 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c314 = function(t) { return t; },\n      peg$c315 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c316 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c317 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c318 = /^[@]/,\n      peg$c319 = peg$classExpectation([\"@\"], false, false),\n      peg$c320 = /^[{]/,\n      peg$c321 = peg$classExpectation([\"{\"], false, false),\n      peg$c322 = /^[=]/,\n      peg$c323 = peg$classExpectation([\"=\"], false, false),\n      peg$c324 = /^[}]/,\n      peg$c325 = peg$classExpectation([\"}\"], false, false),\n      peg$c326 = \"tablesample\",\n      peg$c327 = peg$literalExpectation(\"TABLESAMPLE\", true),\n      peg$c328 = \"bernoulli\",\n      peg$c329 = peg$literalExpectation(\"BERNOULLI\", true),\n      peg$c330 = \"reservoir\",\n      peg$c331 = peg$literalExpectation(\"RESERVOIR\", true),\n      peg$c332 = \"percent\",\n      peg$c333 = peg$literalExpectation(\"PERCENT\", true),\n      peg$c334 = \"rows\",\n      peg$c335 = peg$literalExpectation(\"ROWS\", true),\n      peg$c336 = function(t, ht, ts, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            }\n            return {\n              ...t,\n              as: alias\n            };\n          },\n      peg$c337 = function(stmt, ts, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c338 = function() { return 'LEFT JOIN'; },\n      peg$c339 = function() { return 'RIGHT JOIN'; },\n      peg$c340 = function() { return 'FULL JOIN'; },\n      peg$c341 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c342 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c343 = function(db, schema, tail) {\n            const obj = { db: null, table: db };\n            if (tail !== null) {\n              obj.db = db;\n              obj.catalog = db;\n              obj.schema = schema[3];\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c344 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c345 = function(e) { return e; },\n      peg$c346 = function(e) { return e.value; },\n      peg$c347 = function(e) { return e },\n      peg$c348 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c349 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c350 = function(n) { return n },\n      peg$c351 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c352 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c353 = \"range\",\n      peg$c354 = peg$literalExpectation(\"RANGE\", true),\n      peg$c355 = \"unbounded\",\n      peg$c356 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c357 = \"preceding\",\n      peg$c358 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c359 = \"current\",\n      peg$c360 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c361 = \"ROW\",\n      peg$c362 = peg$literalExpectation(\"ROW\", false),\n      peg$c363 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c364 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c365 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c366 = \"following\",\n      peg$c367 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c368 = function(s, c) {\n          // => string\n          s.value += ` ${c.toUpperCase()}`\n          return s\n        },\n      peg$c369 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c370 = \"row\",\n      peg$c371 = peg$literalExpectation(\"ROW\", true),\n      peg$c372 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c373 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c374 = function(bc) { return bc; },\n      peg$c375 = function(e, c, d) {\n          const obj = { expr: e, type: d };\n          return obj;\n        },\n      peg$c376 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c377 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c378 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c379 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c380 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c381 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c382 = function(head, tail, rh) {\n          const logicExpr = createBinaryExprChain(head, tail)\n          if (rh === null) return logicExpr\n          else if (rh.type === 'arithmetic') return createBinaryExprChain(logicExpr, rh.tail)\n          else return createBinaryExpr(rh.op, logicExpr, rh.right)\n        },\n      peg$c383 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c384 = function(head, tail) {\n          const ast = head.ast\n          if (ast && ast.type === 'select') {\n            if (!(head.parentheses_symbol || head.parentheses || head.ast.parentheses || head.ast.parentheses_symbol) || ast.columns.length !== 1 || ast.columns[0].expr.column === '*') throw new Error('invalid column clause with select statement')\n          }\n          if (!tail || tail.length === 0) return head\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c385 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c386 = \"!\",\n      peg$c387 = peg$literalExpectation(\"!\", false),\n      peg$c388 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c389 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c390 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c391 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c392 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c393 = \">=\",\n      peg$c394 = peg$literalExpectation(\">=\", false),\n      peg$c395 = \">\",\n      peg$c396 = peg$literalExpectation(\">\", false),\n      peg$c397 = \"<=\",\n      peg$c398 = peg$literalExpectation(\"<=\", false),\n      peg$c399 = \"<>\",\n      peg$c400 = peg$literalExpectation(\"<>\", false),\n      peg$c401 = \"<\",\n      peg$c402 = peg$literalExpectation(\"<\", false),\n      peg$c403 = \"!=\",\n      peg$c404 = peg$literalExpectation(\"!=\", false),\n      peg$c405 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c406 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c407 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c408 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c409 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c410 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c411 = \"+\",\n      peg$c412 = peg$literalExpectation(\"+\", false),\n      peg$c413 = \"-\",\n      peg$c414 = peg$literalExpectation(\"-\", false),\n      peg$c415 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c416 = \"*\",\n      peg$c417 = peg$literalExpectation(\"*\", false),\n      peg$c418 = \"/\",\n      peg$c419 = peg$literalExpectation(\"/\", false),\n      peg$c420 = \"%\",\n      peg$c421 = peg$literalExpectation(\"%\", false),\n      peg$c422 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c423 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c424 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c425 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c426 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c427 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c428 = function(tbl, col) {\n            const cols = col.map(c => c[3])\n            columnList.add(`select::${tbl}::${cols[0]}`)\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: cols[0],\n              subFields: cols.slice(1)\n            };\n          },\n      peg$c429 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c430 = function(name) { return reservedMap[`${name}`.toUpperCase()] === true; },\n      peg$c431 = function(name) {\n            return name;\n          },\n      peg$c432 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c433 = \"\\\"\",\n      peg$c434 = peg$literalExpectation(\"\\\"\", false),\n      peg$c435 = /^[^\"]/,\n      peg$c436 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c437 = function(chars) { return chars.join(''); },\n      peg$c438 = /^[^']/,\n      peg$c439 = peg$classExpectation([\"'\"], true, false),\n      peg$c440 = \"`\",\n      peg$c441 = peg$literalExpectation(\"`\", false),\n      peg$c442 = /^[^`]/,\n      peg$c443 = peg$classExpectation([\"`\"], true, false),\n      peg$c444 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c445 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c446 = function(name) { return name; },\n      peg$c447 = function(start, parts) { return start + parts.join(''); },\n      peg$c448 = /^[A-Za-z_]/,\n      peg$c449 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c450 = /^[A-Za-z0-9_\\-]/,\n      peg$c451 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c452 = /^[A-Za-z0-9_:\\-]/,\n      peg$c453 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\", \"-\"], false, false),\n      peg$c454 = \":\",\n      peg$c455 = peg$literalExpectation(\":\", false),\n      peg$c456 = function(s, n) {\n            return { type: 'param', value: n, prefix: s };\n          },\n      peg$c457 = function(head, as, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n        },\n      peg$c458 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc,\n            };\n          },\n      peg$c459 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c460 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c461 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c462 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c463 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c464 = function(e) { return { expr: e }; },\n      peg$c465 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c466 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: false }; },\n      peg$c467 = function() { return { type: 'star', value: '*' }; },\n      peg$c468 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c469 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c470 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c471 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              tail.forEach(t => name = `${name}.${t[3]}`)\n            }\n            return name;\n          },\n      peg$c472 = function(i, e) {\n          return {\n            prefix: i,\n            expr: e\n          }\n        },\n      peg$c473 = \"any_value\",\n      peg$c474 = peg$literalExpectation(\"ANY_VALUE\", true),\n      peg$c475 = function(e, h, bc) {\n          return {\n              type: 'any_value',\n              args: {\n                expr: e,\n                having: h\n              },\n              over: bc\n          }\n        },\n      peg$c476 = \"century\",\n      peg$c477 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c478 = \"day\",\n      peg$c479 = peg$literalExpectation(\"DAY\", true),\n      peg$c480 = \"date\",\n      peg$c481 = peg$literalExpectation(\"DATE\", true),\n      peg$c482 = \"decade\",\n      peg$c483 = peg$literalExpectation(\"DECADE\", true),\n      peg$c484 = \"dow\",\n      peg$c485 = peg$literalExpectation(\"DOW\", true),\n      peg$c486 = \"doy\",\n      peg$c487 = peg$literalExpectation(\"DOY\", true),\n      peg$c488 = \"epoch\",\n      peg$c489 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c490 = \"hour\",\n      peg$c491 = peg$literalExpectation(\"HOUR\", true),\n      peg$c492 = \"isodow\",\n      peg$c493 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c494 = \"isoweek\",\n      peg$c495 = peg$literalExpectation(\"ISOWEEK\", true),\n      peg$c496 = \"isoyear\",\n      peg$c497 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c498 = \"microseconds\",\n      peg$c499 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c500 = \"millennium\",\n      peg$c501 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c502 = \"milliseconds\",\n      peg$c503 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c504 = \"minute\",\n      peg$c505 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c506 = \"month\",\n      peg$c507 = peg$literalExpectation(\"MONTH\", true),\n      peg$c508 = \"quarter\",\n      peg$c509 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c510 = \"second\",\n      peg$c511 = peg$literalExpectation(\"SECOND\", true),\n      peg$c512 = \"time\",\n      peg$c513 = peg$literalExpectation(\"TIME\", true),\n      peg$c514 = \"timezone\",\n      peg$c515 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c516 = \"timezone_hour\",\n      peg$c517 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c518 = \"timezone_minute\",\n      peg$c519 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c520 = \"week\",\n      peg$c521 = peg$literalExpectation(\"WEEK\", true),\n      peg$c522 = \"year\",\n      peg$c523 = peg$literalExpectation(\"YEAR\", true),\n      peg$c524 = function(f) {\n          return f\n        },\n      peg$c525 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c526 = function(kw, f, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                source: s,\n              }\n          }\n        },\n      peg$c527 = \"date_trunc\",\n      peg$c528 = peg$literalExpectation(\"DATE_TRUNC\", true),\n      peg$c529 = function(e, f) {\n          return {\n              type: 'function',\n              name: 'DATE_TRUNC',\n              args: { type: 'expr_list', value: [e, { type: 'origin', value: f }] },\n              over: null,\n            };\n        },\n      peg$c530 = function(c, e, t) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c531 = function(c, e, precision) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c532 = function(c, e, precision, scale) {\n            return {\n              type: 'cast',\n              keyword: c.toLowerCase(),\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c533 = function(c, e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c534 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c535 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c536 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c537 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c538 = \"r\",\n      peg$c539 = peg$literalExpectation(\"R\", true),\n      peg$c540 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c541 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c542 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c543 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c544 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c545 = /^[^'\\\\]/,\n      peg$c546 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c547 = \"\\\\'\",\n      peg$c548 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c549 = function() { return \"\\\\'\";  },\n      peg$c550 = \"\\\\\\\"\",\n      peg$c551 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c552 = function() { return '\\\\\"';  },\n      peg$c553 = \"\\\\\\\\\",\n      peg$c554 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c555 = function() { return \"\\\\\\\\\"; },\n      peg$c556 = \"\\\\/\",\n      peg$c557 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c558 = function() { return \"\\\\/\";  },\n      peg$c559 = \"\\\\b\",\n      peg$c560 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c561 = function() { return \"\\b\"; },\n      peg$c562 = \"\\\\f\",\n      peg$c563 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c564 = function() { return \"\\f\"; },\n      peg$c565 = \"\\\\n\",\n      peg$c566 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c567 = function() { return \"\\n\"; },\n      peg$c568 = \"\\\\r\",\n      peg$c569 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c570 = function() { return \"\\r\"; },\n      peg$c571 = \"\\\\t\",\n      peg$c572 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c573 = function() { return \"\\t\"; },\n      peg$c574 = \"\\\\u\",\n      peg$c575 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c576 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c577 = \"\\\\\",\n      peg$c578 = peg$literalExpectation(\"\\\\\", false),\n      peg$c579 = function() { return \"\\\\\"; },\n      peg$c580 = \"''\",\n      peg$c581 = peg$literalExpectation(\"''\", false),\n      peg$c582 = function() { return \"''\" },\n      peg$c583 = \"\\\"\\\"\",\n      peg$c584 = peg$literalExpectation(\"\\\"\\\"\", false),\n      peg$c585 = function() { return '\"\"' },\n      peg$c586 = \"``\",\n      peg$c587 = peg$literalExpectation(\"``\", false),\n      peg$c588 = function() { return '``' },\n      peg$c589 = /^[\\n\\r]/,\n      peg$c590 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c591 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c592 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c593 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c594 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c595 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c596 = function(op, digits) { return op + digits; },\n      peg$c597 = function(op, digit) { return op + digit; },\n      peg$c598 = function(digits) { return \".\" + digits; },\n      peg$c599 = function(e, digits) { return e + digits; },\n      peg$c600 = function(digits) { return digits.join(\"\"); },\n      peg$c601 = /^[0-9]/,\n      peg$c602 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c603 = /^[0-9a-fA-F]/,\n      peg$c604 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c605 = /^[eE]/,\n      peg$c606 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c607 = /^[+\\-]/,\n      peg$c608 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c609 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c610 = \"null\",\n      peg$c611 = peg$literalExpectation(\"NULL\", true),\n      peg$c612 = \"not null\",\n      peg$c613 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c614 = \"true\",\n      peg$c615 = peg$literalExpectation(\"TRUE\", true),\n      peg$c616 = \"to\",\n      peg$c617 = peg$literalExpectation(\"TO\", true),\n      peg$c618 = \"false\",\n      peg$c619 = peg$literalExpectation(\"FALSE\", true),\n      peg$c620 = \"drop\",\n      peg$c621 = peg$literalExpectation(\"DROP\", true),\n      peg$c622 = function() { return 'DROP'; },\n      peg$c623 = \"use\",\n      peg$c624 = peg$literalExpectation(\"USE\", true),\n      peg$c625 = \"select\",\n      peg$c626 = peg$literalExpectation(\"SELECT\", true),\n      peg$c627 = \"RECURSIVE\",\n      peg$c628 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c629 = \"ignore\",\n      peg$c630 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c631 = \"explain\",\n      peg$c632 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c633 = \"partition\",\n      peg$c634 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c635 = function() { return 'PARTITION' },\n      peg$c636 = \"into\",\n      peg$c637 = peg$literalExpectation(\"INTO\", true),\n      peg$c638 = \"from\",\n      peg$c639 = peg$literalExpectation(\"FROM\", true),\n      peg$c640 = function() { return 'SET' },\n      peg$c641 = \"unlock\",\n      peg$c642 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c643 = \"table\",\n      peg$c644 = peg$literalExpectation(\"TABLE\", true),\n      peg$c645 = function() { return 'TABLE'; },\n      peg$c646 = \"tables\",\n      peg$c647 = peg$literalExpectation(\"TABLES\", true),\n      peg$c648 = function() { return 'TABLES'; },\n      peg$c649 = function() { return 'COLLATE'; },\n      peg$c650 = \"on\",\n      peg$c651 = peg$literalExpectation(\"ON\", true),\n      peg$c652 = \"left\",\n      peg$c653 = peg$literalExpectation(\"LEFT\", true),\n      peg$c654 = \"right\",\n      peg$c655 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c656 = \"full\",\n      peg$c657 = peg$literalExpectation(\"FULL\", true),\n      peg$c658 = \"inner\",\n      peg$c659 = peg$literalExpectation(\"INNER\", true),\n      peg$c660 = \"cross\",\n      peg$c661 = peg$literalExpectation(\"CROSS\", true),\n      peg$c662 = \"join\",\n      peg$c663 = peg$literalExpectation(\"JOIN\", true),\n      peg$c664 = \"outer\",\n      peg$c665 = peg$literalExpectation(\"OUTER\", true),\n      peg$c666 = \"over\",\n      peg$c667 = peg$literalExpectation(\"OVER\", true),\n      peg$c668 = \"union\",\n      peg$c669 = peg$literalExpectation(\"UNION\", true),\n      peg$c670 = \"value\",\n      peg$c671 = peg$literalExpectation(\"VALUE\", true),\n      peg$c672 = function() { return 'VALUE' },\n      peg$c673 = \"values\",\n      peg$c674 = peg$literalExpectation(\"VALUES\", true),\n      peg$c675 = \"using\",\n      peg$c676 = peg$literalExpectation(\"USING\", true),\n      peg$c677 = \"where\",\n      peg$c678 = peg$literalExpectation(\"WHERE\", true),\n      peg$c679 = \"group\",\n      peg$c680 = peg$literalExpectation(\"GROUP\", true),\n      peg$c681 = \"by\",\n      peg$c682 = peg$literalExpectation(\"BY\", true),\n      peg$c683 = \"order\",\n      peg$c684 = peg$literalExpectation(\"ORDER\", true),\n      peg$c685 = \"having\",\n      peg$c686 = peg$literalExpectation(\"HAVING\", true),\n      peg$c687 = \"qualify\",\n      peg$c688 = peg$literalExpectation(\"QUALIFY\", true),\n      peg$c689 = \"window\",\n      peg$c690 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c691 = \"ordinal\",\n      peg$c692 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c693 = function() { return 'ORDINAL' },\n      peg$c694 = \"safe_ordinal\",\n      peg$c695 = peg$literalExpectation(\"SAFE_ORDINAL\", true),\n      peg$c696 = function() { return 'SAFE_ORDINAL' },\n      peg$c697 = \"limit\",\n      peg$c698 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c699 = \"offset\",\n      peg$c700 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c701 = function() { return 'OFFSET'; },\n      peg$c702 = \"safe_offset\",\n      peg$c703 = peg$literalExpectation(\"SAFE_OFFSET\", true),\n      peg$c704 = function() { return 'SAFE_OFFSET'; },\n      peg$c705 = \"asc\",\n      peg$c706 = peg$literalExpectation(\"ASC\", true),\n      peg$c707 = function() { return 'ASC'; },\n      peg$c708 = \"desc\",\n      peg$c709 = peg$literalExpectation(\"DESC\", true),\n      peg$c710 = function() { return 'DESC'; },\n      peg$c711 = \"all\",\n      peg$c712 = peg$literalExpectation(\"ALL\", true),\n      peg$c713 = function() { return 'ALL'; },\n      peg$c714 = \"distinct\",\n      peg$c715 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c716 = function() { return 'DISTINCT';},\n      peg$c717 = \"between\",\n      peg$c718 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c719 = function() { return 'BETWEEN'; },\n      peg$c720 = \"in\",\n      peg$c721 = peg$literalExpectation(\"IN\", true),\n      peg$c722 = function() { return 'IN'; },\n      peg$c723 = \"is\",\n      peg$c724 = peg$literalExpectation(\"IS\", true),\n      peg$c725 = function() { return 'IS'; },\n      peg$c726 = \"like\",\n      peg$c727 = peg$literalExpectation(\"LIKE\", true),\n      peg$c728 = function() { return 'LIKE'; },\n      peg$c729 = \"exists\",\n      peg$c730 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c731 = function() { return 'EXISTS'; },\n      peg$c732 = function() { return 'NOT'; },\n      peg$c733 = \"and\",\n      peg$c734 = peg$literalExpectation(\"AND\", true),\n      peg$c735 = function() { return 'AND'; },\n      peg$c736 = \"or\",\n      peg$c737 = peg$literalExpectation(\"OR\", true),\n      peg$c738 = function() { return 'OR'; },\n      peg$c739 = \"count\",\n      peg$c740 = peg$literalExpectation(\"COUNT\", true),\n      peg$c741 = function() { return 'COUNT'; },\n      peg$c742 = \"max\",\n      peg$c743 = peg$literalExpectation(\"MAX\", true),\n      peg$c744 = function() { return 'MAX'; },\n      peg$c745 = \"min\",\n      peg$c746 = peg$literalExpectation(\"MIN\", true),\n      peg$c747 = function() { return 'MIN'; },\n      peg$c748 = \"sum\",\n      peg$c749 = peg$literalExpectation(\"SUM\", true),\n      peg$c750 = function() { return 'SUM'; },\n      peg$c751 = \"avg\",\n      peg$c752 = peg$literalExpectation(\"AVG\", true),\n      peg$c753 = function() { return 'AVG'; },\n      peg$c754 = \"extract\",\n      peg$c755 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c756 = function() { return 'EXTRACT'; },\n      peg$c757 = \"call\",\n      peg$c758 = peg$literalExpectation(\"CALL\", true),\n      peg$c759 = function() { return 'CALL'; },\n      peg$c760 = \"case\",\n      peg$c761 = peg$literalExpectation(\"CASE\", true),\n      peg$c762 = \"when\",\n      peg$c763 = peg$literalExpectation(\"WHEN\", true),\n      peg$c764 = \"then\",\n      peg$c765 = peg$literalExpectation(\"THEN\", true),\n      peg$c766 = \"else\",\n      peg$c767 = peg$literalExpectation(\"ELSE\", true),\n      peg$c768 = \"end\",\n      peg$c769 = peg$literalExpectation(\"END\", true),\n      peg$c770 = \"cast\",\n      peg$c771 = peg$literalExpectation(\"CAST\", true),\n      peg$c772 = function() { return 'CAST' },\n      peg$c773 = \"safe_cast\",\n      peg$c774 = peg$literalExpectation(\"SAFE_CAST\", true),\n      peg$c775 = function() { return 'SAFE_CAST' },\n      peg$c776 = \"array\",\n      peg$c777 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c778 = function() { return 'ARRAY'; },\n      peg$c779 = \"bytes\",\n      peg$c780 = peg$literalExpectation(\"BYTES\", true),\n      peg$c781 = function() { return 'BYTES'; },\n      peg$c782 = \"bool\",\n      peg$c783 = peg$literalExpectation(\"BOOL\", true),\n      peg$c784 = function() { return 'BOOL'; },\n      peg$c785 = \"char\",\n      peg$c786 = peg$literalExpectation(\"CHAR\", true),\n      peg$c787 = function() { return 'CHAR'; },\n      peg$c788 = \"geography\",\n      peg$c789 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c790 = function() { return 'GEOGRAPHY'; },\n      peg$c791 = \"varchar\",\n      peg$c792 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c793 = function() { return 'VARCHAR';},\n      peg$c794 = \"numeric\",\n      peg$c795 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c796 = function() { return 'NUMERIC'; },\n      peg$c797 = \"decimal\",\n      peg$c798 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c799 = function() { return 'DECIMAL'; },\n      peg$c800 = \"signed\",\n      peg$c801 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c802 = function() { return 'SIGNED'; },\n      peg$c803 = \"unsigned\",\n      peg$c804 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c805 = function() { return 'UNSIGNED'; },\n      peg$c806 = \"int64\",\n      peg$c807 = peg$literalExpectation(\"INT64\", true),\n      peg$c808 = function() { return 'INT64'; },\n      peg$c809 = \"zerofill\",\n      peg$c810 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c811 = function() { return 'ZEROFILL'; },\n      peg$c812 = \"integer\",\n      peg$c813 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c814 = function() { return 'INTEGER'; },\n      peg$c815 = \"json\",\n      peg$c816 = peg$literalExpectation(\"JSON\", true),\n      peg$c817 = function() { return 'JSON'; },\n      peg$c818 = \"smallint\",\n      peg$c819 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c820 = function() { return 'SMALLINT'; },\n      peg$c821 = \"string\",\n      peg$c822 = peg$literalExpectation(\"STRING\", true),\n      peg$c823 = function() { return 'STRING'; },\n      peg$c824 = \"struct\",\n      peg$c825 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c826 = function() { return 'STRUCT'; },\n      peg$c827 = \"tinyint\",\n      peg$c828 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c829 = function() { return 'TINYINT'; },\n      peg$c830 = \"tinytext\",\n      peg$c831 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c832 = function() { return 'TINYTEXT'; },\n      peg$c833 = \"text\",\n      peg$c834 = peg$literalExpectation(\"TEXT\", true),\n      peg$c835 = function() { return 'TEXT'; },\n      peg$c836 = \"mediumtext\",\n      peg$c837 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c838 = function() { return 'MEDIUMTEXT'; },\n      peg$c839 = \"longtext\",\n      peg$c840 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c841 = function() { return 'LONGTEXT'; },\n      peg$c842 = \"bigint\",\n      peg$c843 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c844 = function() { return 'BIGINT'; },\n      peg$c845 = \"float64\",\n      peg$c846 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c847 = function() { return 'FLOAT64'; },\n      peg$c848 = \"double\",\n      peg$c849 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c850 = function() { return 'DOUBLE'; },\n      peg$c851 = function() { return 'DATE'; },\n      peg$c852 = \"datetime\",\n      peg$c853 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c854 = function() { return 'DATETIME'; },\n      peg$c855 = function() { return 'ROWS'; },\n      peg$c856 = function() { return 'TIME'; },\n      peg$c857 = \"timestamp\",\n      peg$c858 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c859 = function() { return 'TIMESTAMP'; },\n      peg$c860 = \"truncate\",\n      peg$c861 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c862 = function() { return 'TRUNCATE'; },\n      peg$c863 = \"user\",\n      peg$c864 = peg$literalExpectation(\"USER\", true),\n      peg$c865 = function() { return 'USER'; },\n      peg$c866 = \"current_date\",\n      peg$c867 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c868 = function() { return 'CURRENT_DATE'; },\n      peg$c869 = \"adddate\",\n      peg$c870 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c871 = function() { return 'ADDDATE'; },\n      peg$c872 = \"interval\",\n      peg$c873 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c874 = function() { return 'INTERVAL'; },\n      peg$c875 = function() { return 'YEAR'; },\n      peg$c876 = function() { return 'ISOYEAR'; },\n      peg$c877 = function() { return 'MONTH'; },\n      peg$c878 = function() { return 'DAY'; },\n      peg$c879 = function() { return 'HOUR'; },\n      peg$c880 = function() { return 'MINUTE'; },\n      peg$c881 = function() { return 'SECOND'; },\n      peg$c882 = \"current_time\",\n      peg$c883 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c884 = function() { return 'CURRENT_TIME'; },\n      peg$c885 = \"current_timestamp\",\n      peg$c886 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c887 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c888 = \"session_user\",\n      peg$c889 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c890 = function() { return 'SESSION_USER'; },\n      peg$c891 = \"global\",\n      peg$c892 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c893 = function() { return 'GLOBAL'; },\n      peg$c894 = \"session\",\n      peg$c895 = peg$literalExpectation(\"SESSION\", true),\n      peg$c896 = function() { return 'SESSION'; },\n      peg$c897 = function() { return 'LOCAL'; },\n      peg$c898 = \"pivot\",\n      peg$c899 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c900 = function() { return 'PIVOT'; },\n      peg$c901 = \"persist\",\n      peg$c902 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c903 = function() { return 'PERSIST'; },\n      peg$c904 = \"persist_only\",\n      peg$c905 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c906 = function() { return 'PERSIST_ONLY'; },\n      peg$c907 = \"add\",\n      peg$c908 = peg$literalExpectation(\"ADD\", true),\n      peg$c909 = function() { return 'ADD'; },\n      peg$c910 = \"column\",\n      peg$c911 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c912 = function() { return 'COLUMN'; },\n      peg$c913 = \"index\",\n      peg$c914 = peg$literalExpectation(\"INDEX\", true),\n      peg$c915 = function() { return 'INDEX'; },\n      peg$c916 = function() { return 'KEY'; },\n      peg$c917 = \"fulltext\",\n      peg$c918 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c919 = function() { return 'FULLTEXT'; },\n      peg$c920 = function() { return 'UNIQUE'; },\n      peg$c921 = \"comment\",\n      peg$c922 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c923 = function() { return 'COMMENT'; },\n      peg$c924 = \"constraint\",\n      peg$c925 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c926 = function() { return 'CONSTRAINT'; },\n      peg$c927 = \"references\",\n      peg$c928 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c929 = function() { return 'REFERENCES'; },\n      peg$c930 = \",\",\n      peg$c931 = peg$literalExpectation(\",\", false),\n      peg$c932 = \"[\",\n      peg$c933 = peg$literalExpectation(\"[\", false),\n      peg$c934 = \"]\",\n      peg$c935 = peg$literalExpectation(\"]\", false),\n      peg$c936 = \";\",\n      peg$c937 = peg$literalExpectation(\";\", false),\n      peg$c938 = \"||\",\n      peg$c939 = peg$literalExpectation(\"||\", false),\n      peg$c940 = \"&&\",\n      peg$c941 = peg$literalExpectation(\"&&\", false),\n      peg$c942 = \"/*\",\n      peg$c943 = peg$literalExpectation(\"/*\", false),\n      peg$c944 = \"*/\",\n      peg$c945 = peg$literalExpectation(\"*/\", false),\n      peg$c946 = \"--\",\n      peg$c947 = peg$literalExpectation(\"--\", false),\n      peg$c948 = \"#\",\n      peg$c949 = peg$literalExpectation(\"#\", false),\n      peg$c950 = peg$anyExpectation(),\n      peg$c951 = /^[ \\t\\n\\r]/,\n      peg$c952 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c953 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c954 = function(n) {\n            return n\n          },\n      peg$c955 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c956 = function(t) { return { dataType: t }; },\n      peg$c957 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c958 = \"MAX\",\n      peg$c959 = peg$literalExpectation(\"MAX\", false),\n      peg$c960 = peg$literalExpectation(\"max\", false),\n      peg$c961 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsestmt();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsestmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsestmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestmt() {\n    var s0;\n\n    s0 = peg$parsequery_statement();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecrud_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinsert_into_set();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsedelete_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecmd_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseproc_stmts();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhere_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseorder_by_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parselimit_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c2(s3, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseorder_by_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parselimit_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c3(s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseon_duplicate_update_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c4(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c5(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_into_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_SET();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseset_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c6(s1, s5, s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parseanalyze_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseattach_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedrop_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetruncate_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parserename_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecall_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseuse_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsealter_table_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseset_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parselock_stmt();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseunlock_stmt();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseshow_stmt();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parsedesc_stmt();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c7();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c9(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c10(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c13(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c17(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c18;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c18;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c21(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c23();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c24(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c25(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_duplicate_update_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c26) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_KEY();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_UPDATE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseset_list();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseanalyze_stmt() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ANALYZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseattach_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ATTACH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c30(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c31(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c32(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_db_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c37(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselock_table_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c38(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunlock_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNLOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c45); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c46(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_SHOW();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c48); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c49) {\n                s5 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c50); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsein_op_right();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsefrom_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parselimit_clause();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c51(s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_SHOW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n              s4 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c53); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n                  s6 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c55); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s4 = [s4, s5, s6];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c56) {\n                s3 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parselike_op_right();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parsewhere_clause();\n                }\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c58(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseshow_grant_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedesc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DESC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DESCRIBE();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c60(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c61(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral_numeric();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c62(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c64(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c66) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c67); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c68();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsecreate_constraint_definition();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parsecreate_constraint_definition();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_options();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_IGNORE();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = peg$parseKW_REPLACE();\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseKW_AS();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseunion_stmt();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c69(s1, s3, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c70(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEMA();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c71(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c72(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parselock_table();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parselock_table();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parselock_table();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c73(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c74) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseshow_grant_for();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c76(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c77;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c77;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c78); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c79(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c80) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c85); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c86) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c87); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c88) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c89); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c90(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c92); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c93) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c94); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c95) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c97) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_not_null();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseliteral_null();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedefault_expr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c100) {\n                      s9 = input.substr(peg$currPos, 14);\n                      peg$currPos += 14;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c102) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c104) {\n                            s12 = input.substr(peg$currPos, 7);\n                            peg$currPos += 7;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c105); }\n                          }\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c106) {\n                              s14 = input.substr(peg$currPos, 3);\n                              peg$currPos += 3;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c107); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsekeyword_comment();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecollate_expr();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsecolumn_format();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsestorage();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsereference_definition();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c108(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c109(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c110(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parselock_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c111(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c112) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_VAR__PRE_AT();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseident();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseshow_grant_for_using();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c114(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_check();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c115(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c116(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c117(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c118(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c119(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c120) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c122) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c123); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c124) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c126(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c127) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c129) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c131) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c132); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c133(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c134) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c136) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c137); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c138) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c140(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseon_reference();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c141(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c100) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c101); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c142) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c143); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c144) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c145); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c146) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c147); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c148) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c149); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c150) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c151); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c152(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c153) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c154); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c155(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c156) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c157); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c158;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c159); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c160) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c162) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c163); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c93) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c158;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c159); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c164(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c165) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c166); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c167(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c168(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c169) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c170); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c171) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c172); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c173(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_RENAME_TABLE();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c174) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c175); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c176) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c177); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c178(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c179) {\n        s1 = input.substr(peg$currPos, 12);\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c180); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c181) {\n            s3 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c182); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c183(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseshow_grant_for_using_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c184(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c73(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c104) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c105); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c106) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c107); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c185(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c186(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c187) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c188); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c189(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_check() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c190) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c191); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c192) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c193); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c112) {\n                  s8 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c113); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c194) {\n                      s10 = input.substr(peg$currPos, 11);\n                      peg$currPos += 11;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c195); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLPAREN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpr();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseRPAREN();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c196(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c197) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c198); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c200); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c201(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c202(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c203(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseindex_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c204) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c205); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c206) {\n              s3 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c207); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseident_name();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c208(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c209) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c210); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c211) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c212); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c213(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsekeyword_comment();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DELETE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c214(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c55); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c215();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c216(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c217(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c218(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c219(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CURRENT_TIMESTAMP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c220(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c221) {\n        s1 = input.substr(peg$currPos, 8);\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c223) {\n          s1 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c225) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c226); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c227) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c228); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c229) {\n                s1 = input.substr(peg$currPos, 11);\n                peg$currPos += 11;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c230); }\n              }\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_CURRENT_TIMESTAMP();\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c232) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c233); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c234) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c236) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c238) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c239); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c240) {\n      s0 = peg$c240;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c241); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c18;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c242) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c244) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ANALYZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c246) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ATTACH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c248) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c250) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c251); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c252) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c254) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESCRIBE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c256) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c258;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c259); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c260) {\n      s0 = peg$c260;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c261); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c262;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c263); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c264) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c265); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEMA() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c266) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c267); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c268) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c269); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c270) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c271); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c144) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c272;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c273); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c274;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c275); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c276(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseunion_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselimit_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c277(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c278(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c279) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c280); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c281) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c282); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c283(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c272;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c273); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c274;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c275); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c284(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c285(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c272;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c273); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c274;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c275); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c286(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c16(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c287(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parsequalify_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parseorder_by_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parselimit_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parse__();\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parsewindow_clause();\n                                                          if (s28 === peg$FAILED) {\n                                                            s28 = null;\n                                                          }\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c288(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26, s28);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c112) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c289) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c290); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c291) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c292); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c293) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c294); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c295(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c296(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebinary_column_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c297(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c281) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c282); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c244) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c245); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c298(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c299(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c300(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseKW_SAFE_OFFSET();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseKW_SAFE_ORDINAL();\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c301(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c302(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsecolumn_offset_expr();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parsecolumn_without_kw();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSTAR();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c303(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn_offset_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c304(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr_alias();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c305(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c305(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c308(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c309(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c112) {\n                  s7 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c113); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsein_op_right();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsealias_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c310(s5, s9, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c311(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c312(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c313(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c314(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c314(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c315(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c316(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c317(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehint() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    if (peg$c318.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c320.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c321); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident_name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (peg$c322.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c323); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseident_name();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (peg$c324.test(input.charAt(peg$currPos))) {\n                        s10 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c325); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetablesample() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c328) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c329); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c330) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c331); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s5 = peg$c272;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c273); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c332) {\n                      s9 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c334) {\n                        s9 = input.substr(peg$currPos, 4);\n                        peg$currPos += 4;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c335); }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s11 = peg$c274;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c275); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsefrom_unnest_item();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsehint();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetablesample();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsealias_clause();\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c336(s1, s2, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsetablesample();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c337(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c338();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c339();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c340();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c341(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c342(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_without_kw();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_without_kw();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_without_kw();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c343(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident_without_kw();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c345(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c345(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c346(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c345(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequalify_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_QUALIFY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c347(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c348(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c349(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c350(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c351(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c352(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c355) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c356); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c357) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c358); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c359) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c360); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c361) {\n                            s12 = peg$c361;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c362); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c363();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_frame_following();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_frame_preceding();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c364(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_ROWS();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_BETWEEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsewindow_frame_preceding();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AND();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsewindow_frame_following();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c365(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c366) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c367); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c357) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c358); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c368(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c357) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c358); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c369(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c370) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c371); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c372();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c373(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c374(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c64(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c171) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseliteral_string();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_DESC();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ASC();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c375(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c376(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c377(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_expr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsearray_expr();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parse_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseunion_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c300(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c378(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c379(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c380(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c381(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecomparison_op_right();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c382(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseLOGIC_OPERATOR();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c384(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c385(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c386;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c387); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c18;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c388(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c389(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c390(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c391(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parselogic_operator_expr();\n          if (s6 === peg$FAILED) {\n            s6 = peg$parseadditive_expr();\n          }\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselogic_operator_expr();\n              if (s6 === peg$FAILED) {\n                s6 = peg$parseadditive_expr();\n              }\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c392(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c393) {\n      s0 = peg$c393;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c394); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c395;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c396); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c397) {\n          s0 = peg$c397;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c398); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c399) {\n            s0 = peg$c399;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c400); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c401;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c402); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c18;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c403) {\n                  s0 = peg$c403;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c404); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c405(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c406(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c407(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c391(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c391(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c391(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c408(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c409(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsefrom_unnest_item();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c410(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c411;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c413;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c414); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c416;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c418;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c419); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c420;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c421); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsearray_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsestruct_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecast_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseaggr_func();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsefunc_call();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecase_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseinterval_expr();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecolumn_ref();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseparam();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseLPAREN();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseor_and_where_expr();\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseRPAREN();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c422(s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c423(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecase_when_then_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c424(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecase_when_then_list();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c425(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecase_when_then();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecase_when_then();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c65(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c426(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c427(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_without_kw();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_without_kw();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDOT();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_without_kw();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c429(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c430(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c432(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c433;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c435.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c435.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c436); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c433;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c434); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c437(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c158;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c159); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c438.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c439); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c438.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c439); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c158;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c159); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c437(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c440;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c442.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c443); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c442.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c443); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c440;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c441); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c444(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0;\n\n    s0 = peg$parsecolumn_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_without_kw() {\n    var s0;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c445(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c448.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c450.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c452.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s1 = peg$c454;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s1 = peg$c258;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c259); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseident_name();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c456(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseaggr_func();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsealias_clause();\n                    if (s11 === peg$FAILED) {\n                      s11 = null;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9, s10, s11];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseaggr_func();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsealias_clause();\n                      if (s11 === peg$FAILED) {\n                        s11 = null;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c457(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c458(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c232) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c233); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c459(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c232) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c233); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c460(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c461(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c462(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c463(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c464(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseorder_by_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c465(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexpr();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseorder_by_clause();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c466(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c416;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c467();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseany_value_func();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c468(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsescalar_time_func();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c469(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseproc_func_name();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseor_and_where_expr();\n                    if (s5 === peg$FAILED) {\n                      s5 = null;\n                    }\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseRPAREN();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parseover_partition();\n                            if (s9 === peg$FAILED) {\n                              s9 = null;\n                            }\n                            if (s9 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c470(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident_name();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_name();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c471(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_SESSION_USER();\n    }\n\n    return s0;\n  }\n\n  function peg$parseany_value_having() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_MAX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_MIN();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseor_and_where_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c472(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseany_value_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c473) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseor_and_where_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseany_value_having();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c475(s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c476) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c478) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c479); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c480) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c481); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c482) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c483); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c484) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c485); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c486) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c487); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c488) {\n                  s1 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c489); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c490) {\n                    s1 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c491); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c492) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c494) {\n                        s1 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c495); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c496) {\n                          s1 = input.substr(peg$currPos, 7);\n                          peg$currPos += 7;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c497); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c498) {\n                            s1 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c499); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c500) {\n                              s1 = input.substr(peg$currPos, 10);\n                              peg$currPos += 10;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c501); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 12).toLowerCase() === peg$c502) {\n                                s1 = input.substr(peg$currPos, 12);\n                                peg$currPos += 12;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c503); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c504) {\n                                  s1 = input.substr(peg$currPos, 6);\n                                  peg$currPos += 6;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c505); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c506) {\n                                    s1 = input.substr(peg$currPos, 5);\n                                    peg$currPos += 5;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c507); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c508) {\n                                      s1 = input.substr(peg$currPos, 7);\n                                      peg$currPos += 7;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c509); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c510) {\n                                        s1 = input.substr(peg$currPos, 6);\n                                        peg$currPos += 6;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c511); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c512) {\n                                          s1 = input.substr(peg$currPos, 4);\n                                          peg$currPos += 4;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c513); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c514) {\n                                            s1 = input.substr(peg$currPos, 8);\n                                            peg$currPos += 8;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c515); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c516) {\n                                              s1 = input.substr(peg$currPos, 13);\n                                              peg$currPos += 13;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c517); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 15).toLowerCase() === peg$c518) {\n                                                s1 = input.substr(peg$currPos, 15);\n                                                peg$currPos += 15;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c520) {\n                                                  s1 = input.substr(peg$currPos, 4);\n                                                  peg$currPos += 4;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c521); }\n                                                }\n                                                if (s1 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c522) {\n                                                    s1 = input.substr(peg$currPos, 4);\n                                                    peg$currPos += 4;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c523); }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c524(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c525(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_EXTRACT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseextract_filed();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_FROM();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseexpr();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseRPAREN();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c526(s1, s5, s9);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c527) {\n          s1 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c528); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseCOMMA();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseextract_filed();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseRPAREN();\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c529(s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_keyword() {\n    var s0;\n\n    s0 = peg$parseKW_CAST();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_SAFE_CAST();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecast_keyword();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c530(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecast_keyword();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c531(s1, s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecast_keyword();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c532(s1, s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecast_keyword();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c533(s1, s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c534();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c535();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c536();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c537();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c538) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c539); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c158;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c159); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c158;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c159); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c540(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c538) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c539); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c433;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c433;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c434); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c541(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c158;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c159); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c158;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c159); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c542(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c433;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c433;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c434); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c542(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c543.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c545.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c546); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c547) {\n      s1 = peg$c547;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c549();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c550) {\n        s1 = peg$c550;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c551); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c552();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c553) {\n          s1 = peg$c553;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c554); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c555();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c556) {\n            s1 = peg$c556;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c557); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c558();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c559) {\n              s1 = peg$c559;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c560); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c561();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c562) {\n                s1 = peg$c562;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c563); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c564();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c565) {\n                  s1 = peg$c565;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c566); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c567();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c568) {\n                    s1 = peg$c568;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c569); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c570();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c571) {\n                      s1 = peg$c571;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c572); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c573();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c574) {\n                        s1 = peg$c574;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c575); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c576(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c577;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c578); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c579();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c580) {\n                            s1 = peg$c580;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c581); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c582();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c583) {\n                              s1 = peg$c583;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c584); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c585();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.substr(peg$currPos, 2) === peg$c586) {\n                                s1 = peg$c586;\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c587); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c588();\n                              }\n                              s0 = s1;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c589.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c590); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c591(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c592(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c593(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c594(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c595(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c413;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c414); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c411;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c412); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c596(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c413;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c414); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c411;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c412); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c597(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c77;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c600(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c601.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c602); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c603.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c605.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c607.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c608); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c609(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c610) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c611); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c83); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c614) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c616) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c620) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c622();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c625) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c626); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c627) {\n      s1 = peg$c627;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c631) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c633) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c635();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c636) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c638) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c639); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c640();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c641) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c642); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c92); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c291) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c292); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c643) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c645();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c648();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c171) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c649();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c652) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c656) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c658) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c659); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c662) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c664) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c665); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c666) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c667); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c668) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c669); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERSECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c279) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c280); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXCEPT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c281) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c282); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c670) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c671); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c672();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c673) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c674); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c675) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c676); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c677) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c678); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c204) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c679) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c680); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c681) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c682); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c683) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c684); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c685) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c686); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_QUALIFY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c687) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c688); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c689) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c691) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c692); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c693();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SAFE_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c696();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c697) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c698); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c699) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c700); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c701();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SAFE_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c702) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c703); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c704();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c705) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c706); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c707();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c708) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c709); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c710();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c711) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c712); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c713();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c714) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c715); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c716();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c717) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c718); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c719();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c720) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c721); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c722();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c723) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c724); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c725();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c726) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c727); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c728();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c729) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c730); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c731();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c192) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c193); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c732();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c733) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c734); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c735();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c736) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c737); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c738();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c739) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c740); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c741();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c742) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c743); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c744();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c745) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c746); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c747();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c748) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c749); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c750();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c751) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c752); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c753();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c754) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c755); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c756();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c757) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c758); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c759();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c760) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c761); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c762) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c763); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c764) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c765); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c766) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c767); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c768) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c769); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SAFE_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c797) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c798); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c799();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c802();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c803) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c804); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c805();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c808();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c809) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c810); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c811();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c812) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c813); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c814();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c815) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c816); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c817();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c818) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c819); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c820();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c821) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c822); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c823();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c824) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c825); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c826();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c827) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c828); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c829();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c830) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c831); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c832();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c833) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c834); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c835();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c836) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c837); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c838();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c839) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c840); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c841();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c842) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c843); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c844();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c845) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c846); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c847();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c848) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c849); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c850();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c851();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c852) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c853); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c854();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c855();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c856();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c857) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c858); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c859();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c860) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c861); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c862();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c863) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c864); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c865();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c866) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c867); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c868();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c869) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c870); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c871();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c872) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c873); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c874();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c875();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_ISOYEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c496) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c877();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c478) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c479); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c878();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c490) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c880();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c881();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c882) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c883); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c884();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c885) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c886); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c887();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c888) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c889); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c890();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c891) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c892); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c893();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c894) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c895); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c896();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c176) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c177); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c897();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c910) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c912();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c913) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c915();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c106) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c916();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c917) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c918); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c919();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c102) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c103); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c920();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c921) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c922); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c923();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c924) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c925); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c926();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c927) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c928); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c929();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c77;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c930;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c931); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c416;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c272;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c273); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c274;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c275); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c401;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c395;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c932;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c933); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c934;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c935); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c936;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c937); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c938) {\n      s0 = peg$c938;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c939); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c940) {\n      s0 = peg$c940;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c941); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c942) {\n      s1 = peg$c942;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c943); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c944) {\n        s5 = peg$c944;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c945); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c944) {\n          s5 = peg$c944;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c945); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c944) {\n          s3 = peg$c944;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c945); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c946) {\n      s1 = peg$c946;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c947); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c948;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c949); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_ISOYEAR();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_MONTH();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_DAY();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_HOUR();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_MINUTE();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseKW_UNIT_SECOND();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c951.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c952); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c589.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c590); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c589.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c590); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c953(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c954(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c955(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLPAREN();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            if (peg$c601.test(input.charAt(peg$currPos))) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c602); }\n            }\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                if (peg$c601.test(input.charAt(peg$currPos))) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c602); }\n                }\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseRPAREN();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseLPAREN();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              if (peg$c601.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c602); }\n              }\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  if (peg$c601.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c602); }\n                  }\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseRPAREN();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c956(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c956(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c601.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c602); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c601.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c602); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c957(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c956(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_BYTES();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseLPAREN();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          if (peg$c601.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c602); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c601.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c602); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c958) {\n              s5 = peg$c958;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c959); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c742) {\n                s5 = peg$c742;\n                peg$currPos += 3;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c960); }\n              }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseRPAREN();\n              if (s7 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6, s7];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c956(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c961(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c961(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': false,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n      'PIVOT': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': false,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      // 'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      // 'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\n// for web worker\nif (typeof self === \"object\" && self) {\n  self.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n\nif (!global && typeof window === \"object\" && window) window.global = window\n\nif (typeof global === \"object\" && global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}